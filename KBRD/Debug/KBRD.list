
KBRD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  0800e664  0800e664  0000f664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f148  0800f148  000111ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f148  0800f148  00010148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f150  0800f150  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f150  0800f150  00010150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f154  0800f154  00010154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f158  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001200  200001ec  0800f344  000111ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ec  0800f344  000113ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a406  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004488  00000000  00000000  0002b622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012aa  00000000  00000000  000312d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001baa5  00000000  00000000  00032582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e27a  00000000  00000000  0004e027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f765  00000000  00000000  0006c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ba06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bdc  00000000  00000000  0010ba4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00112628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e64c 	.word	0x0800e64c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800e64c 	.word	0x0800e64c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000b82:	f008 fc6b 	bl	800945c <HAL_RCC_GetPCLK1Freq>
 8000b86:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	@ (8000c44 <ARGB_Init+0xc8>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <ARGB_Init+0x1c>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <ARGB_Init+0x1e>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ba2:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	4a27      	ldr	r2, [pc, #156]	@ (8000c48 <ARGB_Init+0xcc>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bb2:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <ARGB_Init+0xd0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <ARGB_Init+0xd0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <ARGB_Init+0xd0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.5/*0.56*/) - 1;     // Log.1 - 56% - 0.70us
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fdc1 	bl	8000758 <__aeabi_ui2d>
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <ARGB_Init+0xd4>)
 8000bdc:	f7ff fb50 	bl	8000280 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4610      	mov	r0, r2
 8000be6:	4619      	mov	r1, r3
 8000be8:	f7ff fe30 	bl	800084c <__aeabi_d2uiz>
 8000bec:	4603      	mov	r3, r0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <ARGB_Init+0xd8>)
 8000bf6:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.25/*0.28*/) - 1;     // Log.0 - 28% - 0.35us
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fdad 	bl	8000758 <__aeabi_ui2d>
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <ARGB_Init+0xdc>)
 8000c04:	f7ff fb3c 	bl	8000280 <__aeabi_dmul>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f7ff fe1c 	bl	800084c <__aeabi_d2uiz>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <ARGB_Init+0xe0>)
 8000c1e:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <ARGB_Init+0xe4>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <ARGB_Init+0xd0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f009 fa86 	bl	800a140 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c34:	2001      	movs	r0, #1
 8000c36:	f002 ff2b 	bl	8003a90 <HAL_Delay>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	014f8b59 	.word	0x014f8b59
 8000c4c:	20000558 	.word	0x20000558
 8000c50:	3fe00000 	.word	0x3fe00000
 8000c54:	20000208 	.word	0x20000208
 8000c58:	3fd00000 	.word	0x3fd00000
 8000c5c:	20000209 	.word	0x20000209
 8000c60:	200003fa 	.word	0x200003fa

08000c64 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 f891 	bl	8000d94 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <ARGB_SetBrightness+0x1c>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	7013      	strb	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20000000 	.word	0x20000000

08000c98 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	80fb      	strh	r3, [r7, #6]
 8000caa:	4603      	mov	r3, r0
 8000cac:	717b      	strb	r3, [r7, #5]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	713b      	strb	r3, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	2b63      	cmp	r3, #99	@ 0x63
 8000cba:	d912      	bls.n	8000ce2 <ARGB_SetRGB+0x4a>
        u16_t _i = i / NUM_PIXELS;
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	4a32      	ldr	r2, [pc, #200]	@ (8000d88 <ARGB_SetRGB+0xf0>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	095b      	lsrs	r3, r3, #5
 8000cc6:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	0252      	lsls	r2, r2, #9
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	441a      	add	r2, r3
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	4413      	add	r3, r2
 8000ce0:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d8c <ARGB_SetRGB+0xf4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cee:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cf2:	797a      	ldrb	r2, [r7, #5]
 8000cf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cf8:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <ARGB_SetRGB+0xf4>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	3301      	adds	r3, #1
 8000d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d0a:	793a      	ldrb	r2, [r7, #4]
 8000d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d10:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <ARGB_SetRGB+0xf4>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d28:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d2a:	793b      	ldrb	r3, [r7, #4]
 8000d2c:	21b0      	movs	r1, #176	@ 0xb0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9cc 	bl	80010cc <scale8>
 8000d34:	4603      	mov	r3, r0
 8000d36:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	21f0      	movs	r1, #240	@ 0xf0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f9c5 	bl	80010cc <scale8>
 8000d42:	4603      	mov	r3, r0
 8000d44:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d46:	793b      	ldrb	r3, [r7, #4]
 8000d48:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d4a:	797b      	ldrb	r3, [r7, #5]
 8000d4c:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d52:	88fa      	ldrh	r2, [r7, #6]
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	490d      	ldr	r1, [pc, #52]	@ (8000d90 <ARGB_SetRGB+0xf8>)
 8000d5c:	7b7a      	ldrb	r2, [r7, #13]
 8000d5e:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d60:	88fa      	ldrh	r2, [r7, #6]
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4909      	ldr	r1, [pc, #36]	@ (8000d90 <ARGB_SetRGB+0xf8>)
 8000d6c:	7b3a      	ldrb	r2, [r7, #12]
 8000d6e:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d70:	88fa      	ldrh	r2, [r7, #6]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	4905      	ldr	r1, [pc, #20]	@ (8000d90 <ARGB_SetRGB+0xf8>)
 8000d7c:	7afa      	ldrb	r2, [r7, #11]
 8000d7e:	54ca      	strb	r2, [r1, r3]
#endif
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	51eb851f 	.word	0x51eb851f
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	2000020c 	.word	0x2000020c

08000d94 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	71bb      	strb	r3, [r7, #6]
 8000da2:	4613      	mov	r3, r2
 8000da4:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	81fb      	strh	r3, [r7, #14]
 8000daa:	e00b      	b.n	8000dc4 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000dac:	89fb      	ldrh	r3, [r7, #14]
 8000dae:	b298      	uxth	r0, r3
 8000db0:	797b      	ldrb	r3, [r7, #5]
 8000db2:	79ba      	ldrb	r2, [r7, #6]
 8000db4:	79f9      	ldrb	r1, [r7, #7]
 8000db6:	f7ff ff6f 	bl	8000c98 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dba:	89fb      	ldrh	r3, [r7, #14]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	81fb      	strh	r3, [r7, #14]
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	2b63      	cmp	r3, #99	@ 0x63
 8000dca:	d9ef      	bls.n	8000dac <ARGB_FillRGB+0x18>
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000dde:	4b9d      	ldr	r3, [pc, #628]	@ (8001054 <ARGB_Show+0x27c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000de4:	4b9c      	ldr	r3, [pc, #624]	@ (8001058 <ARGB_Show+0x280>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d105      	bne.n	8000dfa <ARGB_Show+0x22>
 8000dee:	4b9b      	ldr	r3, [pc, #620]	@ (800105c <ARGB_Show+0x284>)
 8000df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d001      	beq.n	8000dfe <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e15e      	b.n	80010bc <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e0a6      	b.n	8000f52 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e04:	4b96      	ldr	r3, [pc, #600]	@ (8001060 <ARGB_Show+0x288>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd04      	ble.n	8000e26 <ARGB_Show+0x4e>
 8000e1c:	4b91      	ldr	r3, [pc, #580]	@ (8001064 <ARGB_Show+0x28c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	e003      	b.n	8000e2e <ARGB_Show+0x56>
 8000e26:	4b90      	ldr	r3, [pc, #576]	@ (8001068 <ARGB_Show+0x290>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4619      	mov	r1, r3
 8000e34:	4b8d      	ldr	r3, [pc, #564]	@ (800106c <ARGB_Show+0x294>)
 8000e36:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e3a:	4b89      	ldr	r3, [pc, #548]	@ (8001060 <ARGB_Show+0x288>)
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dd04      	ble.n	8000e5c <ARGB_Show+0x84>
 8000e52:	4b84      	ldr	r3, [pc, #528]	@ (8001064 <ARGB_Show+0x28c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	e003      	b.n	8000e64 <ARGB_Show+0x8c>
 8000e5c:	4b82      	ldr	r3, [pc, #520]	@ (8001068 <ARGB_Show+0x290>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	3308      	adds	r3, #8
 8000e6a:	4a80      	ldr	r2, [pc, #512]	@ (800106c <ARGB_Show+0x294>)
 8000e6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e70:	4b7b      	ldr	r3, [pc, #492]	@ (8001060 <ARGB_Show+0x288>)
 8000e72:	789b      	ldrb	r3, [r3, #2]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dd04      	ble.n	8000e92 <ARGB_Show+0xba>
 8000e88:	4b76      	ldr	r3, [pc, #472]	@ (8001064 <ARGB_Show+0x28c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	e003      	b.n	8000e9a <ARGB_Show+0xc2>
 8000e92:	4b75      	ldr	r3, [pc, #468]	@ (8001068 <ARGB_Show+0x290>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	3310      	adds	r3, #16
 8000ea0:	4a72      	ldr	r2, [pc, #456]	@ (800106c <ARGB_Show+0x294>)
 8000ea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8001060 <ARGB_Show+0x288>)
 8000ea8:	78db      	ldrb	r3, [r3, #3]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	dd04      	ble.n	8000ec8 <ARGB_Show+0xf0>
 8000ebe:	4b69      	ldr	r3, [pc, #420]	@ (8001064 <ARGB_Show+0x28c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	e003      	b.n	8000ed0 <ARGB_Show+0xf8>
 8000ec8:	4b67      	ldr	r3, [pc, #412]	@ (8001068 <ARGB_Show+0x290>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	4a65      	ldr	r2, [pc, #404]	@ (800106c <ARGB_Show+0x294>)
 8000ed8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000edc:	4b60      	ldr	r3, [pc, #384]	@ (8001060 <ARGB_Show+0x288>)
 8000ede:	791b      	ldrb	r3, [r3, #4]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd04      	ble.n	8000efe <ARGB_Show+0x126>
 8000ef4:	4b5b      	ldr	r3, [pc, #364]	@ (8001064 <ARGB_Show+0x28c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	e003      	b.n	8000f06 <ARGB_Show+0x12e>
 8000efe:	4b5a      	ldr	r3, [pc, #360]	@ (8001068 <ARGB_Show+0x290>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4619      	mov	r1, r3
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3320      	adds	r3, #32
 8000f0c:	4a57      	ldr	r2, [pc, #348]	@ (800106c <ARGB_Show+0x294>)
 8000f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f12:	4b53      	ldr	r3, [pc, #332]	@ (8001060 <ARGB_Show+0x288>)
 8000f14:	795b      	ldrb	r3, [r3, #5]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	dd04      	ble.n	8000f34 <ARGB_Show+0x15c>
 8000f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001064 <ARGB_Show+0x28c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4619      	mov	r1, r3
 8000f32:	e003      	b.n	8000f3c <ARGB_Show+0x164>
 8000f34:	4b4c      	ldr	r3, [pc, #304]	@ (8001068 <ARGB_Show+0x290>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3328      	adds	r3, #40	@ 0x28
 8000f42:	4a4a      	ldr	r2, [pc, #296]	@ (800106c <ARGB_Show+0x294>)
 8000f44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	f67f af54 	bls.w	8000e04 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f60:	e0a4      	b.n	80010ac <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f62:	4b43      	ldr	r3, [pc, #268]	@ (8001070 <ARGB_Show+0x298>)
 8000f64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d102      	bne.n	8000f74 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f72:	e09b      	b.n	80010ac <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f74:	4b3e      	ldr	r3, [pc, #248]	@ (8001070 <ARGB_Show+0x298>)
 8000f76:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d11d      	bne.n	8000fbc <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f80:	4b3b      	ldr	r3, [pc, #236]	@ (8001070 <ARGB_Show+0x298>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f88:	4b39      	ldr	r3, [pc, #228]	@ (8001070 <ARGB_Show+0x298>)
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8c:	4a39      	ldr	r2, [pc, #228]	@ (8001074 <ARGB_Show+0x29c>)
 8000f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000f90:	4b37      	ldr	r3, [pc, #220]	@ (8001070 <ARGB_Show+0x298>)
 8000f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f94:	4a38      	ldr	r2, [pc, #224]	@ (8001078 <ARGB_Show+0x2a0>)
 8000f96:	641a      	str	r2, [r3, #64]	@ 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000f98:	4b35      	ldr	r3, [pc, #212]	@ (8001070 <ARGB_Show+0x298>)
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9c:	4a37      	ldr	r2, [pc, #220]	@ (800107c <ARGB_Show+0x2a4>)
 8000f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fa0:	4b33      	ldr	r3, [pc, #204]	@ (8001070 <ARGB_Show+0x298>)
 8000fa2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fa4:	4931      	ldr	r1, [pc, #196]	@ (800106c <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <ARGB_Show+0x298>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3338      	adds	r3, #56	@ 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fac:	461a      	mov	r2, r3
 8000fae:	2330      	movs	r3, #48	@ 0x30
 8000fb0:	f003 fb10 	bl	80045d4 <HAL_DMA_Start_IT>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <ARGB_Show+0x1f0>
 8000fba:	e002      	b.n	8000fc2 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fc0:	e074      	b.n	80010ac <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fc6:	e071      	b.n	80010ac <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <ARGB_Show+0x298>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <ARGB_Show+0x298>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000fd6:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <ARGB_Show+0x298>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <ARGB_Show+0x2a8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d107      	bne.n	8000ff2 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000fe2:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <ARGB_Show+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000fe8:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <ARGB_Show+0x298>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ff0:	645a      	str	r2, [r3, #68]	@ 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <ARGB_Show+0x298>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a22      	ldr	r2, [pc, #136]	@ (8001080 <ARGB_Show+0x2a8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d018      	beq.n	800102e <ARGB_Show+0x256>
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <ARGB_Show+0x298>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001004:	d013      	beq.n	800102e <ARGB_Show+0x256>
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <ARGB_Show+0x298>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <ARGB_Show+0x2ac>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d00e      	beq.n	800102e <ARGB_Show+0x256>
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <ARGB_Show+0x298>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <ARGB_Show+0x2b0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d009      	beq.n	800102e <ARGB_Show+0x256>
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <ARGB_Show+0x298>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <ARGB_Show+0x2b4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d004      	beq.n	800102e <ARGB_Show+0x256>
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <ARGB_Show+0x298>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	@ (8001090 <ARGB_Show+0x2b8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d132      	bne.n	8001094 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <ARGB_Show+0x298>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b06      	cmp	r3, #6
 800103e:	d032      	beq.n	80010a6 <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <ARGB_Show+0x298>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <ARGB_Show+0x298>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001050:	e029      	b.n	80010a6 <ARGB_Show+0x2ce>
 8001052:	bf00      	nop
 8001054:	200003fa 	.word	0x200003fa
 8001058:	200003f8 	.word	0x200003f8
 800105c:	200005e8 	.word	0x200005e8
 8001060:	2000020c 	.word	0x2000020c
 8001064:	20000208 	.word	0x20000208
 8001068:	20000209 	.word	0x20000209
 800106c:	20000338 	.word	0x20000338
 8001070:	20000558 	.word	0x20000558
 8001074:	080010f5 	.word	0x080010f5
 8001078:	080013a5 	.word	0x080013a5
 800107c:	08009b63 	.word	0x08009b63
 8001080:	40010000 	.word	0x40010000
 8001084:	40000400 	.word	0x40000400
 8001088:	40000800 	.word	0x40000800
 800108c:	40000c00 	.word	0x40000c00
 8001090:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <ARGB_Show+0x2ec>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <ARGB_Show+0x2ec>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e000      	b.n	80010a8 <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80010a6:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f47f af57 	bne.w	8000f62 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <ARGB_Show+0x2f0>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80010ba:	2302      	movs	r3, #2
    }
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000558 	.word	0x20000558
 80010c8:	200003f8 	.word	0x200003f8

080010cc <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	79ba      	ldrb	r2, [r7, #6]
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	121b      	asrs	r3, r3, #8
 80010e6:	b2db      	uxtb	r3, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001100:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a9d      	ldr	r2, [pc, #628]	@ (800137c <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001106:	4293      	cmp	r3, r2
 8001108:	f040 8131 	bne.w	800136e <ARGB_TIM_DMADelayPulseCplt+0x27a>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a9c      	ldr	r2, [pc, #624]	@ (8001380 <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	f040 812c 	bne.w	800136e <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001116:	4b9b      	ldr	r3, [pc, #620]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8128 	beq.w	8001372 <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d10b      	bne.n	8001144 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2201      	movs	r2, #1
 8001130:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d136      	bne.n	80011a8 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001142:	e031      	b.n	80011a8 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d10b      	bne.n	8001166 <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2202      	movs	r2, #2
 8001152:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d125      	bne.n	80011a8 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001164:	e020      	b.n	80011a8 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	d10b      	bne.n	8001188 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2204      	movs	r2, #4
 8001174:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d114      	bne.n	80011a8 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001186:	e00f      	b.n	80011a8 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	d10a      	bne.n	80011a8 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2208      	movs	r2, #8
 8001196:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d103      	bne.n	80011a8 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80011a8:	4b76      	ldr	r3, [pc, #472]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	2b63      	cmp	r3, #99	@ 0x63
 80011b0:	d87b      	bhi.n	80012aa <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	72fb      	strb	r3, [r7, #11]
 80011b6:	e06c      	b.n	8001292 <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011b8:	4b72      	ldr	r3, [pc, #456]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	4a70      	ldr	r2, [pc, #448]	@ (8001388 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011da:	2b00      	cmp	r3, #0
 80011dc:	dd04      	ble.n	80011e8 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 80011de:	4b6b      	ldr	r3, [pc, #428]	@ (800138c <ARGB_TIM_DMADelayPulseCplt+0x298>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4619      	mov	r1, r3
 80011e6:	e003      	b.n	80011f0 <ARGB_TIM_DMADelayPulseCplt+0xfc>
 80011e8:	4b69      	ldr	r3, [pc, #420]	@ (8001390 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3318      	adds	r3, #24
 80011f6:	4a67      	ldr	r2, [pc, #412]	@ (8001394 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 80011f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011fc:	4b61      	ldr	r3, [pc, #388]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	3301      	adds	r3, #1
 800120c:	4a5e      	ldr	r2, [pc, #376]	@ (8001388 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 800120e:	5cd3      	ldrb	r3, [r2, r3]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	7afb      	ldrb	r3, [r7, #11]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001220:	2b00      	cmp	r3, #0
 8001222:	dd04      	ble.n	800122e <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001224:	4b59      	ldr	r3, [pc, #356]	@ (800138c <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	e003      	b.n	8001236 <ARGB_TIM_DMADelayPulseCplt+0x142>
 800122e:	4b58      	ldr	r3, [pc, #352]	@ (8001390 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3320      	adds	r3, #32
 800123c:	4a55      	ldr	r2, [pc, #340]	@ (8001394 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 800123e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001242:	4b50      	ldr	r3, [pc, #320]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	3302      	adds	r3, #2
 8001252:	4a4d      	ldr	r2, [pc, #308]	@ (8001388 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001266:	2b00      	cmp	r3, #0
 8001268:	dd04      	ble.n	8001274 <ARGB_TIM_DMADelayPulseCplt+0x180>
 800126a:	4b48      	ldr	r3, [pc, #288]	@ (800138c <ARGB_TIM_DMADelayPulseCplt+0x298>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
 8001272:	e003      	b.n	800127c <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001274:	4b46      	ldr	r3, [pc, #280]	@ (8001390 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3328      	adds	r3, #40	@ 0x28
 8001282:	4a44      	ldr	r2, [pc, #272]	@ (8001394 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3301      	adds	r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	72fb      	strb	r3, [r7, #11]
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b07      	cmp	r3, #7
 8001298:	d98e      	bls.n	80011b8 <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 800129a:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012a6:	801a      	strh	r2, [r3, #0]
 80012a8:	e05d      	b.n	8001366 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80012aa:	4b36      	ldr	r3, [pc, #216]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2b65      	cmp	r3, #101	@ 0x65
 80012b2:	d80c      	bhi.n	80012ce <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 80012b4:	2260      	movs	r2, #96	@ 0x60
 80012b6:	2100      	movs	r1, #0
 80012b8:	4837      	ldr	r0, [pc, #220]	@ (8001398 <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 80012ba:	f00c fd47 	bl	800dd4c <memset>
        BUF_COUNTER++;
 80012be:	4b31      	ldr	r3, [pc, #196]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012ca:	801a      	strh	r2, [r3, #0]
 80012cc:	e04b      	b.n	8001366 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80012ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012e2:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 f9cb 	bl	8004684 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a2a      	ldr	r2, [pc, #168]	@ (800139c <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d117      	bne.n	8001328 <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10f      	bne.n	8001328 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d107      	bne.n	8001328 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001326:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a1a      	ldr	r2, [r3, #32]
 800132e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d107      	bne.n	8001358 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	771a      	strb	r2, [r3, #28]
 800136c:	e002      	b.n	8001374 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800136e:	bf00      	nop
 8001370:	e000      	b.n	8001374 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001372:	bf00      	nop
}
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200005e8 	.word	0x200005e8
 8001380:	20000558 	.word	0x20000558
 8001384:	200003f8 	.word	0x200003f8
 8001388:	2000020c 	.word	0x2000020c
 800138c:	20000208 	.word	0x20000208
 8001390:	20000209 	.word	0x20000209
 8001394:	20000338 	.word	0x20000338
 8001398:	20000398 	.word	0x20000398
 800139c:	40010000 	.word	0x40010000
 80013a0:	200003fa 	.word	0x200003fa

080013a4 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b0:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a53      	ldr	r2, [pc, #332]	@ (8001504 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	f040 809e 	bne.w	80014f8 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a52      	ldr	r2, [pc, #328]	@ (8001508 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f040 8099 	bne.w	80014f8 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80013c6:	4b51      	ldr	r3, [pc, #324]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8095 	beq.w	80014fc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80013d2:	4b4e      	ldr	r3, [pc, #312]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2b63      	cmp	r3, #99	@ 0x63
 80013da:	d87b      	bhi.n	80014d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	72fb      	strb	r3, [r7, #11]
 80013e0:	e06c      	b.n	80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013e2:	4b4a      	ldr	r3, [pc, #296]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	4a47      	ldr	r2, [pc, #284]	@ (8001510 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001404:	2b00      	cmp	r3, #0
 8001406:	dd04      	ble.n	8001412 <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001408:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	e003      	b.n	800141a <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	7afb      	ldrb	r3, [r7, #11]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001422:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001426:	4b39      	ldr	r3, [pc, #228]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	3301      	adds	r3, #1
 8001436:	4a36      	ldr	r2, [pc, #216]	@ (8001510 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144a:	2b00      	cmp	r3, #0
 800144c:	dd04      	ble.n	8001458 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 800144e:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4619      	mov	r1, r3
 8001456:	e003      	b.n	8001460 <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8001458:	4b2f      	ldr	r3, [pc, #188]	@ (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	7afb      	ldrb	r3, [r7, #11]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	3308      	adds	r3, #8
 8001466:	4a2d      	ldr	r2, [pc, #180]	@ (800151c <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800146c:	4b27      	ldr	r3, [pc, #156]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	3302      	adds	r3, #2
 800147c:	4a24      	ldr	r2, [pc, #144]	@ (8001510 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	7afb      	ldrb	r3, [r7, #11]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001490:	2b00      	cmp	r3, #0
 8001492:	dd04      	ble.n	800149e <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	e003      	b.n	80014a6 <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4619      	mov	r1, r3
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3310      	adds	r3, #16
 80014ac:	4a1b      	ldr	r2, [pc, #108]	@ (800151c <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80014ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	72fb      	strb	r3, [r7, #11]
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d98e      	bls.n	80013e2 <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	e014      	b.n	80014fe <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80014d4:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b65      	cmp	r3, #101	@ 0x65
 80014dc:	d80f      	bhi.n	80014fe <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80014de:	2260      	movs	r2, #96	@ 0x60
 80014e0:	2100      	movs	r1, #0
 80014e2:	480e      	ldr	r0, [pc, #56]	@ (800151c <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80014e4:	f00c fc32 	bl	800dd4c <memset>
        BUF_COUNTER++;
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	e002      	b.n	80014fe <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80014f8:	bf00      	nop
 80014fa:	e000      	b.n	80014fe <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80014fc:	bf00      	nop
    }
}
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200005e8 	.word	0x200005e8
 8001508:	20000558 	.word	0x20000558
 800150c:	200003f8 	.word	0x200003f8
 8001510:	2000020c 	.word	0x2000020c
 8001514:	20000208 	.word	0x20000208
 8001518:	20000209 	.word	0x20000209
 800151c:	20000338 	.word	0x20000338

08001520 <READ_FLASH>:
}

/*
 * Simple FLASH read
*/
uint8_t READ_FLASH(uint32_t address) {
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    return (*(__IO uint8_t*)address);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <WRITE_FLASH>:

/*
 * FLASH memory write func for 1 sector
*/
void WRITE_FLASH(uint32_t address, uint8_t data) {
 800153c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001540:	b090      	sub	sp, #64	@ 0x40
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	70fb      	strb	r3, [r7, #3]

    uint8_t OldData[20];
    for (uint32_t addr = 0x0807FFF0, i = 0; addr <= 0x0807FFFF; addr++, i++) {
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <WRITE_FLASH+0xe8>)
 800154c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800154e:	2300      	movs	r3, #0
 8001550:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001552:	e010      	b.n	8001576 <WRITE_FLASH+0x3a>
    	OldData[i] = READ_FLASH(addr);
 8001554:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001556:	f7ff ffe3 	bl	8001520 <READ_FLASH>
 800155a:	4603      	mov	r3, r0
 800155c:	4619      	mov	r1, r3
 800155e:	f107 021c 	add.w	r2, r7, #28
 8001562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001564:	4413      	add	r3, r2
 8001566:	460a      	mov	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
    for (uint32_t addr = 0x0807FFF0, i = 0; addr <= 0x0807FFFF; addr++, i++) {
 800156a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800156c:	3301      	adds	r3, #1
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001572:	3301      	adds	r3, #1
 8001574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001578:	4a2b      	ldr	r2, [pc, #172]	@ (8001628 <WRITE_FLASH+0xec>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d9ea      	bls.n	8001554 <WRITE_FLASH+0x18>
	}

	HAL_FLASH_Unlock();                                                             		// Unlock Flash
 800157e:	f003 fb6f 	bl	8004c60 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInitStruct;
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.Sector = FLASH_SECTOR_7;
 800158a:	2307      	movs	r3, #7
 800158c:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbSectors = 1;
 800158e:	2301      	movs	r3, #1
 8001590:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, 0) != HAL_OK) {
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fcd3 	bl	8004f44 <HAL_FLASHEx_Erase>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <WRITE_FLASH+0x6c>
    	//HAL_FLASH_Lock();
        Error_Handler();
 80015a4:	f001 fb06 	bl	8002bb4 <Error_Handler>
        //return;
    }

    for (uint32_t addr = 0x0807FFF0, i = 0; addr <= 0x0807FFFF; addr++, i++) {
 80015a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <WRITE_FLASH+0xe8>)
 80015aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80015b0:	e02c      	b.n	800160c <WRITE_FLASH+0xd0>
    	if (addr == address){
 80015b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d10e      	bne.n	80015d8 <WRITE_FLASH+0x9c>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data) != HAL_OK) {
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	2200      	movs	r2, #0
 80015be:	461c      	mov	r4, r3
 80015c0:	4615      	mov	r5, r2
 80015c2:	4622      	mov	r2, r4
 80015c4:	462b      	mov	r3, r5
 80015c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80015c8:	2002      	movs	r0, #2
 80015ca:	f003 faf5 	bl	8004bb8 <HAL_FLASH_Program>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <WRITE_FLASH+0x9c>
            	//HAL_FLASH_Lock();
                Error_Handler();
 80015d4:	f001 faee 	bl	8002bb4 <Error_Handler>
                //return;
            }
    	}
    	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, OldData[i]) != HAL_OK) {
 80015d8:	f107 021c 	add.w	r2, r7, #28
 80015dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	4698      	mov	r8, r3
 80015e8:	4691      	mov	r9, r2
 80015ea:	4642      	mov	r2, r8
 80015ec:	464b      	mov	r3, r9
 80015ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80015f0:	2002      	movs	r0, #2
 80015f2:	f003 fae1 	bl	8004bb8 <HAL_FLASH_Program>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <WRITE_FLASH+0xc4>
        	//HAL_FLASH_Lock();
            Error_Handler();
 80015fc:	f001 fada 	bl	8002bb4 <Error_Handler>
    for (uint32_t addr = 0x0807FFF0, i = 0; addr <= 0x0807FFFF; addr++, i++) {
 8001600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001602:	3301      	adds	r3, #1
 8001604:	637b      	str	r3, [r7, #52]	@ 0x34
 8001606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001608:	3301      	adds	r3, #1
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
 800160c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800160e:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <WRITE_FLASH+0xec>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d9ce      	bls.n	80015b2 <WRITE_FLASH+0x76>
            //return;
        }
	}
    HAL_FLASH_Lock();
 8001614:	f003 fb46 	bl	8004ca4 <HAL_FLASH_Lock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, data) != HAL_OK) {		// Write new value in FLASH cell
    	Error_Handler();
    }
    HAL_FLASH_Lock();																// Lock FLASH for sure
*/
}
 8001618:	bf00      	nop
 800161a:	3740      	adds	r7, #64	@ 0x40
 800161c:	46bd      	mov	sp, r7
 800161e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001622:	bf00      	nop
 8001624:	0807fff0 	.word	0x0807fff0
 8001628:	0807ffff 	.word	0x0807ffff

0800162c <ADC_SELECTOR>:

/*
 * Selecting input pin of MUX output for ADC processing
*/
void ADC_SELECTOR(uint8_t Channel){
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef cConfig = {0};
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
	cConfig.Channel = Channel;
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	60bb      	str	r3, [r7, #8]
	cConfig.Rank = 1;
 8001648:	2301      	movs	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
	cConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &cConfig) != HAL_OK)
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	@ (8001670 <ADC_SELECTOR+0x44>)
 8001658:	f002 fbce 	bl	8003df8 <HAL_ADC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <ADC_SELECTOR+0x3a>
	{
		Error_Handler();
 8001662:	f001 faa7 	bl	8002bb4 <Error_Handler>
	}
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200003fc 	.word	0x200003fc

08001674 <ADC_GET_VALUE>:

/*
 * Receiving ADC values
*/
uint32_t ADC_GET_VALUE(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001678:	4806      	ldr	r0, [pc, #24]	@ (8001694 <ADC_GET_VALUE+0x20>)
 800167a:	f002 fa71 	bl	8003b60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 800167e:	2101      	movs	r1, #1
 8001680:	4804      	ldr	r0, [pc, #16]	@ (8001694 <ADC_GET_VALUE+0x20>)
 8001682:	f002 fb21 	bl	8003cc8 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 8001686:	4803      	ldr	r0, [pc, #12]	@ (8001694 <ADC_GET_VALUE+0x20>)
 8001688:	f002 fba9 	bl	8003dde <HAL_ADC_GetValue>
 800168c:	4603      	mov	r3, r0
	HAL_ADC_Stop(&hadc1);
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200003fc 	.word	0x200003fc

08001698 <SELECT_MUX_CH>:

/*
 * Selecting 0-15 channel of MUX
*/
void SELECT_MUX_CH(uint8_t MUX_CH) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SELECT0_Pin, (GPIO_PinState)((MUX_CH >> 0) & 0x01));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016b0:	4815      	ldr	r0, [pc, #84]	@ (8001708 <SELECT_MUX_CH+0x70>)
 80016b2:	f003 ff05 	bl	80054c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SELECT1_Pin, (GPIO_PinState)((MUX_CH >> 1) & 0x01));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016c8:	480f      	ldr	r0, [pc, #60]	@ (8001708 <SELECT_MUX_CH+0x70>)
 80016ca:	f003 fef9 	bl	80054c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SELECT2_Pin, (GPIO_PinState)((MUX_CH >> 2) & 0x01));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <SELECT_MUX_CH+0x70>)
 80016e2:	f003 feed 	bl	80054c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SELECT3_Pin, (GPIO_PinState)((MUX_CH >> 3) & 0x01));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <SELECT_MUX_CH+0x70>)
 80016fa:	f003 fee1 	bl	80054c0 <HAL_GPIO_WritePin>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020400 	.word	0x40020400

0800170c <KEY_PRESS>:
 * 0-ID;
 * 1-MODIFIER;
 * 2-RESERVED;
 * 3-8KEYCODE[6]
*/
void KEY_PRESS(uint32_t ADC_Value, uint8_t Key_Identifier, uint8_t IsMod, uint8_t SwMod){
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	460b      	mov	r3, r1
 8001720:	70bb      	strb	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	707b      	strb	r3, [r7, #1]
		}

	}
	else{*/
		//if (ADC_Value <= 1200 || ADC_Value >= 4000) {									// If switch have different magnet polarity also led power changes less dependent
		if (ADC_Value >= 3500){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f640 52ab 	movw	r2, #3499	@ 0xdab
 800172c:	4293      	cmp	r3, r2
 800172e:	d921      	bls.n	8001774 <KEY_PRESS+0x68>
			keycodes[0] = 0x01;															// ID(1)
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <KEY_PRESS+0x74>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
			if(IsMod) {																	// If pressed modifier keys
 8001736:	78bb      	ldrb	r3, [r7, #2]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <KEY_PRESS+0x40>
				keycodes[1] ^= Key_Identifier;											// Accumulating Modifiers values in bits for first byte
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <KEY_PRESS+0x74>)
 800173e:	785a      	ldrb	r2, [r3, #1]
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	4053      	eors	r3, r2
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <KEY_PRESS+0x74>)
 8001748:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	//}
	//AdcPrev = ADC_Value;
}
 800174a:	e013      	b.n	8001774 <KEY_PRESS+0x68>
				for (uint8_t ByteCounter = 3; ByteCounter <= 9; ByteCounter++) {		// (MAX pressed keys == not enough)
 800174c:	2303      	movs	r3, #3
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e00d      	b.n	800176e <KEY_PRESS+0x62>
					if (keycodes[ByteCounter] == 0) {
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <KEY_PRESS+0x74>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <KEY_PRESS+0x5c>
						keycodes[ByteCounter] = Key_Identifier;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	4908      	ldr	r1, [pc, #32]	@ (8001780 <KEY_PRESS+0x74>)
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	54ca      	strb	r2, [r1, r3]
						break;
 8001764:	bf00      	nop
}
 8001766:	e005      	b.n	8001774 <KEY_PRESS+0x68>
				for (uint8_t ByteCounter = 3; ByteCounter <= 9; ByteCounter++) {		// (MAX pressed keys == not enough)
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	3301      	adds	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	2b09      	cmp	r3, #9
 8001772:	d9ee      	bls.n	8001752 <KEY_PRESS+0x46>
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	2000064c 	.word	0x2000064c

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178a:	f002 f90f 	bl	80039ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178e:	f000 ffa5 	bl	80026dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001792:	f001 f9ad 	bl	8002af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001796:	f001 f96d 	bl	8002a74 <MX_DMA_Init>
  MX_ADC1_Init();
 800179a:	f001 f807 	bl	80027ac <MX_ADC1_Init>
  MX_I2C1_Init();
 800179e:	f001 f847 	bl	8002830 <MX_I2C1_Init>
  MX_TIM1_Init();
 80017a2:	f001 f873 	bl	800288c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80017a6:	f00b fe83 	bl	800d4b0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80017aa:	f001 f90f 	bl	80029cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();														// OLED 128*32
 80017ae:	f001 fa6f 	bl	8002c90 <SSD1306_Init>
  ARGB_Init();															// SK6812
 80017b2:	f7ff f9e3 	bl	8000b7c <ARGB_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);						// Encoder mode start
 80017b6:	213c      	movs	r1, #60	@ 0x3c
 80017b8:	48a9      	ldr	r0, [pc, #676]	@ (8001a60 <main+0x2dc>)
 80017ba:	f007 ffb1 	bl	8009720 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
  //Menu_SetGenericWriteCallback(Generic_Write);
/*
* Starting Up Logo Astrolate
*/
  SSD1306_DrawBitmap(0, 0, StartLogo, 128, 32, SSD1306_COLOR_WHITE);	// Display logo
 80017be:	2301      	movs	r3, #1
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	2320      	movs	r3, #32
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	4aa6      	ldr	r2, [pc, #664]	@ (8001a64 <main+0x2e0>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 f9f7 	bl	8002bc0 <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();												// Show image
 80017d2:	f001 fb21 	bl	8002e18 <SSD1306_UpdateScreen>
  HAL_Delay(1000);														// Wait
 80017d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017da:	f002 f959 	bl	8003a90 <HAL_Delay>
  SSD1306_Fill(SSD1306_COLOR_BLACK);									// Clear for next info
 80017de:	2000      	movs	r0, #0
 80017e0:	f001 fb48 	bl	8002e74 <SSD1306_Fill>


  ARGB_Clear();															// Pre clearing of ARGB
 80017e4:	f7ff fa3e 	bl	8000c64 <ARGB_Clear>

/*
 * Read data from previous set-up
*/
  Red = READ_FLASH(0x0807FFF0);
 80017e8:	489f      	ldr	r0, [pc, #636]	@ (8001a68 <main+0x2e4>)
 80017ea:	f7ff fe99 	bl	8001520 <READ_FLASH>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b9e      	ldr	r3, [pc, #632]	@ (8001a6c <main+0x2e8>)
 80017f4:	701a      	strb	r2, [r3, #0]
  Green = READ_FLASH(0x0807FFF1);
 80017f6:	489e      	ldr	r0, [pc, #632]	@ (8001a70 <main+0x2ec>)
 80017f8:	f7ff fe92 	bl	8001520 <READ_FLASH>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b9c      	ldr	r3, [pc, #624]	@ (8001a74 <main+0x2f0>)
 8001802:	701a      	strb	r2, [r3, #0]
  Blue = READ_FLASH(0x0807FFF2);
 8001804:	489c      	ldr	r0, [pc, #624]	@ (8001a78 <main+0x2f4>)
 8001806:	f7ff fe8b 	bl	8001520 <READ_FLASH>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	4b9b      	ldr	r3, [pc, #620]	@ (8001a7c <main+0x2f8>)
 8001810:	701a      	strb	r2, [r3, #0]
  LedBrightness = READ_FLASH(0x0807FFF3);
 8001812:	489b      	ldr	r0, [pc, #620]	@ (8001a80 <main+0x2fc>)
 8001814:	f7ff fe84 	bl	8001520 <READ_FLASH>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b99      	ldr	r3, [pc, #612]	@ (8001a84 <main+0x300>)
 800181e:	701a      	strb	r2, [r3, #0]
  ArgbMode = READ_FLASH(0x0807FFF4);
 8001820:	4899      	ldr	r0, [pc, #612]	@ (8001a88 <main+0x304>)
 8001822:	f7ff fe7d 	bl	8001520 <READ_FLASH>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b98      	ldr	r3, [pc, #608]	@ (8001a8c <main+0x308>)
 800182c:	701a      	strb	r2, [r3, #0]
  SwitchMode = READ_FLASH(0x0807FFF5);
 800182e:	4898      	ldr	r0, [pc, #608]	@ (8001a90 <main+0x30c>)
 8001830:	f7ff fe76 	bl	8001520 <READ_FLASH>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b96      	ldr	r3, [pc, #600]	@ (8001a94 <main+0x310>)
 800183a:	701a      	strb	r2, [r3, #0]

  uint16_t PositionLast = (int16_t)__HAL_TIM_GET_COUNTER(&htim3) / 4;
 800183c:	4b88      	ldr	r3, [pc, #544]	@ (8001a60 <main+0x2dc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	b21b      	sxth	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	da00      	bge.n	800184a <main+0xc6>
 8001848:	3303      	adds	r3, #3
 800184a:	109b      	asrs	r3, r3, #2
 800184c:	b21b      	sxth	r3, r3
 800184e:	82fb      	strh	r3, [r7, #22]
  while (1)
  {
/*
* Encoder Handler Section
*/
	uint32_t Counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001850:	4b83      	ldr	r3, [pc, #524]	@ (8001a60 <main+0x2dc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	60bb      	str	r3, [r7, #8]
	uint16_t Position = (int16_t)Counter / 4;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	b21b      	sxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	da00      	bge.n	8001862 <main+0xde>
 8001860:	3303      	adds	r3, #3
 8001862:	109b      	asrs	r3, r3, #2
 8001864:	b21b      	sxth	r3, r3
 8001866:	80fb      	strh	r3, [r7, #6]
	if(Position == PositionLast){										// No change, (reset & screensaver)
 8001868:	88fa      	ldrh	r2, [r7, #6]
 800186a:	8afb      	ldrh	r3, [r7, #22]
 800186c:	429a      	cmp	r2, r3
 800186e:	d105      	bne.n	800187c <main+0xf8>
		EncRotRig = 0;
 8001870:	4b89      	ldr	r3, [pc, #548]	@ (8001a98 <main+0x314>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
		EncRotLft = 0;
 8001876:	4b89      	ldr	r3, [pc, #548]	@ (8001a9c <main+0x318>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
	}
	if(Position > PositionLast){										// Counter has increased, diff is positive
 800187c:	88fa      	ldrh	r2, [r7, #6]
 800187e:	8afb      	ldrh	r3, [r7, #22]
 8001880:	429a      	cmp	r2, r3
 8001882:	d902      	bls.n	800188a <main+0x106>
		EncRotRig = 1;
 8001884:	4b84      	ldr	r3, [pc, #528]	@ (8001a98 <main+0x314>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
	}
	if(PositionLast > Position){										// Counter has decreased, diff is negative
 800188a:	8afa      	ldrh	r2, [r7, #22]
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	429a      	cmp	r2, r3
 8001890:	d902      	bls.n	8001898 <main+0x114>
		EncRotLft = 1;
 8001892:	4b82      	ldr	r3, [pc, #520]	@ (8001a9c <main+0x318>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
	}
	// Exceptions for logic issue
	if (Position == 0 && PositionLast == 65535) {
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10a      	bne.n	80018b4 <main+0x130>
 800189e:	8afb      	ldrh	r3, [r7, #22]
 80018a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d105      	bne.n	80018b4 <main+0x130>
		EncRotRig = 1;
 80018a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001a98 <main+0x314>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
		EncRotLft = 0;
 80018ae:	4b7b      	ldr	r3, [pc, #492]	@ (8001a9c <main+0x318>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
	}
	if (PositionLast == 0 && Position == 65535) {
 80018b4:	8afb      	ldrh	r3, [r7, #22]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10a      	bne.n	80018d0 <main+0x14c>
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d105      	bne.n	80018d0 <main+0x14c>
		EncRotRig = 0;
 80018c4:	4b74      	ldr	r3, [pc, #464]	@ (8001a98 <main+0x314>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
		EncRotLft = 1;
 80018ca:	4b74      	ldr	r3, [pc, #464]	@ (8001a9c <main+0x318>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
	}
	PositionLast = Position;
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	82fb      	strh	r3, [r7, #22]
/*
* MUXs-ADC Section
*/
	for(uint8_t MUX = 0; MUX < 6; MUX++){																			// Selecting MUX
 80018d4:	2300      	movs	r3, #0
 80018d6:	757b      	strb	r3, [r7, #21]
 80018d8:	e156      	b.n	8001b88 <main+0x404>
	  switch(MUX){
 80018da:	7d7b      	ldrb	r3, [r7, #21]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	f200 8150 	bhi.w	8001b82 <main+0x3fe>
 80018e2:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <main+0x164>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	08001901 	.word	0x08001901
 80018ec:	08001937 	.word	0x08001937
 80018f0:	0800196f 	.word	0x0800196f
 80018f4:	080019a7 	.word	0x080019a7
 80018f8:	080019df 	.word	0x080019df
 80018fc:	08001a53 	.word	0x08001a53
		  case(0):																									// MUX_0
			  ADC_SELECTOR(5);
 8001900:	2005      	movs	r0, #5
 8001902:	f7ff fe93 	bl	800162c <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001906:	2300      	movs	r3, #0
 8001908:	753b      	strb	r3, [r7, #20]
 800190a:	e010      	b.n	800192e <main+0x1aa>
				  SELECT_MUX_CH(MuxChannel);
 800190c:	7d3b      	ldrb	r3, [r7, #20]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fec2 	bl	8001698 <SELECT_MUX_CH>
				  KEY_PRESS(ADC_GET_VALUE(), HEX_Map[MuxChannel], 0, SwitchMode);
 8001914:	f7ff feae 	bl	8001674 <ADC_GET_VALUE>
 8001918:	7d3b      	ldrb	r3, [r7, #20]
 800191a:	4a61      	ldr	r2, [pc, #388]	@ (8001aa0 <main+0x31c>)
 800191c:	5cd1      	ldrb	r1, [r2, r3]
 800191e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a94 <main+0x310>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	f7ff fef2 	bl	800170c <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001928:	7d3b      	ldrb	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	753b      	strb	r3, [r7, #20]
 800192e:	7d3b      	ldrb	r3, [r7, #20]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d9eb      	bls.n	800190c <main+0x188>
			  }
		  break;
 8001934:	e125      	b.n	8001b82 <main+0x3fe>
		  case(1):																									// MUX_1
			  ADC_SELECTOR(4);
 8001936:	2004      	movs	r0, #4
 8001938:	f7ff fe78 	bl	800162c <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 800193c:	2300      	movs	r3, #0
 800193e:	74fb      	strb	r3, [r7, #19]
 8001940:	e011      	b.n	8001966 <main+0x1e2>
				  SELECT_MUX_CH(MuxChannel);
 8001942:	7cfb      	ldrb	r3, [r7, #19]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fea7 	bl	8001698 <SELECT_MUX_CH>
				  KEY_PRESS(ADC_GET_VALUE(), HEX_Map[16 + MuxChannel], 0, SwitchMode);
 800194a:	f7ff fe93 	bl	8001674 <ADC_GET_VALUE>
 800194e:	7cfb      	ldrb	r3, [r7, #19]
 8001950:	3310      	adds	r3, #16
 8001952:	4a53      	ldr	r2, [pc, #332]	@ (8001aa0 <main+0x31c>)
 8001954:	5cd1      	ldrb	r1, [r2, r3]
 8001956:	4b4f      	ldr	r3, [pc, #316]	@ (8001a94 <main+0x310>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	f7ff fed6 	bl	800170c <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001960:	7cfb      	ldrb	r3, [r7, #19]
 8001962:	3301      	adds	r3, #1
 8001964:	74fb      	strb	r3, [r7, #19]
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d9ea      	bls.n	8001942 <main+0x1be>
			  }
		  break;
 800196c:	e109      	b.n	8001b82 <main+0x3fe>
		  case(2):																									// MUX_2
			  ADC_SELECTOR(3);
 800196e:	2003      	movs	r0, #3
 8001970:	f7ff fe5c 	bl	800162c <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001974:	2300      	movs	r3, #0
 8001976:	74bb      	strb	r3, [r7, #18]
 8001978:	e011      	b.n	800199e <main+0x21a>
				  SELECT_MUX_CH(MuxChannel);
 800197a:	7cbb      	ldrb	r3, [r7, #18]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe8b 	bl	8001698 <SELECT_MUX_CH>
				  KEY_PRESS(ADC_GET_VALUE(), HEX_Map[32 + MuxChannel], 0, SwitchMode);
 8001982:	f7ff fe77 	bl	8001674 <ADC_GET_VALUE>
 8001986:	7cbb      	ldrb	r3, [r7, #18]
 8001988:	3320      	adds	r3, #32
 800198a:	4a45      	ldr	r2, [pc, #276]	@ (8001aa0 <main+0x31c>)
 800198c:	5cd1      	ldrb	r1, [r2, r3]
 800198e:	4b41      	ldr	r3, [pc, #260]	@ (8001a94 <main+0x310>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	f7ff feba 	bl	800170c <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001998:	7cbb      	ldrb	r3, [r7, #18]
 800199a:	3301      	adds	r3, #1
 800199c:	74bb      	strb	r3, [r7, #18]
 800199e:	7cbb      	ldrb	r3, [r7, #18]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d9ea      	bls.n	800197a <main+0x1f6>
			  }
		  break;
 80019a4:	e0ed      	b.n	8001b82 <main+0x3fe>
		  case(3):																									// MUX_3
			  ADC_SELECTOR(2);
 80019a6:	2002      	movs	r0, #2
 80019a8:	f7ff fe40 	bl	800162c <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 80019ac:	2300      	movs	r3, #0
 80019ae:	747b      	strb	r3, [r7, #17]
 80019b0:	e011      	b.n	80019d6 <main+0x252>
				  SELECT_MUX_CH(MuxChannel);
 80019b2:	7c7b      	ldrb	r3, [r7, #17]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe6f 	bl	8001698 <SELECT_MUX_CH>
				  KEY_PRESS(ADC_GET_VALUE(), HEX_Map[48 + MuxChannel], 0, SwitchMode);
 80019ba:	f7ff fe5b 	bl	8001674 <ADC_GET_VALUE>
 80019be:	7c7b      	ldrb	r3, [r7, #17]
 80019c0:	3330      	adds	r3, #48	@ 0x30
 80019c2:	4a37      	ldr	r2, [pc, #220]	@ (8001aa0 <main+0x31c>)
 80019c4:	5cd1      	ldrb	r1, [r2, r3]
 80019c6:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <main+0x310>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f7ff fe9e 	bl	800170c <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 80019d0:	7c7b      	ldrb	r3, [r7, #17]
 80019d2:	3301      	adds	r3, #1
 80019d4:	747b      	strb	r3, [r7, #17]
 80019d6:	7c7b      	ldrb	r3, [r7, #17]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d9ea      	bls.n	80019b2 <main+0x22e>
			  }
		  break;
 80019dc:	e0d1      	b.n	8001b82 <main+0x3fe>
		  case(4):																									// MUX_4
			  ADC_SELECTOR(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fe24 	bl	800162c <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 80019e4:	2300      	movs	r3, #0
 80019e6:	743b      	strb	r3, [r7, #16]
 80019e8:	e02f      	b.n	8001a4a <main+0x2c6>
				  SELECT_MUX_CH(MuxChannel);
 80019ea:	7c3b      	ldrb	r3, [r7, #16]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fe53 	bl	8001698 <SELECT_MUX_CH>
				  if(MuxChannel == 0) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[64 + MuxChannel], 1, SwitchMode);			// Exception for Left Shift
 80019f2:	7c3b      	ldrb	r3, [r7, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10b      	bne.n	8001a10 <main+0x28c>
 80019f8:	f7ff fe3c 	bl	8001674 <ADC_GET_VALUE>
 80019fc:	7c3b      	ldrb	r3, [r7, #16]
 80019fe:	3340      	adds	r3, #64	@ 0x40
 8001a00:	4a27      	ldr	r2, [pc, #156]	@ (8001aa0 <main+0x31c>)
 8001a02:	5cd1      	ldrb	r1, [r2, r3]
 8001a04:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <main+0x310>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f7ff fe7f 	bl	800170c <KEY_PRESS>
 8001a0e:	e019      	b.n	8001a44 <main+0x2c0>
				  else if(MuxChannel == 11) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[64 + MuxChannel], 1, SwitchMode);	// Exception for Right Shift
 8001a10:	7c3b      	ldrb	r3, [r7, #16]
 8001a12:	2b0b      	cmp	r3, #11
 8001a14:	d10b      	bne.n	8001a2e <main+0x2aa>
 8001a16:	f7ff fe2d 	bl	8001674 <ADC_GET_VALUE>
 8001a1a:	7c3b      	ldrb	r3, [r7, #16]
 8001a1c:	3340      	adds	r3, #64	@ 0x40
 8001a1e:	4a20      	ldr	r2, [pc, #128]	@ (8001aa0 <main+0x31c>)
 8001a20:	5cd1      	ldrb	r1, [r2, r3]
 8001a22:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <main+0x310>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f7ff fe70 	bl	800170c <KEY_PRESS>
 8001a2c:	e00a      	b.n	8001a44 <main+0x2c0>
				  else KEY_PRESS(ADC_GET_VALUE(), HEX_Map[64 + MuxChannel], 0, SwitchMode);
 8001a2e:	f7ff fe21 	bl	8001674 <ADC_GET_VALUE>
 8001a32:	7c3b      	ldrb	r3, [r7, #16]
 8001a34:	3340      	adds	r3, #64	@ 0x40
 8001a36:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa0 <main+0x31c>)
 8001a38:	5cd1      	ldrb	r1, [r2, r3]
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <main+0x310>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f7ff fe64 	bl	800170c <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001a44:	7c3b      	ldrb	r3, [r7, #16]
 8001a46:	3301      	adds	r3, #1
 8001a48:	743b      	strb	r3, [r7, #16]
 8001a4a:	7c3b      	ldrb	r3, [r7, #16]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d9cc      	bls.n	80019ea <main+0x266>
			  }
		  break;
 8001a50:	e097      	b.n	8001b82 <main+0x3fe>
		  case(5):																									// MUX_5
			  ADC_SELECTOR(0);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fdea 	bl	800162c <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e08d      	b.n	8001b7a <main+0x3f6>
 8001a5e:	bf00      	nop
 8001a60:	200005a0 	.word	0x200005a0
 8001a64:	0800ee90 	.word	0x0800ee90
 8001a68:	0807fff0 	.word	0x0807fff0
 8001a6c:	20000664 	.word	0x20000664
 8001a70:	0807fff1 	.word	0x0807fff1
 8001a74:	20000665 	.word	0x20000665
 8001a78:	0807fff2 	.word	0x0807fff2
 8001a7c:	20000666 	.word	0x20000666
 8001a80:	0807fff3 	.word	0x0807fff3
 8001a84:	20000667 	.word	0x20000667
 8001a88:	0807fff4 	.word	0x0807fff4
 8001a8c:	20000668 	.word	0x20000668
 8001a90:	0807fff5 	.word	0x0807fff5
 8001a94:	20000669 	.word	0x20000669
 8001a98:	20000648 	.word	0x20000648
 8001a9c:	20000649 	.word	0x20000649
 8001aa0:	0800f090 	.word	0x0800f090
				  SELECT_MUX_CH(MuxChannel);
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fdf6 	bl	8001698 <SELECT_MUX_CH>
				  if(MuxChannel == 0) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);			// Exception for Left Ctrl
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10b      	bne.n	8001aca <main+0x346>
 8001ab2:	f7ff fddf 	bl	8001674 <ADC_GET_VALUE>
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	3350      	adds	r3, #80	@ 0x50
 8001aba:	4aa4      	ldr	r2, [pc, #656]	@ (8001d4c <main+0x5c8>)
 8001abc:	5cd1      	ldrb	r1, [r2, r3]
 8001abe:	4ba4      	ldr	r3, [pc, #656]	@ (8001d50 <main+0x5cc>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f7ff fe22 	bl	800170c <KEY_PRESS>
 8001ac8:	e054      	b.n	8001b74 <main+0x3f0>
				  else if(MuxChannel == 1) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);		// Exception for Left Win
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d10b      	bne.n	8001ae8 <main+0x364>
 8001ad0:	f7ff fdd0 	bl	8001674 <ADC_GET_VALUE>
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	3350      	adds	r3, #80	@ 0x50
 8001ad8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d4c <main+0x5c8>)
 8001ada:	5cd1      	ldrb	r1, [r2, r3]
 8001adc:	4b9c      	ldr	r3, [pc, #624]	@ (8001d50 <main+0x5cc>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f7ff fe13 	bl	800170c <KEY_PRESS>
 8001ae6:	e045      	b.n	8001b74 <main+0x3f0>
				  else if(MuxChannel == 2) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);		// Exception for Left Alt
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d10b      	bne.n	8001b06 <main+0x382>
 8001aee:	f7ff fdc1 	bl	8001674 <ADC_GET_VALUE>
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	3350      	adds	r3, #80	@ 0x50
 8001af6:	4a95      	ldr	r2, [pc, #596]	@ (8001d4c <main+0x5c8>)
 8001af8:	5cd1      	ldrb	r1, [r2, r3]
 8001afa:	4b95      	ldr	r3, [pc, #596]	@ (8001d50 <main+0x5cc>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f7ff fe04 	bl	800170c <KEY_PRESS>
 8001b04:	e036      	b.n	8001b74 <main+0x3f0>
				  else if(MuxChannel == 4) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);		// Exception for Right Alt
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d10b      	bne.n	8001b24 <main+0x3a0>
 8001b0c:	f7ff fdb2 	bl	8001674 <ADC_GET_VALUE>
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	3350      	adds	r3, #80	@ 0x50
 8001b14:	4a8d      	ldr	r2, [pc, #564]	@ (8001d4c <main+0x5c8>)
 8001b16:	5cd1      	ldrb	r1, [r2, r3]
 8001b18:	4b8d      	ldr	r3, [pc, #564]	@ (8001d50 <main+0x5cc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f7ff fdf5 	bl	800170c <KEY_PRESS>
 8001b22:	e027      	b.n	8001b74 <main+0x3f0>
				  else if(MuxChannel == 5){
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d10a      	bne.n	8001b40 <main+0x3bc>
					  if(ADC_GET_VALUE() >= 3500) FnBtnState = 1;													// Fn key press
 8001b2a:	f7ff fda3 	bl	8001674 <ADC_GET_VALUE>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d91d      	bls.n	8001b74 <main+0x3f0>
 8001b38:	4b86      	ldr	r3, [pc, #536]	@ (8001d54 <main+0x5d0>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e019      	b.n	8001b74 <main+0x3f0>
					  /*SSD1306_GotoXY(0, 10);
					  sprintf(DisplayText, "%d", ADC_GET_VALUE());													// temporary info
					  SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);*/
				  }
				  else if(MuxChannel == 6) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);		// Exception for Right Ctrl
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d10b      	bne.n	8001b5e <main+0x3da>
 8001b46:	f7ff fd95 	bl	8001674 <ADC_GET_VALUE>
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	3350      	adds	r3, #80	@ 0x50
 8001b4e:	4a7f      	ldr	r2, [pc, #508]	@ (8001d4c <main+0x5c8>)
 8001b50:	5cd1      	ldrb	r1, [r2, r3]
 8001b52:	4b7f      	ldr	r3, [pc, #508]	@ (8001d50 <main+0x5cc>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f7ff fdd8 	bl	800170c <KEY_PRESS>
 8001b5c:	e00a      	b.n	8001b74 <main+0x3f0>
				  else KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 0, SwitchMode);
 8001b5e:	f7ff fd89 	bl	8001674 <ADC_GET_VALUE>
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	3350      	adds	r3, #80	@ 0x50
 8001b66:	4a79      	ldr	r2, [pc, #484]	@ (8001d4c <main+0x5c8>)
 8001b68:	5cd1      	ldrb	r1, [r2, r3]
 8001b6a:	4b79      	ldr	r3, [pc, #484]	@ (8001d50 <main+0x5cc>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f7ff fdcc 	bl	800170c <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	3301      	adds	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d991      	bls.n	8001aa4 <main+0x320>
			  }
		  break;
 8001b80:	bf00      	nop
	for(uint8_t MUX = 0; MUX < 6; MUX++){																			// Selecting MUX
 8001b82:	7d7b      	ldrb	r3, [r7, #21]
 8001b84:	3301      	adds	r3, #1
 8001b86:	757b      	strb	r3, [r7, #21]
 8001b88:	7d7b      	ldrb	r3, [r7, #21]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	f67f aea5 	bls.w	80018da <main+0x156>
	  }
	}
/*
 * Send Key Report
*/
	USBD_HID_SendReport(&hUsbDeviceFS, &keycodes, 9);							// Send keys report
 8001b90:	2209      	movs	r2, #9
 8001b92:	4971      	ldr	r1, [pc, #452]	@ (8001d58 <main+0x5d4>)
 8001b94:	4871      	ldr	r0, [pc, #452]	@ (8001d5c <main+0x5d8>)
 8001b96:	f00a f95f 	bl	800be58 <USBD_HID_SendReport>
	//if (SwitchMode == 1) {
		for (uint8_t ByteCounter = 1; ByteCounter <= 9; ByteCounter++) {
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73bb      	strb	r3, [r7, #14]
 8001b9e:	e00b      	b.n	8001bb8 <main+0x434>
			if (keycodes[ByteCounter] != 0){
 8001ba0:	7bbb      	ldrb	r3, [r7, #14]
 8001ba2:	4a6d      	ldr	r2, [pc, #436]	@ (8001d58 <main+0x5d4>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <main+0x42e>
				keycodes[ByteCounter] = 0x00;										// Clear every byte
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	4a6a      	ldr	r2, [pc, #424]	@ (8001d58 <main+0x5d4>)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	54d1      	strb	r1, [r2, r3]
		for (uint8_t ByteCounter = 1; ByteCounter <= 9; ByteCounter++) {
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	73bb      	strb	r3, [r7, #14]
 8001bb8:	7bbb      	ldrb	r3, [r7, #14]
 8001bba:	2b09      	cmp	r3, #9
 8001bbc:	d9f0      	bls.n	8001ba0 <main+0x41c>
	//else if(SwitchMode == 0){}

/*
 * Main Menu
*/
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && MenuOpenFlag == 0){
 8001bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc2:	4867      	ldr	r0, [pc, #412]	@ (8001d60 <main+0x5dc>)
 8001bc4:	f003 fc64 	bl	8005490 <HAL_GPIO_ReadPin>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <main+0x46a>
 8001bce:	4b65      	ldr	r3, [pc, #404]	@ (8001d64 <main+0x5e0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10b      	bne.n	8001bee <main+0x46a>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8001bd6:	bf00      	nop
 8001bd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bdc:	4860      	ldr	r0, [pc, #384]	@ (8001d60 <main+0x5dc>)
 8001bde:	f003 fc57 	bl	8005490 <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f7      	beq.n	8001bd8 <main+0x454>
		MenuOpenFlag = 1;
 8001be8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <main+0x5e0>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
	}
	if(MenuOpenFlag){
 8001bee:	4b5d      	ldr	r3, [pc, #372]	@ (8001d64 <main+0x5e0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 848f 	beq.w	8002516 <main+0xd92>
		SSD1306_GotoXY(0, 0);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f001 f9b2 	bl	8002f64 <SSD1306_GotoXY>
		SSD1306_Puts("SETTINGS:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c00:	2201      	movs	r2, #1
 8001c02:	4959      	ldr	r1, [pc, #356]	@ (8001d68 <main+0x5e4>)
 8001c04:	4859      	ldr	r0, [pc, #356]	@ (8001d6c <main+0x5e8>)
 8001c06:	f001 fa41 	bl	800308c <SSD1306_Puts>

		SSD1306_GotoXY(90, 0);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	205a      	movs	r0, #90	@ 0x5a
 8001c0e:	f001 f9a9 	bl	8002f64 <SSD1306_GotoXY>
		SSD1306_Puts("EXIT", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c12:	2201      	movs	r2, #1
 8001c14:	4954      	ldr	r1, [pc, #336]	@ (8001d68 <main+0x5e4>)
 8001c16:	4856      	ldr	r0, [pc, #344]	@ (8001d70 <main+0x5ec>)
 8001c18:	f001 fa38 	bl	800308c <SSD1306_Puts>
		//---------------------
		SSD1306_GotoXY(0, 10);
 8001c1c:	210a      	movs	r1, #10
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f001 f9a0 	bl	8002f64 <SSD1306_GotoXY>
		SSD1306_Puts("ARGB:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c24:	2201      	movs	r2, #1
 8001c26:	4950      	ldr	r1, [pc, #320]	@ (8001d68 <main+0x5e4>)
 8001c28:	4852      	ldr	r0, [pc, #328]	@ (8001d74 <main+0x5f0>)
 8001c2a:	f001 fa2f 	bl	800308c <SSD1306_Puts>

		SSD1306_GotoXY(45, 10);
 8001c2e:	210a      	movs	r1, #10
 8001c30:	202d      	movs	r0, #45	@ 0x2d
 8001c32:	f001 f997 	bl	8002f64 <SSD1306_GotoXY>
		SSD1306_Puts("Solid", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c36:	2201      	movs	r2, #1
 8001c38:	494b      	ldr	r1, [pc, #300]	@ (8001d68 <main+0x5e4>)
 8001c3a:	484f      	ldr	r0, [pc, #316]	@ (8001d78 <main+0x5f4>)
 8001c3c:	f001 fa26 	bl	800308c <SSD1306_Puts>
		SSD1306_GotoXY(90, 10);
 8001c40:	210a      	movs	r1, #10
 8001c42:	205a      	movs	r0, #90	@ 0x5a
 8001c44:	f001 f98e 	bl	8002f64 <SSD1306_GotoXY>
		SSD1306_Puts("Efct", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4947      	ldr	r1, [pc, #284]	@ (8001d68 <main+0x5e4>)
 8001c4c:	484b      	ldr	r0, [pc, #300]	@ (8001d7c <main+0x5f8>)
 8001c4e:	f001 fa1d 	bl	800308c <SSD1306_Puts>
		//---------------------
		SSD1306_GotoXY(0, 20);
 8001c52:	2114      	movs	r1, #20
 8001c54:	2000      	movs	r0, #0
 8001c56:	f001 f985 	bl	8002f64 <SSD1306_GotoXY>
		SSD1306_Puts("Btns:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4942      	ldr	r1, [pc, #264]	@ (8001d68 <main+0x5e4>)
 8001c5e:	4848      	ldr	r0, [pc, #288]	@ (8001d80 <main+0x5fc>)
 8001c60:	f001 fa14 	bl	800308c <SSD1306_Puts>

		SSD1306_GotoXY(45, 20);
 8001c64:	2114      	movs	r1, #20
 8001c66:	202d      	movs	r0, #45	@ 0x2d
 8001c68:	f001 f97c 	bl	8002f64 <SSD1306_GotoXY>
		SSD1306_Puts("Norm", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	493e      	ldr	r1, [pc, #248]	@ (8001d68 <main+0x5e4>)
 8001c70:	4844      	ldr	r0, [pc, #272]	@ (8001d84 <main+0x600>)
 8001c72:	f001 fa0b 	bl	800308c <SSD1306_Puts>

		SSD1306_GotoXY(90, 20);
 8001c76:	2114      	movs	r1, #20
 8001c78:	205a      	movs	r0, #90	@ 0x5a
 8001c7a:	f001 f973 	bl	8002f64 <SSD1306_GotoXY>
		SSD1306_Puts("Rapid", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4939      	ldr	r1, [pc, #228]	@ (8001d68 <main+0x5e4>)
 8001c82:	4841      	ldr	r0, [pc, #260]	@ (8001d88 <main+0x604>)
 8001c84:	f001 fa02 	bl	800308c <SSD1306_Puts>
		//---------------------
		SSD1306_DrawLine(0, 9, 128, 9, SSD1306_COLOR_WHITE);
 8001c88:	2301      	movs	r3, #1
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2309      	movs	r3, #9
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	2109      	movs	r1, #9
 8001c92:	2000      	movs	r0, #0
 8001c94:	f001 fa1f 	bl	80030d6 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 19, 128, 19, SSD1306_COLOR_WHITE);
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2313      	movs	r3, #19
 8001c9e:	2280      	movs	r2, #128	@ 0x80
 8001ca0:	2113      	movs	r1, #19
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f001 fa17 	bl	80030d6 <SSD1306_DrawLine>
		SSD1306_DrawLine(85, 0, 85, 32, SSD1306_COLOR_WHITE);
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2320      	movs	r3, #32
 8001cae:	2255      	movs	r2, #85	@ 0x55
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2055      	movs	r0, #85	@ 0x55
 8001cb4:	f001 fa0f 	bl	80030d6 <SSD1306_DrawLine>
		SSD1306_DrawLine(40, 9, 40, 32, SSD1306_COLOR_WHITE);
 8001cb8:	2301      	movs	r3, #1
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	2228      	movs	r2, #40	@ 0x28
 8001cc0:	2109      	movs	r1, #9
 8001cc2:	2028      	movs	r0, #40	@ 0x28
 8001cc4:	f001 fa07 	bl	80030d6 <SSD1306_DrawLine>

		if(!MenuDeniedFlag){
 8001cc8:	4b30      	ldr	r3, [pc, #192]	@ (8001d8c <main+0x608>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d129      	bne.n	8001d24 <main+0x5a0>
			if(EncRotRig == 1)MenuEncCounter++;
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <main+0x60c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d108      	bne.n	8001cea <main+0x566>
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d94 <main+0x610>)
 8001cda:	f993 3000 	ldrsb.w	r3, [r3]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	b25a      	sxtb	r2, r3
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <main+0x610>)
 8001ce8:	701a      	strb	r2, [r3, #0]
			if(EncRotLft == 1)MenuEncCounter--;
 8001cea:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <main+0x614>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d108      	bne.n	8001d04 <main+0x580>
 8001cf2:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <main+0x610>)
 8001cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	b25a      	sxtb	r2, r3
 8001d00:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <main+0x610>)
 8001d02:	701a      	strb	r2, [r3, #0]
			if(MenuEncCounter > 4)MenuEncCounter = 0;
 8001d04:	4b23      	ldr	r3, [pc, #140]	@ (8001d94 <main+0x610>)
 8001d06:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	dd02      	ble.n	8001d14 <main+0x590>
 8001d0e:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <main+0x610>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
			if(MenuEncCounter < 0)MenuEncCounter = 4;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <main+0x610>)
 8001d16:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da02      	bge.n	8001d24 <main+0x5a0>
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <main+0x610>)
 8001d20:	2204      	movs	r2, #4
 8001d22:	701a      	strb	r2, [r3, #0]
		}
		switch(MenuEncCounter){
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <main+0x610>)
 8001d26:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	f200 8491 	bhi.w	8002652 <main+0xece>
 8001d30:	a201      	add	r2, pc, #4	@ (adr r2, 8001d38 <main+0x5b4>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d9d 	.word	0x08001d9d
 8001d3c:	08001df5 	.word	0x08001df5
 8001d40:	08002439 	.word	0x08002439
 8001d44:	08002483 	.word	0x08002483
 8001d48:	080024cd 	.word	0x080024cd
 8001d4c:	0800f090 	.word	0x0800f090
 8001d50:	20000669 	.word	0x20000669
 8001d54:	2000064a 	.word	0x2000064a
 8001d58:	2000064c 	.word	0x2000064c
 8001d5c:	200008a8 	.word	0x200008a8
 8001d60:	40020000 	.word	0x40020000
 8001d64:	2000066a 	.word	0x2000066a
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	0800e664 	.word	0x0800e664
 8001d70:	0800e670 	.word	0x0800e670
 8001d74:	0800e678 	.word	0x0800e678
 8001d78:	0800e680 	.word	0x0800e680
 8001d7c:	0800e688 	.word	0x0800e688
 8001d80:	0800e690 	.word	0x0800e690
 8001d84:	0800e698 	.word	0x0800e698
 8001d88:	0800e6a0 	.word	0x0800e6a0
 8001d8c:	2000066b 	.word	0x2000066b
 8001d90:	20000648 	.word	0x20000648
 8001d94:	20000672 	.word	0x20000672
 8001d98:	20000649 	.word	0x20000649
		  case(0):
			SSD1306_GotoXY(90, 0);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	205a      	movs	r0, #90	@ 0x5a
 8001da0:	f001 f8e0 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("EXIT", &Font_7x10, SSD1306_COLOR_BLACK);
 8001da4:	2200      	movs	r2, #0
 8001da6:	4990      	ldr	r1, [pc, #576]	@ (8001fe8 <main+0x864>)
 8001da8:	4890      	ldr	r0, [pc, #576]	@ (8001fec <main+0x868>)
 8001daa:	f001 f96f 	bl	800308c <SSD1306_Puts>

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && MenuOpenFlag == 1){
 8001dae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001db2:	488f      	ldr	r0, [pc, #572]	@ (8001ff0 <main+0x86c>)
 8001db4:	f003 fb6c 	bl	8005490 <HAL_GPIO_ReadPin>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8440 	bne.w	8002640 <main+0xebc>
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <main+0x870>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f040 843b 	bne.w	8002640 <main+0xebc>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8001dca:	bf00      	nop
 8001dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd0:	4887      	ldr	r0, [pc, #540]	@ (8001ff0 <main+0x86c>)
 8001dd2:	f003 fb5d 	bl	8005490 <HAL_GPIO_ReadPin>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f7      	beq.n	8001dcc <main+0x648>
				MenuOpenFlag = !MenuOpenFlag;
 8001ddc:	4b85      	ldr	r3, [pc, #532]	@ (8001ff4 <main+0x870>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b81      	ldr	r3, [pc, #516]	@ (8001ff4 <main+0x870>)
 8001dee:	701a      	strb	r2, [r3, #0]
			}
		  break;
 8001df0:	f000 bc26 	b.w	8002640 <main+0xebc>
		  case(1):
			SSD1306_GotoXY(45, 10);
 8001df4:	210a      	movs	r1, #10
 8001df6:	202d      	movs	r0, #45	@ 0x2d
 8001df8:	f001 f8b4 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("Solid", &Font_7x10, SSD1306_COLOR_BLACK);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	497a      	ldr	r1, [pc, #488]	@ (8001fe8 <main+0x864>)
 8001e00:	487d      	ldr	r0, [pc, #500]	@ (8001ff8 <main+0x874>)
 8001e02:	f001 f943 	bl	800308c <SSD1306_Puts>

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && SubMenu == 0){
 8001e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e0a:	4879      	ldr	r0, [pc, #484]	@ (8001ff0 <main+0x86c>)
 8001e0c:	f003 fb40 	bl	8005490 <HAL_GPIO_ReadPin>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <main+0x6b2>
 8001e16:	4b79      	ldr	r3, [pc, #484]	@ (8001ffc <main+0x878>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10b      	bne.n	8001e36 <main+0x6b2>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8001e1e:	bf00      	nop
 8001e20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e24:	4872      	ldr	r0, [pc, #456]	@ (8001ff0 <main+0x86c>)
 8001e26:	f003 fb33 	bl	8005490 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f7      	beq.n	8001e20 <main+0x69c>
				SubMenu = 1;
 8001e30:	4b72      	ldr	r3, [pc, #456]	@ (8001ffc <main+0x878>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
			}
			if(SubMenu){
 8001e36:	4b71      	ldr	r3, [pc, #452]	@ (8001ffc <main+0x878>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8402 	beq.w	8002644 <main+0xec0>
				MenuDeniedFlag = 1;
 8001e40:	4b6f      	ldr	r3, [pc, #444]	@ (8002000 <main+0x87c>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
				SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f001 f814 	bl	8002e74 <SSD1306_Fill>

			    SSD1306_GotoXY(8, 0);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2008      	movs	r0, #8
 8001e50:	f001 f888 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts("R", &Font_7x10, SSD1306_COLOR_WHITE);
 8001e54:	2201      	movs	r2, #1
 8001e56:	4964      	ldr	r1, [pc, #400]	@ (8001fe8 <main+0x864>)
 8001e58:	486a      	ldr	r0, [pc, #424]	@ (8002004 <main+0x880>)
 8001e5a:	f001 f917 	bl	800308c <SSD1306_Puts>
				sprintf(DisplayText, "%d", Red);
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002008 <main+0x884>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4969      	ldr	r1, [pc, #420]	@ (800200c <main+0x888>)
 8001e66:	486a      	ldr	r0, [pc, #424]	@ (8002010 <main+0x88c>)
 8001e68:	f00b ff50 	bl	800dd0c <siprintf>
				SSD1306_GotoXY(0, 10);
 8001e6c:	210a      	movs	r1, #10
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f001 f878 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);
 8001e74:	2201      	movs	r2, #1
 8001e76:	495c      	ldr	r1, [pc, #368]	@ (8001fe8 <main+0x864>)
 8001e78:	4865      	ldr	r0, [pc, #404]	@ (8002010 <main+0x88c>)
 8001e7a:	f001 f907 	bl	800308c <SSD1306_Puts>

				SSD1306_GotoXY(32, 0);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2020      	movs	r0, #32
 8001e82:	f001 f86f 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts("G", &Font_7x10, SSD1306_COLOR_WHITE);
 8001e86:	2201      	movs	r2, #1
 8001e88:	4957      	ldr	r1, [pc, #348]	@ (8001fe8 <main+0x864>)
 8001e8a:	4862      	ldr	r0, [pc, #392]	@ (8002014 <main+0x890>)
 8001e8c:	f001 f8fe 	bl	800308c <SSD1306_Puts>
				sprintf(DisplayText, "%d", Green);
 8001e90:	4b61      	ldr	r3, [pc, #388]	@ (8002018 <main+0x894>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	495d      	ldr	r1, [pc, #372]	@ (800200c <main+0x888>)
 8001e98:	485d      	ldr	r0, [pc, #372]	@ (8002010 <main+0x88c>)
 8001e9a:	f00b ff37 	bl	800dd0c <siprintf>
				SSD1306_GotoXY(25, 10);
 8001e9e:	210a      	movs	r1, #10
 8001ea0:	2019      	movs	r0, #25
 8001ea2:	f001 f85f 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	494f      	ldr	r1, [pc, #316]	@ (8001fe8 <main+0x864>)
 8001eaa:	4859      	ldr	r0, [pc, #356]	@ (8002010 <main+0x88c>)
 8001eac:	f001 f8ee 	bl	800308c <SSD1306_Puts>

				SSD1306_GotoXY(64, 0);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2040      	movs	r0, #64	@ 0x40
 8001eb4:	f001 f856 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts("B", &Font_7x10, SSD1306_COLOR_WHITE);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	494b      	ldr	r1, [pc, #300]	@ (8001fe8 <main+0x864>)
 8001ebc:	4857      	ldr	r0, [pc, #348]	@ (800201c <main+0x898>)
 8001ebe:	f001 f8e5 	bl	800308c <SSD1306_Puts>
				sprintf(DisplayText, "%d", Blue);
 8001ec2:	4b57      	ldr	r3, [pc, #348]	@ (8002020 <main+0x89c>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4950      	ldr	r1, [pc, #320]	@ (800200c <main+0x888>)
 8001eca:	4851      	ldr	r0, [pc, #324]	@ (8002010 <main+0x88c>)
 8001ecc:	f00b ff1e 	bl	800dd0c <siprintf>
				SSD1306_GotoXY(56, 10);
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	2038      	movs	r0, #56	@ 0x38
 8001ed4:	f001 f846 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4943      	ldr	r1, [pc, #268]	@ (8001fe8 <main+0x864>)
 8001edc:	484c      	ldr	r0, [pc, #304]	@ (8002010 <main+0x88c>)
 8001ede:	f001 f8d5 	bl	800308c <SSD1306_Puts>

				SSD1306_GotoXY(96, 0);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2060      	movs	r0, #96	@ 0x60
 8001ee6:	f001 f83d 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts("BR", &Font_7x10, SSD1306_COLOR_WHITE);
 8001eea:	2201      	movs	r2, #1
 8001eec:	493e      	ldr	r1, [pc, #248]	@ (8001fe8 <main+0x864>)
 8001eee:	484d      	ldr	r0, [pc, #308]	@ (8002024 <main+0x8a0>)
 8001ef0:	f001 f8cc 	bl	800308c <SSD1306_Puts>
				sprintf(DisplayText, "%d", LedBrightness);
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8002028 <main+0x8a4>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4944      	ldr	r1, [pc, #272]	@ (800200c <main+0x888>)
 8001efc:	4844      	ldr	r0, [pc, #272]	@ (8002010 <main+0x88c>)
 8001efe:	f00b ff05 	bl	800dd0c <siprintf>
				SSD1306_GotoXY(92, 10);
 8001f02:	210a      	movs	r1, #10
 8001f04:	205c      	movs	r0, #92	@ 0x5c
 8001f06:	f001 f82d 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4936      	ldr	r1, [pc, #216]	@ (8001fe8 <main+0x864>)
 8001f0e:	4840      	ldr	r0, [pc, #256]	@ (8002010 <main+0x88c>)
 8001f10:	f001 f8bc 	bl	800308c <SSD1306_Puts>

				SSD1306_GotoXY(90, 20);
 8001f14:	2114      	movs	r1, #20
 8001f16:	205a      	movs	r0, #90	@ 0x5a
 8001f18:	f001 f824 	bl	8002f64 <SSD1306_GotoXY>
				SSD1306_Puts("BACK", &Font_7x10, SSD1306_COLOR_WHITE);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4932      	ldr	r1, [pc, #200]	@ (8001fe8 <main+0x864>)
 8001f20:	4842      	ldr	r0, [pc, #264]	@ (800202c <main+0x8a8>)
 8001f22:	f001 f8b3 	bl	800308c <SSD1306_Puts>
				//---------------------
				SSD1306_DrawLine(0, 9, 128, 9, SSD1306_COLOR_WHITE);
 8001f26:	2301      	movs	r3, #1
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2309      	movs	r3, #9
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	2109      	movs	r1, #9
 8001f30:	2000      	movs	r0, #0
 8001f32:	f001 f8d0 	bl	80030d6 <SSD1306_DrawLine>
				SSD1306_DrawLine(22, 0, 22, 20, SSD1306_COLOR_WHITE);
 8001f36:	2301      	movs	r3, #1
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2314      	movs	r3, #20
 8001f3c:	2216      	movs	r2, #22
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2016      	movs	r0, #22
 8001f42:	f001 f8c8 	bl	80030d6 <SSD1306_DrawLine>
				SSD1306_DrawLine(50, 0, 50, 20, SSD1306_COLOR_WHITE);
 8001f46:	2301      	movs	r3, #1
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2314      	movs	r3, #20
 8001f4c:	2232      	movs	r2, #50	@ 0x32
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2032      	movs	r0, #50	@ 0x32
 8001f52:	f001 f8c0 	bl	80030d6 <SSD1306_DrawLine>
				SSD1306_DrawLine(85, 0, 85, 20, SSD1306_COLOR_WHITE);
 8001f56:	2301      	movs	r3, #1
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2314      	movs	r3, #20
 8001f5c:	2255      	movs	r2, #85	@ 0x55
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2055      	movs	r0, #85	@ 0x55
 8001f62:	f001 f8b8 	bl	80030d6 <SSD1306_DrawLine>

				if(!SubMenuDeniedFlag){
 8001f66:	4b32      	ldr	r3, [pc, #200]	@ (8002030 <main+0x8ac>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d129      	bne.n	8001fc2 <main+0x83e>
					if(EncRotRig == 1)SubMenuEncCounter++;
 8001f6e:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <main+0x8b0>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <main+0x804>
 8001f76:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <main+0x8b4>)
 8001f78:	f993 3000 	ldrsb.w	r3, [r3]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	b25a      	sxtb	r2, r3
 8001f84:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <main+0x8b4>)
 8001f86:	701a      	strb	r2, [r3, #0]
					if(EncRotLft == 1)SubMenuEncCounter--;
 8001f88:	4b2c      	ldr	r3, [pc, #176]	@ (800203c <main+0x8b8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d108      	bne.n	8001fa2 <main+0x81e>
 8001f90:	4b29      	ldr	r3, [pc, #164]	@ (8002038 <main+0x8b4>)
 8001f92:	f993 3000 	ldrsb.w	r3, [r3]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	b25a      	sxtb	r2, r3
 8001f9e:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <main+0x8b4>)
 8001fa0:	701a      	strb	r2, [r3, #0]
					if(SubMenuEncCounter > 4)SubMenuEncCounter = 0;
 8001fa2:	4b25      	ldr	r3, [pc, #148]	@ (8002038 <main+0x8b4>)
 8001fa4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	dd02      	ble.n	8001fb2 <main+0x82e>
 8001fac:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <main+0x8b4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
					if(SubMenuEncCounter < 0)SubMenuEncCounter = 4;
 8001fb2:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <main+0x8b4>)
 8001fb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da02      	bge.n	8001fc2 <main+0x83e>
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <main+0x8b4>)
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	701a      	strb	r2, [r3, #0]
				}
				switch(SubMenuEncCounter){
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <main+0x8b4>)
 8001fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	f200 833b 	bhi.w	8002644 <main+0xec0>
 8001fce:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd4 <main+0x850>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	08002041 	.word	0x08002041
 8001fd8:	08002111 	.word	0x08002111
 8001fdc:	080021e1 	.word	0x080021e1
 8001fe0:	080022f1 	.word	0x080022f1
 8001fe4:	080023bb 	.word	0x080023bb
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	0800e670 	.word	0x0800e670
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	2000066a 	.word	0x2000066a
 8001ff8:	0800e680 	.word	0x0800e680
 8001ffc:	20000670 	.word	0x20000670
 8002000:	2000066b 	.word	0x2000066b
 8002004:	0800e6a8 	.word	0x0800e6a8
 8002008:	20000664 	.word	0x20000664
 800200c:	0800e6ac 	.word	0x0800e6ac
 8002010:	2000065c 	.word	0x2000065c
 8002014:	0800e6b0 	.word	0x0800e6b0
 8002018:	20000665 	.word	0x20000665
 800201c:	0800e6b4 	.word	0x0800e6b4
 8002020:	20000666 	.word	0x20000666
 8002024:	0800e6b8 	.word	0x0800e6b8
 8002028:	20000667 	.word	0x20000667
 800202c:	0800e6bc 	.word	0x0800e6bc
 8002030:	20000671 	.word	0x20000671
 8002034:	20000648 	.word	0x20000648
 8002038:	20000673 	.word	0x20000673
 800203c:	20000649 	.word	0x20000649
				  case(0):
					sprintf(DisplayText, "%d", Red);
 8002040:	4b9b      	ldr	r3, [pc, #620]	@ (80022b0 <main+0xb2c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	499b      	ldr	r1, [pc, #620]	@ (80022b4 <main+0xb30>)
 8002048:	489b      	ldr	r0, [pc, #620]	@ (80022b8 <main+0xb34>)
 800204a:	f00b fe5f 	bl	800dd0c <siprintf>
					SSD1306_GotoXY(0, 10);
 800204e:	210a      	movs	r1, #10
 8002050:	2000      	movs	r0, #0
 8002052:	f000 ff87 	bl	8002f64 <SSD1306_GotoXY>
					SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_BLACK);
 8002056:	2200      	movs	r2, #0
 8002058:	4998      	ldr	r1, [pc, #608]	@ (80022bc <main+0xb38>)
 800205a:	4897      	ldr	r0, [pc, #604]	@ (80022b8 <main+0xb34>)
 800205c:	f001 f816 	bl	800308c <SSD1306_Puts>

					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && RedMenu == 0){
 8002060:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002064:	4896      	ldr	r0, [pc, #600]	@ (80022c0 <main+0xb3c>)
 8002066:	f003 fa13 	bl	8005490 <HAL_GPIO_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10f      	bne.n	8002090 <main+0x90c>
 8002070:	4b94      	ldr	r3, [pc, #592]	@ (80022c4 <main+0xb40>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <main+0x90c>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002078:	bf00      	nop
 800207a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800207e:	4890      	ldr	r0, [pc, #576]	@ (80022c0 <main+0xb3c>)
 8002080:	f003 fa06 	bl	8005490 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f7      	beq.n	800207a <main+0x8f6>
						RedMenu = 1;
 800208a:	4b8e      	ldr	r3, [pc, #568]	@ (80022c4 <main+0xb40>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
					}
					if(RedMenu){
 8002090:	4b8c      	ldr	r3, [pc, #560]	@ (80022c4 <main+0xb40>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 81c5 	beq.w	8002424 <main+0xca0>
						SubMenuDeniedFlag = 1;
 800209a:	4b8b      	ldr	r3, [pc, #556]	@ (80022c8 <main+0xb44>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
						if(EncRotRig == 1)Red++;
 80020a0:	4b8a      	ldr	r3, [pc, #552]	@ (80022cc <main+0xb48>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <main+0x930>
 80020a8:	4b81      	ldr	r3, [pc, #516]	@ (80022b0 <main+0xb2c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b7f      	ldr	r3, [pc, #508]	@ (80022b0 <main+0xb2c>)
 80020b2:	701a      	strb	r2, [r3, #0]
						if(EncRotLft == 1)Red--;
 80020b4:	4b86      	ldr	r3, [pc, #536]	@ (80022d0 <main+0xb4c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <main+0x944>
 80020bc:	4b7c      	ldr	r3, [pc, #496]	@ (80022b0 <main+0xb2c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b7a      	ldr	r3, [pc, #488]	@ (80022b0 <main+0xb2c>)
 80020c6:	701a      	strb	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && RedMenu == 1){
 80020c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020cc:	487c      	ldr	r0, [pc, #496]	@ (80022c0 <main+0xb3c>)
 80020ce:	f003 f9df 	bl	8005490 <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 81a5 	bne.w	8002424 <main+0xca0>
 80020da:	4b7a      	ldr	r3, [pc, #488]	@ (80022c4 <main+0xb40>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	f040 81a0 	bne.w	8002424 <main+0xca0>
							while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80020e4:	bf00      	nop
 80020e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ea:	4875      	ldr	r0, [pc, #468]	@ (80022c0 <main+0xb3c>)
 80020ec:	f003 f9d0 	bl	8005490 <HAL_GPIO_ReadPin>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f7      	beq.n	80020e6 <main+0x962>
							WRITE_FLASH(0x0807FFF0, Red);
 80020f6:	4b6e      	ldr	r3, [pc, #440]	@ (80022b0 <main+0xb2c>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4875      	ldr	r0, [pc, #468]	@ (80022d4 <main+0xb50>)
 80020fe:	f7ff fa1d 	bl	800153c <WRITE_FLASH>
							RedMenu = 0;
 8002102:	4b70      	ldr	r3, [pc, #448]	@ (80022c4 <main+0xb40>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
							SubMenuDeniedFlag = 0;
 8002108:	4b6f      	ldr	r3, [pc, #444]	@ (80022c8 <main+0xb44>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
						}
					}
				  break;
 800210e:	e189      	b.n	8002424 <main+0xca0>
				  case(1):
						sprintf(DisplayText, "%d", Green);
 8002110:	4b71      	ldr	r3, [pc, #452]	@ (80022d8 <main+0xb54>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4967      	ldr	r1, [pc, #412]	@ (80022b4 <main+0xb30>)
 8002118:	4867      	ldr	r0, [pc, #412]	@ (80022b8 <main+0xb34>)
 800211a:	f00b fdf7 	bl	800dd0c <siprintf>
						SSD1306_GotoXY(25, 10);
 800211e:	210a      	movs	r1, #10
 8002120:	2019      	movs	r0, #25
 8002122:	f000 ff1f 	bl	8002f64 <SSD1306_GotoXY>
						SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_BLACK);
 8002126:	2200      	movs	r2, #0
 8002128:	4964      	ldr	r1, [pc, #400]	@ (80022bc <main+0xb38>)
 800212a:	4863      	ldr	r0, [pc, #396]	@ (80022b8 <main+0xb34>)
 800212c:	f000 ffae 	bl	800308c <SSD1306_Puts>

					  //uint8_t GreenMenu = 0;
					  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && GreenMenu == 0){
 8002130:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002134:	4862      	ldr	r0, [pc, #392]	@ (80022c0 <main+0xb3c>)
 8002136:	f003 f9ab 	bl	8005490 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10f      	bne.n	8002160 <main+0x9dc>
 8002140:	4b66      	ldr	r3, [pc, #408]	@ (80022dc <main+0xb58>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <main+0x9dc>
						while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002148:	bf00      	nop
 800214a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800214e:	485c      	ldr	r0, [pc, #368]	@ (80022c0 <main+0xb3c>)
 8002150:	f003 f99e 	bl	8005490 <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f7      	beq.n	800214a <main+0x9c6>
						GreenMenu = 1;
 800215a:	4b60      	ldr	r3, [pc, #384]	@ (80022dc <main+0xb58>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
					  }
					  if(GreenMenu){
 8002160:	4b5e      	ldr	r3, [pc, #376]	@ (80022dc <main+0xb58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 815f 	beq.w	8002428 <main+0xca4>
						SubMenuDeniedFlag = 1;
 800216a:	4b57      	ldr	r3, [pc, #348]	@ (80022c8 <main+0xb44>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
						if(EncRotRig == 1)Green++;
 8002170:	4b56      	ldr	r3, [pc, #344]	@ (80022cc <main+0xb48>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <main+0xa00>
 8002178:	4b57      	ldr	r3, [pc, #348]	@ (80022d8 <main+0xb54>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b55      	ldr	r3, [pc, #340]	@ (80022d8 <main+0xb54>)
 8002182:	701a      	strb	r2, [r3, #0]
						if(EncRotLft == 1)Green--;
 8002184:	4b52      	ldr	r3, [pc, #328]	@ (80022d0 <main+0xb4c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <main+0xa14>
 800218c:	4b52      	ldr	r3, [pc, #328]	@ (80022d8 <main+0xb54>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	3b01      	subs	r3, #1
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b50      	ldr	r3, [pc, #320]	@ (80022d8 <main+0xb54>)
 8002196:	701a      	strb	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && GreenMenu == 1){
 8002198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800219c:	4848      	ldr	r0, [pc, #288]	@ (80022c0 <main+0xb3c>)
 800219e:	f003 f977 	bl	8005490 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 813f 	bne.w	8002428 <main+0xca4>
 80021aa:	4b4c      	ldr	r3, [pc, #304]	@ (80022dc <main+0xb58>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	f040 813a 	bne.w	8002428 <main+0xca4>
						  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80021b4:	bf00      	nop
 80021b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021ba:	4841      	ldr	r0, [pc, #260]	@ (80022c0 <main+0xb3c>)
 80021bc:	f003 f968 	bl	8005490 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f7      	beq.n	80021b6 <main+0xa32>
						  WRITE_FLASH(0x0807FFF1, Green);
 80021c6:	4b44      	ldr	r3, [pc, #272]	@ (80022d8 <main+0xb54>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	4844      	ldr	r0, [pc, #272]	@ (80022e0 <main+0xb5c>)
 80021ce:	f7ff f9b5 	bl	800153c <WRITE_FLASH>
						  GreenMenu = 0;
 80021d2:	4b42      	ldr	r3, [pc, #264]	@ (80022dc <main+0xb58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
						  SubMenuDeniedFlag = 0;
 80021d8:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <main+0xb44>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
						}
					  }

				  break;
 80021de:	e123      	b.n	8002428 <main+0xca4>
				  case(2):
						sprintf(DisplayText, "%d", Blue);
 80021e0:	4b40      	ldr	r3, [pc, #256]	@ (80022e4 <main+0xb60>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4933      	ldr	r1, [pc, #204]	@ (80022b4 <main+0xb30>)
 80021e8:	4833      	ldr	r0, [pc, #204]	@ (80022b8 <main+0xb34>)
 80021ea:	f00b fd8f 	bl	800dd0c <siprintf>
						SSD1306_GotoXY(56, 10);
 80021ee:	210a      	movs	r1, #10
 80021f0:	2038      	movs	r0, #56	@ 0x38
 80021f2:	f000 feb7 	bl	8002f64 <SSD1306_GotoXY>
						SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_BLACK);
 80021f6:	2200      	movs	r2, #0
 80021f8:	4930      	ldr	r1, [pc, #192]	@ (80022bc <main+0xb38>)
 80021fa:	482f      	ldr	r0, [pc, #188]	@ (80022b8 <main+0xb34>)
 80021fc:	f000 ff46 	bl	800308c <SSD1306_Puts>

					  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && BlueMenu == 0){
 8002200:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002204:	482e      	ldr	r0, [pc, #184]	@ (80022c0 <main+0xb3c>)
 8002206:	f003 f943 	bl	8005490 <HAL_GPIO_ReadPin>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10f      	bne.n	8002230 <main+0xaac>
 8002210:	4b35      	ldr	r3, [pc, #212]	@ (80022e8 <main+0xb64>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <main+0xaac>
						while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002218:	bf00      	nop
 800221a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800221e:	4828      	ldr	r0, [pc, #160]	@ (80022c0 <main+0xb3c>)
 8002220:	f003 f936 	bl	8005490 <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f7      	beq.n	800221a <main+0xa96>
						BlueMenu = 1;
 800222a:	4b2f      	ldr	r3, [pc, #188]	@ (80022e8 <main+0xb64>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
					  }
					  if(BlueMenu){
 8002230:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <main+0xb64>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80f9 	beq.w	800242c <main+0xca8>
						SubMenuDeniedFlag = 1;
 800223a:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <main+0xb44>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
						if(EncRotRig == 1)Blue++;
 8002240:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <main+0xb48>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <main+0xad0>
 8002248:	4b26      	ldr	r3, [pc, #152]	@ (80022e4 <main+0xb60>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b24      	ldr	r3, [pc, #144]	@ (80022e4 <main+0xb60>)
 8002252:	701a      	strb	r2, [r3, #0]
						if(EncRotLft == 1)Blue--;
 8002254:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <main+0xb4c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <main+0xae4>
 800225c:	4b21      	ldr	r3, [pc, #132]	@ (80022e4 <main+0xb60>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	3b01      	subs	r3, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <main+0xb60>)
 8002266:	701a      	strb	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && BlueMenu == 1){
 8002268:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800226c:	4814      	ldr	r0, [pc, #80]	@ (80022c0 <main+0xb3c>)
 800226e:	f003 f90f 	bl	8005490 <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 80d9 	bne.w	800242c <main+0xca8>
 800227a:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <main+0xb64>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	f040 80d4 	bne.w	800242c <main+0xca8>
						  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002284:	bf00      	nop
 8002286:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800228a:	480d      	ldr	r0, [pc, #52]	@ (80022c0 <main+0xb3c>)
 800228c:	f003 f900 	bl	8005490 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f7      	beq.n	8002286 <main+0xb02>
						  WRITE_FLASH(0x0807FFF2, Blue);
 8002296:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <main+0xb60>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	4813      	ldr	r0, [pc, #76]	@ (80022ec <main+0xb68>)
 800229e:	f7ff f94d 	bl	800153c <WRITE_FLASH>
						  BlueMenu = 0;
 80022a2:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <main+0xb64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
						  SubMenuDeniedFlag = 0;
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <main+0xb44>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
						}
					  }

				  break;
 80022ae:	e0bd      	b.n	800242c <main+0xca8>
 80022b0:	20000664 	.word	0x20000664
 80022b4:	0800e6ac 	.word	0x0800e6ac
 80022b8:	2000065c 	.word	0x2000065c
 80022bc:	20000004 	.word	0x20000004
 80022c0:	40020000 	.word	0x40020000
 80022c4:	2000066c 	.word	0x2000066c
 80022c8:	20000671 	.word	0x20000671
 80022cc:	20000648 	.word	0x20000648
 80022d0:	20000649 	.word	0x20000649
 80022d4:	0807fff0 	.word	0x0807fff0
 80022d8:	20000665 	.word	0x20000665
 80022dc:	2000066d 	.word	0x2000066d
 80022e0:	0807fff1 	.word	0x0807fff1
 80022e4:	20000666 	.word	0x20000666
 80022e8:	2000066e 	.word	0x2000066e
 80022ec:	0807fff2 	.word	0x0807fff2
				  case(3):
						sprintf(DisplayText, "%d", LedBrightness);
 80022f0:	4b9f      	ldr	r3, [pc, #636]	@ (8002570 <main+0xdec>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	499f      	ldr	r1, [pc, #636]	@ (8002574 <main+0xdf0>)
 80022f8:	489f      	ldr	r0, [pc, #636]	@ (8002578 <main+0xdf4>)
 80022fa:	f00b fd07 	bl	800dd0c <siprintf>
						SSD1306_GotoXY(92, 10);
 80022fe:	210a      	movs	r1, #10
 8002300:	205c      	movs	r0, #92	@ 0x5c
 8002302:	f000 fe2f 	bl	8002f64 <SSD1306_GotoXY>
						SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_BLACK);
 8002306:	2200      	movs	r2, #0
 8002308:	499c      	ldr	r1, [pc, #624]	@ (800257c <main+0xdf8>)
 800230a:	489b      	ldr	r0, [pc, #620]	@ (8002578 <main+0xdf4>)
 800230c:	f000 febe 	bl	800308c <SSD1306_Puts>

					  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && BrMenu == 0){
 8002310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002314:	489a      	ldr	r0, [pc, #616]	@ (8002580 <main+0xdfc>)
 8002316:	f003 f8bb 	bl	8005490 <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10f      	bne.n	8002340 <main+0xbbc>
 8002320:	4b98      	ldr	r3, [pc, #608]	@ (8002584 <main+0xe00>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10b      	bne.n	8002340 <main+0xbbc>
						while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002328:	bf00      	nop
 800232a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800232e:	4894      	ldr	r0, [pc, #592]	@ (8002580 <main+0xdfc>)
 8002330:	f003 f8ae 	bl	8005490 <HAL_GPIO_ReadPin>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f7      	beq.n	800232a <main+0xba6>
						BrMenu = 1;
 800233a:	4b92      	ldr	r3, [pc, #584]	@ (8002584 <main+0xe00>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
					  }
					  if(BrMenu){
 8002340:	4b90      	ldr	r3, [pc, #576]	@ (8002584 <main+0xe00>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d073      	beq.n	8002430 <main+0xcac>
						SubMenuDeniedFlag = 1;
 8002348:	4b8f      	ldr	r3, [pc, #572]	@ (8002588 <main+0xe04>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
						if(EncRotRig == 1)LedBrightness++;
 800234e:	4b8f      	ldr	r3, [pc, #572]	@ (800258c <main+0xe08>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <main+0xbde>
 8002356:	4b86      	ldr	r3, [pc, #536]	@ (8002570 <main+0xdec>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b84      	ldr	r3, [pc, #528]	@ (8002570 <main+0xdec>)
 8002360:	701a      	strb	r2, [r3, #0]
						if(EncRotLft == 1)LedBrightness--;
 8002362:	4b8b      	ldr	r3, [pc, #556]	@ (8002590 <main+0xe0c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <main+0xbf2>
 800236a:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <main+0xdec>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b7f      	ldr	r3, [pc, #508]	@ (8002570 <main+0xdec>)
 8002374:	701a      	strb	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && BrMenu == 1){
 8002376:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800237a:	4881      	ldr	r0, [pc, #516]	@ (8002580 <main+0xdfc>)
 800237c:	f003 f888 	bl	8005490 <HAL_GPIO_ReadPin>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d154      	bne.n	8002430 <main+0xcac>
 8002386:	4b7f      	ldr	r3, [pc, #508]	@ (8002584 <main+0xe00>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d150      	bne.n	8002430 <main+0xcac>
						  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 800238e:	bf00      	nop
 8002390:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002394:	487a      	ldr	r0, [pc, #488]	@ (8002580 <main+0xdfc>)
 8002396:	f003 f87b 	bl	8005490 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f7      	beq.n	8002390 <main+0xc0c>
						  WRITE_FLASH(0x0807FFF3, LedBrightness);
 80023a0:	4b73      	ldr	r3, [pc, #460]	@ (8002570 <main+0xdec>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	487b      	ldr	r0, [pc, #492]	@ (8002594 <main+0xe10>)
 80023a8:	f7ff f8c8 	bl	800153c <WRITE_FLASH>
						  BrMenu = 0;
 80023ac:	4b75      	ldr	r3, [pc, #468]	@ (8002584 <main+0xe00>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
						  SubMenuDeniedFlag = 0;
 80023b2:	4b75      	ldr	r3, [pc, #468]	@ (8002588 <main+0xe04>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
						}
					  }
				  break;
 80023b8:	e03a      	b.n	8002430 <main+0xcac>
				  case(4):
						SSD1306_GotoXY(90, 20);
 80023ba:	2114      	movs	r1, #20
 80023bc:	205a      	movs	r0, #90	@ 0x5a
 80023be:	f000 fdd1 	bl	8002f64 <SSD1306_GotoXY>
						SSD1306_Puts("BACK", &Font_7x10, SSD1306_COLOR_BLACK);
 80023c2:	2200      	movs	r2, #0
 80023c4:	496d      	ldr	r1, [pc, #436]	@ (800257c <main+0xdf8>)
 80023c6:	4874      	ldr	r0, [pc, #464]	@ (8002598 <main+0xe14>)
 80023c8:	f000 fe60 	bl	800308c <SSD1306_Puts>
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && SubMenu == 1){
 80023cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023d0:	486b      	ldr	r0, [pc, #428]	@ (8002580 <main+0xdfc>)
 80023d2:	f003 f85d 	bl	8005490 <HAL_GPIO_ReadPin>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d12b      	bne.n	8002434 <main+0xcb0>
 80023dc:	4b6f      	ldr	r3, [pc, #444]	@ (800259c <main+0xe18>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d127      	bne.n	8002434 <main+0xcb0>
							while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80023e4:	bf00      	nop
 80023e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ea:	4865      	ldr	r0, [pc, #404]	@ (8002580 <main+0xdfc>)
 80023ec:	f003 f850 	bl	8005490 <HAL_GPIO_ReadPin>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f7      	beq.n	80023e6 <main+0xc62>
							ArgbMode = 1;
 80023f6:	4b6a      	ldr	r3, [pc, #424]	@ (80025a0 <main+0xe1c>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
							WRITE_FLASH(0x0807FFF4, ArgbMode);
 80023fc:	4b68      	ldr	r3, [pc, #416]	@ (80025a0 <main+0xe1c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	4868      	ldr	r0, [pc, #416]	@ (80025a4 <main+0xe20>)
 8002404:	f7ff f89a 	bl	800153c <WRITE_FLASH>
							SubMenu = !SubMenu;
 8002408:	4b64      	ldr	r3, [pc, #400]	@ (800259c <main+0xe18>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	4b60      	ldr	r3, [pc, #384]	@ (800259c <main+0xe18>)
 800241a:	701a      	strb	r2, [r3, #0]
							MenuDeniedFlag = 0;
 800241c:	4b62      	ldr	r3, [pc, #392]	@ (80025a8 <main+0xe24>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
						}
				  break;
 8002422:	e007      	b.n	8002434 <main+0xcb0>
				  break;
 8002424:	bf00      	nop
 8002426:	e10d      	b.n	8002644 <main+0xec0>
				  break;
 8002428:	bf00      	nop
 800242a:	e10b      	b.n	8002644 <main+0xec0>
				  break;
 800242c:	bf00      	nop
 800242e:	e109      	b.n	8002644 <main+0xec0>
				  break;
 8002430:	bf00      	nop
 8002432:	e107      	b.n	8002644 <main+0xec0>
				  break;
 8002434:	bf00      	nop
				}
			}
		  break;
 8002436:	e105      	b.n	8002644 <main+0xec0>
		  case(2):
			SSD1306_GotoXY(90, 10);
 8002438:	210a      	movs	r1, #10
 800243a:	205a      	movs	r0, #90	@ 0x5a
 800243c:	f000 fd92 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("Efct", &Font_7x10, SSD1306_COLOR_BLACK);
 8002440:	2200      	movs	r2, #0
 8002442:	494e      	ldr	r1, [pc, #312]	@ (800257c <main+0xdf8>)
 8002444:	4859      	ldr	r0, [pc, #356]	@ (80025ac <main+0xe28>)
 8002446:	f000 fe21 	bl	800308c <SSD1306_Puts>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 800244a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800244e:	484c      	ldr	r0, [pc, #304]	@ (8002580 <main+0xdfc>)
 8002450:	f003 f81e 	bl	8005490 <HAL_GPIO_ReadPin>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 80f6 	bne.w	8002648 <main+0xec4>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 800245c:	bf00      	nop
 800245e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002462:	4847      	ldr	r0, [pc, #284]	@ (8002580 <main+0xdfc>)
 8002464:	f003 f814 	bl	8005490 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f7      	beq.n	800245e <main+0xcda>
				ArgbMode = 0;
 800246e:	4b4c      	ldr	r3, [pc, #304]	@ (80025a0 <main+0xe1c>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
				WRITE_FLASH(0x0807FFF4, ArgbMode);
 8002474:	4b4a      	ldr	r3, [pc, #296]	@ (80025a0 <main+0xe1c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	484a      	ldr	r0, [pc, #296]	@ (80025a4 <main+0xe20>)
 800247c:	f7ff f85e 	bl	800153c <WRITE_FLASH>
			}
		  break;
 8002480:	e0e2      	b.n	8002648 <main+0xec4>
		  case(3):
			SSD1306_GotoXY(45, 20);
 8002482:	2114      	movs	r1, #20
 8002484:	202d      	movs	r0, #45	@ 0x2d
 8002486:	f000 fd6d 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("Norm", &Font_7x10, SSD1306_COLOR_BLACK);
 800248a:	2200      	movs	r2, #0
 800248c:	493b      	ldr	r1, [pc, #236]	@ (800257c <main+0xdf8>)
 800248e:	4848      	ldr	r0, [pc, #288]	@ (80025b0 <main+0xe2c>)
 8002490:	f000 fdfc 	bl	800308c <SSD1306_Puts>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 8002494:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002498:	4839      	ldr	r0, [pc, #228]	@ (8002580 <main+0xdfc>)
 800249a:	f002 fff9 	bl	8005490 <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 80d3 	bne.w	800264c <main+0xec8>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80024a6:	bf00      	nop
 80024a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024ac:	4834      	ldr	r0, [pc, #208]	@ (8002580 <main+0xdfc>)
 80024ae:	f002 ffef 	bl	8005490 <HAL_GPIO_ReadPin>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f7      	beq.n	80024a8 <main+0xd24>
				SwitchMode = 1;
 80024b8:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <main+0xe30>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
				WRITE_FLASH(0x0807FFF5, SwitchMode);
 80024be:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <main+0xe30>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	483c      	ldr	r0, [pc, #240]	@ (80025b8 <main+0xe34>)
 80024c6:	f7ff f839 	bl	800153c <WRITE_FLASH>
			}
		  break;
 80024ca:	e0bf      	b.n	800264c <main+0xec8>
		  case(4):
			SSD1306_GotoXY(90, 20);
 80024cc:	2114      	movs	r1, #20
 80024ce:	205a      	movs	r0, #90	@ 0x5a
 80024d0:	f000 fd48 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("Rapid", &Font_7x10, SSD1306_COLOR_BLACK);
 80024d4:	2200      	movs	r2, #0
 80024d6:	4929      	ldr	r1, [pc, #164]	@ (800257c <main+0xdf8>)
 80024d8:	4838      	ldr	r0, [pc, #224]	@ (80025bc <main+0xe38>)
 80024da:	f000 fdd7 	bl	800308c <SSD1306_Puts>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 80024de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024e2:	4827      	ldr	r0, [pc, #156]	@ (8002580 <main+0xdfc>)
 80024e4:	f002 ffd4 	bl	8005490 <HAL_GPIO_ReadPin>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80b0 	bne.w	8002650 <main+0xecc>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80024f0:	bf00      	nop
 80024f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024f6:	4822      	ldr	r0, [pc, #136]	@ (8002580 <main+0xdfc>)
 80024f8:	f002 ffca 	bl	8005490 <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f7      	beq.n	80024f2 <main+0xd6e>
				SwitchMode = 0;
 8002502:	4b2c      	ldr	r3, [pc, #176]	@ (80025b4 <main+0xe30>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
				WRITE_FLASH(0x0807FFF5, SwitchMode);
 8002508:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <main+0xe30>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	482a      	ldr	r0, [pc, #168]	@ (80025b8 <main+0xe34>)
 8002510:	f7ff f814 	bl	800153c <WRITE_FLASH>
			}
		  break;
 8002514:	e09c      	b.n	8002650 <main+0xecc>
*/
	else{
/*
 * Lock keys indication
*/
		uint8_t *getData = USBD_HID_GetData();
 8002516:	f009 fd31 	bl	800bf7c <USBD_HID_GetData>
 800251a:	4603      	mov	r3, r0
 800251c:	603b      	str	r3, [r7, #0]
		if((getData[0] & (uint8_t)(1<<L_NUMLOCK)) == (1<<L_NUMLOCK)){
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <main+0xdba>
			SSD1306_GotoXY(0, 0);
 800252a:	2100      	movs	r1, #0
 800252c:	2000      	movs	r0, #0
 800252e:	f000 fd19 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("Num-ON", &Font_7x10, SSD1306_COLOR_WHITE);
 8002532:	2201      	movs	r2, #1
 8002534:	4911      	ldr	r1, [pc, #68]	@ (800257c <main+0xdf8>)
 8002536:	4822      	ldr	r0, [pc, #136]	@ (80025c0 <main+0xe3c>)
 8002538:	f000 fda8 	bl	800308c <SSD1306_Puts>
 800253c:	e008      	b.n	8002550 <main+0xdcc>
		}
		else{
			SSD1306_GotoXY(0, 0);
 800253e:	2100      	movs	r1, #0
 8002540:	2000      	movs	r0, #0
 8002542:	f000 fd0f 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("Num-OFF", &Font_7x10, SSD1306_COLOR_WHITE);
 8002546:	2201      	movs	r2, #1
 8002548:	490c      	ldr	r1, [pc, #48]	@ (800257c <main+0xdf8>)
 800254a:	481e      	ldr	r0, [pc, #120]	@ (80025c4 <main+0xe40>)
 800254c:	f000 fd9e 	bl	800308c <SSD1306_Puts>
		}
		if((getData[0] & (uint8_t)(1<<L_CAPSLOCK)) == (1<<L_CAPSLOCK)){
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d037      	beq.n	80025cc <main+0xe48>
			SSD1306_GotoXY(64, 0);
 800255c:	2100      	movs	r1, #0
 800255e:	2040      	movs	r0, #64	@ 0x40
 8002560:	f000 fd00 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("Caps-ON", &Font_7x10, SSD1306_COLOR_WHITE);
 8002564:	2201      	movs	r2, #1
 8002566:	4905      	ldr	r1, [pc, #20]	@ (800257c <main+0xdf8>)
 8002568:	4817      	ldr	r0, [pc, #92]	@ (80025c8 <main+0xe44>)
 800256a:	f000 fd8f 	bl	800308c <SSD1306_Puts>
 800256e:	e036      	b.n	80025de <main+0xe5a>
 8002570:	20000667 	.word	0x20000667
 8002574:	0800e6ac 	.word	0x0800e6ac
 8002578:	2000065c 	.word	0x2000065c
 800257c:	20000004 	.word	0x20000004
 8002580:	40020000 	.word	0x40020000
 8002584:	2000066f 	.word	0x2000066f
 8002588:	20000671 	.word	0x20000671
 800258c:	20000648 	.word	0x20000648
 8002590:	20000649 	.word	0x20000649
 8002594:	0807fff3 	.word	0x0807fff3
 8002598:	0800e6bc 	.word	0x0800e6bc
 800259c:	20000670 	.word	0x20000670
 80025a0:	20000668 	.word	0x20000668
 80025a4:	0807fff4 	.word	0x0807fff4
 80025a8:	2000066b 	.word	0x2000066b
 80025ac:	0800e688 	.word	0x0800e688
 80025b0:	0800e698 	.word	0x0800e698
 80025b4:	20000669 	.word	0x20000669
 80025b8:	0807fff5 	.word	0x0807fff5
 80025bc:	0800e6a0 	.word	0x0800e6a0
 80025c0:	0800e6c4 	.word	0x0800e6c4
 80025c4:	0800e6cc 	.word	0x0800e6cc
 80025c8:	0800e6d4 	.word	0x0800e6d4
		}
		else{
			SSD1306_GotoXY(64, 0);
 80025cc:	2100      	movs	r1, #0
 80025ce:	2040      	movs	r0, #64	@ 0x40
 80025d0:	f000 fcc8 	bl	8002f64 <SSD1306_GotoXY>
			SSD1306_Puts("Caps-OFF", &Font_7x10, SSD1306_COLOR_WHITE);
 80025d4:	2201      	movs	r2, #1
 80025d6:	4935      	ldr	r1, [pc, #212]	@ (80026ac <main+0xf28>)
 80025d8:	4835      	ldr	r0, [pc, #212]	@ (80026b0 <main+0xf2c>)
 80025da:	f000 fd57 	bl	800308c <SSD1306_Puts>
		}
/*
 * Volume Up/Down
*/
		if(EncRotRig == 1){
 80025de:	4b35      	ldr	r3, [pc, #212]	@ (80026b4 <main+0xf30>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <main+0xe6e>
			MediaReport[0] = 0x02;// Report Custom Media ID
 80025e6:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <main+0xf34>)
 80025e8:	2202      	movs	r2, #2
 80025ea:	701a      	strb	r2, [r3, #0]
			MediaReport[1] = 0x04;//40;//81;
 80025ec:	4b32      	ldr	r3, [pc, #200]	@ (80026b8 <main+0xf34>)
 80025ee:	2204      	movs	r2, #4
 80025f0:	705a      	strb	r2, [r3, #1]
		}
		if(EncRotLft == 1){
 80025f2:	4b32      	ldr	r3, [pc, #200]	@ (80026bc <main+0xf38>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <main+0xe82>
			MediaReport[0] = 0x02;
 80025fa:	4b2f      	ldr	r3, [pc, #188]	@ (80026b8 <main+0xf34>)
 80025fc:	2202      	movs	r2, #2
 80025fe:	701a      	strb	r2, [r3, #0]
			MediaReport[1] = 0x08;//80;
 8002600:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <main+0xf34>)
 8002602:	2208      	movs	r2, #8
 8002604:	705a      	strb	r2, [r3, #1]
		}
/*
* Brightness Increment/Decrement (Only for main selected screen)
*/
		if(FnBtnState == 1 && EncRotRig == 1){
 8002606:	4b2e      	ldr	r3, [pc, #184]	@ (80026c0 <main+0xf3c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d109      	bne.n	8002622 <main+0xe9e>
 800260e:	4b29      	ldr	r3, [pc, #164]	@ (80026b4 <main+0xf30>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <main+0xe9e>
			MediaReport[0] = 0x02;
 8002616:	4b28      	ldr	r3, [pc, #160]	@ (80026b8 <main+0xf34>)
 8002618:	2202      	movs	r2, #2
 800261a:	701a      	strb	r2, [r3, #0]
			MediaReport[1] = 0x01;//E9;
 800261c:	4b26      	ldr	r3, [pc, #152]	@ (80026b8 <main+0xf34>)
 800261e:	2201      	movs	r2, #1
 8002620:	705a      	strb	r2, [r3, #1]
		}
		if(FnBtnState == 1 && EncRotLft == 1){
 8002622:	4b27      	ldr	r3, [pc, #156]	@ (80026c0 <main+0xf3c>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d113      	bne.n	8002652 <main+0xece>
 800262a:	4b24      	ldr	r3, [pc, #144]	@ (80026bc <main+0xf38>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10f      	bne.n	8002652 <main+0xece>
			MediaReport[0] = 0x02;
 8002632:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <main+0xf34>)
 8002634:	2202      	movs	r2, #2
 8002636:	701a      	strb	r2, [r3, #0]
			MediaReport[1] = 0x02;//EA;
 8002638:	4b1f      	ldr	r3, [pc, #124]	@ (80026b8 <main+0xf34>)
 800263a:	2202      	movs	r2, #2
 800263c:	705a      	strb	r2, [r3, #1]
 800263e:	e008      	b.n	8002652 <main+0xece>
		  break;
 8002640:	bf00      	nop
 8002642:	e006      	b.n	8002652 <main+0xece>
		  break;
 8002644:	bf00      	nop
 8002646:	e004      	b.n	8002652 <main+0xece>
		  break;
 8002648:	bf00      	nop
 800264a:	e002      	b.n	8002652 <main+0xece>
		  break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <main+0xece>
		  break;
 8002650:	bf00      	nop
	}

/*
 * Send Media Report
*/
	HAL_Delay(USBD_HID_GetPollingInterval());									// Wait some interval to avoid reports overlapping
 8002652:	f009 fc24 	bl	800be9e <USBD_HID_GetPollingInterval>
 8002656:	4603      	mov	r3, r0
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fa19 	bl	8003a90 <HAL_Delay>
	USBD_HID_SendReport(&hUsbDeviceFS, &MediaReport, 2);						// Send report
 800265e:	2202      	movs	r2, #2
 8002660:	4915      	ldr	r1, [pc, #84]	@ (80026b8 <main+0xf34>)
 8002662:	4818      	ldr	r0, [pc, #96]	@ (80026c4 <main+0xf40>)
 8002664:	f009 fbf8 	bl	800be58 <USBD_HID_SendReport>
	MediaReport[1] = 0x00;														// Clear Media Report
 8002668:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <main+0xf34>)
 800266a:	2200      	movs	r2, #0
 800266c:	705a      	strb	r2, [r3, #1]

    FnBtnState = 0;																// Reset Fn state
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <main+0xf3c>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]

	SSD1306_UpdateScreen();														// Show data
 8002674:	f000 fbd0 	bl	8002e18 <SSD1306_UpdateScreen>
	SSD1306_Fill(SSD1306_COLOR_BLACK);											// Clear display for next info
 8002678:	2000      	movs	r0, #0
 800267a:	f000 fbfb 	bl	8002e74 <SSD1306_Fill>

/*
 * ARGB handling
*/
	ARGB_SetBrightness(LedBrightness);
 800267e:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <main+0xf44>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe faf8 	bl	8000c78 <ARGB_SetBrightness>
	if(ArgbMode == 1){
 8002688:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <main+0xf48>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d108      	bne.n	80026a2 <main+0xf1e>
		// Solid color
		ARGB_FillRGB(Red, Green, Blue);
 8002690:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <main+0xf4c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4a0f      	ldr	r2, [pc, #60]	@ (80026d4 <main+0xf50>)
 8002696:	7811      	ldrb	r1, [r2, #0]
 8002698:	4a0f      	ldr	r2, [pc, #60]	@ (80026d8 <main+0xf54>)
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fb79 	bl	8000d94 <ARGB_FillRGB>
	}
	else if(ArgbMode == 0){
		// Some LGTVCOMMUNITY effect
		//In progress
	}
	ARGB_Show();
 80026a2:	f7fe fb99 	bl	8000dd8 <ARGB_Show>
  {
 80026a6:	f7ff b8d3 	b.w	8001850 <main+0xcc>
 80026aa:	bf00      	nop
 80026ac:	20000004 	.word	0x20000004
 80026b0:	0800e6dc 	.word	0x0800e6dc
 80026b4:	20000648 	.word	0x20000648
 80026b8:	20000658 	.word	0x20000658
 80026bc:	20000649 	.word	0x20000649
 80026c0:	2000064a 	.word	0x2000064a
 80026c4:	200008a8 	.word	0x200008a8
 80026c8:	20000667 	.word	0x20000667
 80026cc:	20000668 	.word	0x20000668
 80026d0:	20000664 	.word	0x20000664
 80026d4:	20000665 	.word	0x20000665
 80026d8:	20000666 	.word	0x20000666

080026dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b094      	sub	sp, #80	@ 0x50
 80026e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	2230      	movs	r2, #48	@ 0x30
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f00b fb2e 	bl	800dd4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f0:	f107 030c 	add.w	r3, r7, #12
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <SystemClock_Config+0xc8>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	4a26      	ldr	r2, [pc, #152]	@ (80027a4 <SystemClock_Config+0xc8>)
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <SystemClock_Config+0xc8>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <SystemClock_Config+0xcc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a20      	ldr	r2, [pc, #128]	@ (80027a8 <SystemClock_Config+0xcc>)
 8002726:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <SystemClock_Config+0xcc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002738:	2301      	movs	r3, #1
 800273a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800273c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002742:	2302      	movs	r3, #2
 8002744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002746:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800274a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800274c:	2319      	movs	r3, #25
 800274e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002750:	23c0      	movs	r3, #192	@ 0xc0
 8002752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002754:	2302      	movs	r3, #2
 8002756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002758:	2304      	movs	r3, #4
 800275a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275c:	f107 0320 	add.w	r3, r7, #32
 8002760:	4618      	mov	r0, r3
 8002762:	f006 fa4b 	bl	8008bfc <HAL_RCC_OscConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800276c:	f000 fa22 	bl	8002bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002770:	230f      	movs	r3, #15
 8002772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002774:	2302      	movs	r3, #2
 8002776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800277c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	2103      	movs	r1, #3
 800278c:	4618      	mov	r0, r3
 800278e:	f006 fcad 	bl	80090ec <HAL_RCC_ClockConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002798:	f000 fa0c 	bl	8002bb4 <Error_Handler>
  }
}
 800279c:	bf00      	nop
 800279e:	3750      	adds	r7, #80	@ 0x50
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40007000 	.word	0x40007000

080027ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027b2:	463b      	mov	r3, r7
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027c0:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <MX_ADC1_Init+0x7c>)
 80027c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80027c4:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027cc:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80027d2:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027d8:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027da:	2201      	movs	r2, #1
 80027dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027ee:	4a0f      	ldr	r2, [pc, #60]	@ (800282c <MX_ADC1_Init+0x80>)
 80027f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <MX_ADC1_Init+0x78>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_ADC1_Init+0x78>)
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002806:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <MX_ADC1_Init+0x78>)
 8002808:	2201      	movs	r2, #1
 800280a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800280c:	4805      	ldr	r0, [pc, #20]	@ (8002824 <MX_ADC1_Init+0x78>)
 800280e:	f001 f963 	bl	8003ad8 <HAL_ADC_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002818:	f000 f9cc 	bl	8002bb4 <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200003fc 	.word	0x200003fc
 8002828:	40012000 	.word	0x40012000
 800282c:	0f000001 	.word	0x0f000001

08002830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002834:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002836:	4a13      	ldr	r2, [pc, #76]	@ (8002884 <MX_I2C1_Init+0x54>)
 8002838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <MX_I2C1_Init+0x50>)
 800283c:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <MX_I2C1_Init+0x58>)
 800283e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002848:	2200      	movs	r2, #0
 800284a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <MX_I2C1_Init+0x50>)
 800284e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002854:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002856:	2200      	movs	r2, #0
 8002858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <MX_I2C1_Init+0x50>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002860:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <MX_I2C1_Init+0x50>)
 8002868:	2200      	movs	r2, #0
 800286a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800286c:	4804      	ldr	r0, [pc, #16]	@ (8002880 <MX_I2C1_Init+0x50>)
 800286e:	f002 fe41 	bl	80054f4 <HAL_I2C_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002878:	f000 f99c 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200004a4 	.word	0x200004a4
 8002884:	40005400 	.word	0x40005400
 8002888:	00061a80 	.word	0x00061a80

0800288c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b096      	sub	sp, #88	@ 0x58
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002892:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	615a      	str	r2, [r3, #20]
 80028bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2220      	movs	r2, #32
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f00b fa41 	bl	800dd4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028ca:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80028cc:	4a3e      	ldr	r2, [pc, #248]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028d0:	4b3c      	ldr	r3, [pc, #240]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80028dc:	4b39      	ldr	r3, [pc, #228]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80028de:	2259      	movs	r2, #89	@ 0x59
 80028e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e2:	4b38      	ldr	r3, [pc, #224]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028e8:	4b36      	ldr	r3, [pc, #216]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ee:	4b35      	ldr	r3, [pc, #212]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028f4:	4833      	ldr	r0, [pc, #204]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80028f6:	f006 fdc5 	bl	8009484 <HAL_TIM_Base_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002900:	f000 f958 	bl	8002bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002908:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800290a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800290e:	4619      	mov	r1, r3
 8002910:	482c      	ldr	r0, [pc, #176]	@ (80029c4 <MX_TIM1_Init+0x138>)
 8002912:	f007 f855 	bl	80099c0 <HAL_TIM_ConfigClockSource>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800291c:	f000 f94a 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002920:	4828      	ldr	r0, [pc, #160]	@ (80029c4 <MX_TIM1_Init+0x138>)
 8002922:	f006 fdfe 	bl	8009522 <HAL_TIM_PWM_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800292c:	f000 f942 	bl	8002bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002938:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800293c:	4619      	mov	r1, r3
 800293e:	4821      	ldr	r0, [pc, #132]	@ (80029c4 <MX_TIM1_Init+0x138>)
 8002940:	f007 fc24 	bl	800a18c <HAL_TIMEx_MasterConfigSynchronization>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800294a:	f000 f933 	bl	8002bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294e:	2360      	movs	r3, #96	@ 0x60
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800295a:	2300      	movs	r3, #0
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800296a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800296e:	2204      	movs	r2, #4
 8002970:	4619      	mov	r1, r3
 8002972:	4814      	ldr	r0, [pc, #80]	@ (80029c4 <MX_TIM1_Init+0x138>)
 8002974:	f006 ff62 	bl	800983c <HAL_TIM_PWM_ConfigChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800297e:	f000 f919 	bl	8002bb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002996:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800299a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	4807      	ldr	r0, [pc, #28]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80029a6:	f007 fc5f 	bl	800a268 <HAL_TIMEx_ConfigBreakDeadTime>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80029b0:	f000 f900 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029b4:	4803      	ldr	r0, [pc, #12]	@ (80029c4 <MX_TIM1_Init+0x138>)
 80029b6:	f000 feeb 	bl	8003790 <HAL_TIM_MspPostInit>

}
 80029ba:	bf00      	nop
 80029bc:	3758      	adds	r7, #88	@ 0x58
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000558 	.word	0x20000558
 80029c8:	40010000 	.word	0x40010000

080029cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	@ 0x30
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	2224      	movs	r2, #36	@ 0x24
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f00b f9b6 	bl	800dd4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029e8:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <MX_TIM3_Init+0xa0>)
 80029ea:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <MX_TIM3_Init+0xa4>)
 80029ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <MX_TIM3_Init+0xa0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <MX_TIM3_Init+0xa0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <MX_TIM3_Init+0xa0>)
 80029fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <MX_TIM3_Init+0xa0>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <MX_TIM3_Init+0xa0>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002a12:	2302      	movs	r3, #2
 8002a14:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a16:	2301      	movs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002a1e:	2305      	movs	r3, #5
 8002a20:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002a22:	2302      	movs	r3, #2
 8002a24:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a26:	2301      	movs	r3, #1
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8002a2e:	2305      	movs	r3, #5
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4619      	mov	r1, r3
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <MX_TIM3_Init+0xa0>)
 8002a3a:	f006 fdcb 	bl	80095d4 <HAL_TIM_Encoder_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a44:	f000 f8b6 	bl	8002bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	@ (8002a6c <MX_TIM3_Init+0xa0>)
 8002a56:	f007 fb99 	bl	800a18c <HAL_TIMEx_MasterConfigSynchronization>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a60:	f000 f8a8 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a64:	bf00      	nop
 8002a66:	3730      	adds	r7, #48	@ 0x30
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200005a0 	.word	0x200005a0
 8002a70:	40000400 	.word	0x40000400

08002a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <MX_DMA_Init+0x78>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a1a      	ldr	r2, [pc, #104]	@ (8002aec <MX_DMA_Init+0x78>)
 8002a84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b18      	ldr	r3, [pc, #96]	@ (8002aec <MX_DMA_Init+0x78>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4b14      	ldr	r3, [pc, #80]	@ (8002aec <MX_DMA_Init+0x78>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a13      	ldr	r2, [pc, #76]	@ (8002aec <MX_DMA_Init+0x78>)
 8002aa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <MX_DMA_Init+0x78>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2011      	movs	r0, #17
 8002ab8:	f001 fca7 	bl	800440a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002abc:	2011      	movs	r0, #17
 8002abe:	f001 fcc0 	bl	8004442 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	203a      	movs	r0, #58	@ 0x3a
 8002ac8:	f001 fc9f 	bl	800440a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002acc:	203a      	movs	r0, #58	@ 0x3a
 8002ace:	f001 fcb8 	bl	8004442 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	203c      	movs	r0, #60	@ 0x3c
 8002ad8:	f001 fc97 	bl	800440a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002adc:	203c      	movs	r0, #60	@ 0x3c
 8002ade:	f001 fcb0 	bl	8004442 <HAL_NVIC_EnableIRQ>

}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800

08002af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af6:	f107 030c 	add.w	r3, r7, #12
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	4a26      	ldr	r2, [pc, #152]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b16:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <MX_GPIO_Init+0xb8>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SELECT3_Pin|SELECT2_Pin|SELECT1_Pin|SELECT0_Pin, GPIO_PIN_RESET);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002b60:	4812      	ldr	r0, [pc, #72]	@ (8002bac <MX_GPIO_Init+0xbc>)
 8002b62:	f002 fcad 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SELECT3_Pin SELECT2_Pin SELECT1_Pin SELECT0_Pin */
  GPIO_InitStruct.Pin = SELECT3_Pin|SELECT2_Pin|SELECT1_Pin|SELECT0_Pin;
 8002b66:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	480b      	ldr	r0, [pc, #44]	@ (8002bac <MX_GPIO_Init+0xbc>)
 8002b80:	f002 fb02 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8002b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4619      	mov	r1, r3
 8002b98:	4805      	ldr	r0, [pc, #20]	@ (8002bb0 <MX_GPIO_Init+0xc0>)
 8002b9a:	f002 faf5 	bl	8005188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b9e:	bf00      	nop
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40020000 	.word	0x40020000

08002bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <Error_Handler+0x8>

08002bc0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60ba      	str	r2, [r7, #8]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	81fb      	strh	r3, [r7, #14]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	81bb      	strh	r3, [r7, #12]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bda:	3307      	adds	r3, #7
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	da00      	bge.n	8002be2 <SSD1306_DrawBitmap+0x22>
 8002be0:	3307      	adds	r3, #7
 8002be2:	10db      	asrs	r3, r3, #3
 8002be4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	82bb      	strh	r3, [r7, #20]
 8002bee:	e044      	b.n	8002c7a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	827b      	strh	r3, [r7, #18]
 8002bf4:	e02f      	b.n	8002c56 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002bf6:	8a7b      	ldrh	r3, [r7, #18]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
 8002c06:	e012      	b.n	8002c2e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002c08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c0c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c10:	fb03 f202 	mul.w	r2, r3, r2
 8002c14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da00      	bge.n	8002c1e <SSD1306_DrawBitmap+0x5e>
 8002c1c:	3307      	adds	r3, #7
 8002c1e:	10db      	asrs	r3, r3, #3
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4413      	add	r3, r2
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	75fb      	strb	r3, [r7, #23]
            }

            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da09      	bge.n	8002c4a <SSD1306_DrawBitmap+0x8a>
 8002c36:	89fa      	ldrh	r2, [r7, #14]
 8002c38:	8a7b      	ldrh	r3, [r7, #18]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	89b9      	ldrh	r1, [r7, #12]
 8002c40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f92d 	bl	8002ea4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002c4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	827b      	strh	r3, [r7, #18]
 8002c56:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	dbc9      	blt.n	8002bf6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002c62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	82bb      	strh	r3, [r7, #20]
 8002c6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	81bb      	strh	r3, [r7, #12]
 8002c7a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dbb4      	blt.n	8002bf0 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002c86:	bf00      	nop
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <SSD1306_Init>:


uint8_t SSD1306_Init(void) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002c96:	f000 fb19 	bl	80032cc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002c9a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2178      	movs	r1, #120	@ 0x78
 8002ca2:	485b      	ldr	r0, [pc, #364]	@ (8002e10 <SSD1306_Init+0x180>)
 8002ca4:	f002 fe68 	bl	8005978 <HAL_I2C_IsDeviceReady>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e0a9      	b.n	8002e06 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002cb2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002cb6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cb8:	e002      	b.n	8002cc0 <SSD1306_Init+0x30>
		p--;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f9      	bne.n	8002cba <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002cc6:	22ae      	movs	r2, #174	@ 0xae
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2078      	movs	r0, #120	@ 0x78
 8002ccc:	f000 fb7a 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2078      	movs	r0, #120	@ 0x78
 8002cd6:	f000 fb75 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002cda:	2210      	movs	r2, #16
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2078      	movs	r0, #120	@ 0x78
 8002ce0:	f000 fb70 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ce4:	22b0      	movs	r2, #176	@ 0xb0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2078      	movs	r0, #120	@ 0x78
 8002cea:	f000 fb6b 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002cee:	22c8      	movs	r2, #200	@ 0xc8
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2078      	movs	r0, #120	@ 0x78
 8002cf4:	f000 fb66 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2078      	movs	r0, #120	@ 0x78
 8002cfe:	f000 fb61 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002d02:	2210      	movs	r2, #16
 8002d04:	2100      	movs	r1, #0
 8002d06:	2078      	movs	r0, #120	@ 0x78
 8002d08:	f000 fb5c 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002d0c:	2240      	movs	r2, #64	@ 0x40
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2078      	movs	r0, #120	@ 0x78
 8002d12:	f000 fb57 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002d16:	2281      	movs	r2, #129	@ 0x81
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2078      	movs	r0, #120	@ 0x78
 8002d1c:	f000 fb52 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002d20:	22ff      	movs	r2, #255	@ 0xff
 8002d22:	2100      	movs	r1, #0
 8002d24:	2078      	movs	r0, #120	@ 0x78
 8002d26:	f000 fb4d 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002d2a:	22a1      	movs	r2, #161	@ 0xa1
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2078      	movs	r0, #120	@ 0x78
 8002d30:	f000 fb48 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002d34:	22a6      	movs	r2, #166	@ 0xa6
 8002d36:	2100      	movs	r1, #0
 8002d38:	2078      	movs	r0, #120	@ 0x78
 8002d3a:	f000 fb43 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002d3e:	22a8      	movs	r2, #168	@ 0xa8
 8002d40:	2100      	movs	r1, #0
 8002d42:	2078      	movs	r0, #120	@ 0x78
 8002d44:	f000 fb3e 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //0x3F for 128*64
 8002d48:	221f      	movs	r2, #31
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	2078      	movs	r0, #120	@ 0x78
 8002d4e:	f000 fb39 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d52:	22a4      	movs	r2, #164	@ 0xa4
 8002d54:	2100      	movs	r1, #0
 8002d56:	2078      	movs	r0, #120	@ 0x78
 8002d58:	f000 fb34 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002d5c:	22d3      	movs	r2, #211	@ 0xd3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	2078      	movs	r0, #120	@ 0x78
 8002d62:	f000 fb2f 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2078      	movs	r0, #120	@ 0x78
 8002d6c:	f000 fb2a 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d70:	22d5      	movs	r2, #213	@ 0xd5
 8002d72:	2100      	movs	r1, #0
 8002d74:	2078      	movs	r0, #120	@ 0x78
 8002d76:	f000 fb25 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002d7a:	22f0      	movs	r2, #240	@ 0xf0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2078      	movs	r0, #120	@ 0x78
 8002d80:	f000 fb20 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002d84:	22d9      	movs	r2, #217	@ 0xd9
 8002d86:	2100      	movs	r1, #0
 8002d88:	2078      	movs	r0, #120	@ 0x78
 8002d8a:	f000 fb1b 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002d8e:	2222      	movs	r2, #34	@ 0x22
 8002d90:	2100      	movs	r1, #0
 8002d92:	2078      	movs	r0, #120	@ 0x78
 8002d94:	f000 fb16 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002d98:	22da      	movs	r2, #218	@ 0xda
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	2078      	movs	r0, #120	@ 0x78
 8002d9e:	f000 fb11 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02); //0x12 for 128*64
 8002da2:	2202      	movs	r2, #2
 8002da4:	2100      	movs	r1, #0
 8002da6:	2078      	movs	r0, #120	@ 0x78
 8002da8:	f000 fb0c 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002dac:	22db      	movs	r2, #219	@ 0xdb
 8002dae:	2100      	movs	r1, #0
 8002db0:	2078      	movs	r0, #120	@ 0x78
 8002db2:	f000 fb07 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002db6:	2220      	movs	r2, #32
 8002db8:	2100      	movs	r1, #0
 8002dba:	2078      	movs	r0, #120	@ 0x78
 8002dbc:	f000 fb02 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002dc0:	228d      	movs	r2, #141	@ 0x8d
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2078      	movs	r0, #120	@ 0x78
 8002dc6:	f000 fafd 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002dca:	2214      	movs	r2, #20
 8002dcc:	2100      	movs	r1, #0
 8002dce:	2078      	movs	r0, #120	@ 0x78
 8002dd0:	f000 faf8 	bl	80033c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002dd4:	22af      	movs	r2, #175	@ 0xaf
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2078      	movs	r0, #120	@ 0x78
 8002dda:	f000 faf3 	bl	80033c4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002dde:	222e      	movs	r2, #46	@ 0x2e
 8002de0:	2100      	movs	r1, #0
 8002de2:	2078      	movs	r0, #120	@ 0x78
 8002de4:	f000 faee 	bl	80033c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f000 f843 	bl	8002e74 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002dee:	f000 f813 	bl	8002e18 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <SSD1306_Init+0x184>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <SSD1306_Init+0x184>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002dfe:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <SSD1306_Init+0x184>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002e04:	2301      	movs	r3, #1
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200004a4 	.word	0x200004a4
 8002e14:	20000874 	.word	0x20000874

08002e18 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002e1e:	2300      	movs	r3, #0
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	e01d      	b.n	8002e60 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	3b50      	subs	r3, #80	@ 0x50
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2078      	movs	r0, #120	@ 0x78
 8002e30:	f000 fac8 	bl	80033c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	2078      	movs	r0, #120	@ 0x78
 8002e3a:	f000 fac3 	bl	80033c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002e3e:	2210      	movs	r2, #16
 8002e40:	2100      	movs	r1, #0
 8002e42:	2078      	movs	r0, #120	@ 0x78
 8002e44:	f000 fabe 	bl	80033c4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	01db      	lsls	r3, r3, #7
 8002e4c:	4a08      	ldr	r2, [pc, #32]	@ (8002e70 <SSD1306_UpdateScreen+0x58>)
 8002e4e:	441a      	add	r2, r3
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	2140      	movs	r1, #64	@ 0x40
 8002e54:	2078      	movs	r0, #120	@ 0x78
 8002e56:	f000 fa4f 	bl	80032f8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	71fb      	strb	r3, [r7, #7]
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b07      	cmp	r3, #7
 8002e64:	d9de      	bls.n	8002e24 <SSD1306_UpdateScreen+0xc>
	}
}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000674 	.word	0x20000674

08002e74 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <SSD1306_Fill+0x14>
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <SSD1306_Fill+0x16>
 8002e88:	23ff      	movs	r3, #255	@ 0xff
 8002e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4803      	ldr	r0, [pc, #12]	@ (8002ea0 <SSD1306_Fill+0x2c>)
 8002e92:	f00a ff5b 	bl	800dd4c <memset>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000674 	.word	0x20000674

08002ea4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	80bb      	strh	r3, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	70fb      	strb	r3, [r7, #3]
	if (
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002eba:	d848      	bhi.n	8002f4e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	2b1f      	cmp	r3, #31
 8002ec0:	d845      	bhi.n	8002f4e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002ec2:	4b26      	ldr	r3, [pc, #152]	@ (8002f5c <SSD1306_DrawPixel+0xb8>)
 8002ec4:	791b      	ldrb	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d11a      	bne.n	8002f14 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	88bb      	ldrh	r3, [r7, #4]
 8002ee2:	08db      	lsrs	r3, r3, #3
 8002ee4:	b298      	uxth	r0, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	01db      	lsls	r3, r3, #7
 8002eea:	4413      	add	r3, r2
 8002eec:	4a1c      	ldr	r2, [pc, #112]	@ (8002f60 <SSD1306_DrawPixel+0xbc>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	b25a      	sxtb	r2, r3
 8002ef2:	88bb      	ldrh	r3, [r7, #4]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	2101      	movs	r1, #1
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b259      	sxtb	r1, r3
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	4603      	mov	r3, r0
 8002f08:	01db      	lsls	r3, r3, #7
 8002f0a:	4413      	add	r3, r2
 8002f0c:	b2c9      	uxtb	r1, r1
 8002f0e:	4a14      	ldr	r2, [pc, #80]	@ (8002f60 <SSD1306_DrawPixel+0xbc>)
 8002f10:	54d1      	strb	r1, [r2, r3]
 8002f12:	e01d      	b.n	8002f50 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002f14:	88fa      	ldrh	r2, [r7, #6]
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	b298      	uxth	r0, r3
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	01db      	lsls	r3, r3, #7
 8002f20:	4413      	add	r3, r2
 8002f22:	4a0f      	ldr	r2, [pc, #60]	@ (8002f60 <SSD1306_DrawPixel+0xbc>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	b25a      	sxtb	r2, r3
 8002f28:	88bb      	ldrh	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	b259      	sxtb	r1, r3
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	4603      	mov	r3, r0
 8002f42:	01db      	lsls	r3, r3, #7
 8002f44:	4413      	add	r3, r2
 8002f46:	b2c9      	uxtb	r1, r1
 8002f48:	4a05      	ldr	r2, [pc, #20]	@ (8002f60 <SSD1306_DrawPixel+0xbc>)
 8002f4a:	54d1      	strb	r1, [r2, r3]
 8002f4c:	e000      	b.n	8002f50 <SSD1306_DrawPixel+0xac>
		return;
 8002f4e:	bf00      	nop
	}
}
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000874 	.word	0x20000874
 8002f60:	20000674 	.word	0x20000674

08002f64 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	80fb      	strh	r3, [r7, #6]
 8002f70:	4613      	mov	r3, r2
 8002f72:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002f74:	4a05      	ldr	r2, [pc, #20]	@ (8002f8c <SSD1306_GotoXY+0x28>)
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <SSD1306_GotoXY+0x28>)
 8002f7c:	88bb      	ldrh	r3, [r7, #4]
 8002f7e:	8053      	strh	r3, [r2, #2]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	20000874 	.word	0x20000874

08002f90 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002fa0:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <SSD1306_Putc+0xf8>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
	if (
 8002fac:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fae:	dc07      	bgt.n	8002fc0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002fb0:	4b35      	ldr	r3, [pc, #212]	@ (8003088 <SSD1306_Putc+0xf8>)
 8002fb2:	885b      	ldrh	r3, [r3, #2]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002fbc:	2b1f      	cmp	r3, #31
 8002fbe:	dd01      	ble.n	8002fc4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e05d      	b.n	8003080 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e04b      	b.n	8003062 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	3b20      	subs	r3, #32
 8002fd2:	6839      	ldr	r1, [r7, #0]
 8002fd4:	7849      	ldrb	r1, [r1, #1]
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4619      	mov	r1, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	440b      	add	r3, r1
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e030      	b.n	8003050 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002ffe:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <SSD1306_Putc+0xf8>)
 8003000:	881a      	ldrh	r2, [r3, #0]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	b29b      	uxth	r3, r3
 8003006:	4413      	add	r3, r2
 8003008:	b298      	uxth	r0, r3
 800300a:	4b1f      	ldr	r3, [pc, #124]	@ (8003088 <SSD1306_Putc+0xf8>)
 800300c:	885a      	ldrh	r2, [r3, #2]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4413      	add	r3, r2
 8003014:	b29b      	uxth	r3, r3
 8003016:	79ba      	ldrb	r2, [r7, #6]
 8003018:	4619      	mov	r1, r3
 800301a:	f7ff ff43 	bl	8002ea4 <SSD1306_DrawPixel>
 800301e:	e014      	b.n	800304a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <SSD1306_Putc+0xf8>)
 8003022:	881a      	ldrh	r2, [r3, #0]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4413      	add	r3, r2
 800302a:	b298      	uxth	r0, r3
 800302c:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <SSD1306_Putc+0xf8>)
 800302e:	885a      	ldrh	r2, [r3, #2]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4413      	add	r3, r2
 8003036:	b299      	uxth	r1, r3
 8003038:	79bb      	ldrb	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	f7ff ff2d 	bl	8002ea4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4293      	cmp	r3, r2
 800305a:	d3c8      	bcc.n	8002fee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3301      	adds	r3, #1
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	461a      	mov	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4293      	cmp	r3, r2
 800306c:	d3ad      	bcc.n	8002fca <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <SSD1306_Putc+0xf8>)
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	4413      	add	r3, r2
 8003078:	b29a      	uxth	r2, r3
 800307a:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <SSD1306_Putc+0xf8>)
 800307c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800307e:	79fb      	ldrb	r3, [r7, #7]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000874 	.word	0x20000874

0800308c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800309a:	e012      	b.n	80030c2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	79fa      	ldrb	r2, [r7, #7]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff73 	bl	8002f90 <SSD1306_Putc>
 80030aa:	4603      	mov	r3, r0
 80030ac:	461a      	mov	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d002      	beq.n	80030bc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	e008      	b.n	80030ce <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3301      	adds	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e8      	bne.n	800309c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	781b      	ldrb	r3, [r3, #0]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80030d6:	b590      	push	{r4, r7, lr}
 80030d8:	b087      	sub	sp, #28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4604      	mov	r4, r0
 80030de:	4608      	mov	r0, r1
 80030e0:	4611      	mov	r1, r2
 80030e2:	461a      	mov	r2, r3
 80030e4:	4623      	mov	r3, r4
 80030e6:	80fb      	strh	r3, [r7, #6]
 80030e8:	4603      	mov	r3, r0
 80030ea:	80bb      	strh	r3, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80030f8:	d901      	bls.n	80030fe <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80030fa:	237f      	movs	r3, #127	@ 0x7f
 80030fc:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	2b7f      	cmp	r3, #127	@ 0x7f
 8003102:	d901      	bls.n	8003108 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8003104:	237f      	movs	r3, #127	@ 0x7f
 8003106:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8003108:	88bb      	ldrh	r3, [r7, #4]
 800310a:	2b1f      	cmp	r3, #31
 800310c:	d901      	bls.n	8003112 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800310e:	231f      	movs	r3, #31
 8003110:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003112:	883b      	ldrh	r3, [r7, #0]
 8003114:	2b1f      	cmp	r3, #31
 8003116:	d901      	bls.n	800311c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8003118:	231f      	movs	r3, #31
 800311a:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 800311c:	88fa      	ldrh	r2, [r7, #6]
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	429a      	cmp	r2, r3
 8003122:	d205      	bcs.n	8003130 <SSD1306_DrawLine+0x5a>
 8003124:	887a      	ldrh	r2, [r7, #2]
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	b29b      	uxth	r3, r3
 800312c:	b21b      	sxth	r3, r3
 800312e:	e004      	b.n	800313a <SSD1306_DrawLine+0x64>
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	b29b      	uxth	r3, r3
 8003138:	b21b      	sxth	r3, r3
 800313a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 800313c:	88ba      	ldrh	r2, [r7, #4]
 800313e:	883b      	ldrh	r3, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d205      	bcs.n	8003150 <SSD1306_DrawLine+0x7a>
 8003144:	883a      	ldrh	r2, [r7, #0]
 8003146:	88bb      	ldrh	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	b29b      	uxth	r3, r3
 800314c:	b21b      	sxth	r3, r3
 800314e:	e004      	b.n	800315a <SSD1306_DrawLine+0x84>
 8003150:	88ba      	ldrh	r2, [r7, #4]
 8003152:	883b      	ldrh	r3, [r7, #0]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	b29b      	uxth	r3, r3
 8003158:	b21b      	sxth	r3, r3
 800315a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	887b      	ldrh	r3, [r7, #2]
 8003160:	429a      	cmp	r2, r3
 8003162:	d201      	bcs.n	8003168 <SSD1306_DrawLine+0x92>
 8003164:	2301      	movs	r3, #1
 8003166:	e001      	b.n	800316c <SSD1306_DrawLine+0x96>
 8003168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800316c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 800316e:	88ba      	ldrh	r2, [r7, #4]
 8003170:	883b      	ldrh	r3, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d201      	bcs.n	800317a <SSD1306_DrawLine+0xa4>
 8003176:	2301      	movs	r3, #1
 8003178:	e001      	b.n	800317e <SSD1306_DrawLine+0xa8>
 800317a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800317e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8003180:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003184:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	dd06      	ble.n	800319a <SSD1306_DrawLine+0xc4>
 800318c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003190:	0fda      	lsrs	r2, r3, #31
 8003192:	4413      	add	r3, r2
 8003194:	105b      	asrs	r3, r3, #1
 8003196:	b21b      	sxth	r3, r3
 8003198:	e006      	b.n	80031a8 <SSD1306_DrawLine+0xd2>
 800319a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800319e:	0fda      	lsrs	r2, r3, #31
 80031a0:	4413      	add	r3, r2
 80031a2:	105b      	asrs	r3, r3, #1
 80031a4:	425b      	negs	r3, r3
 80031a6:	b21b      	sxth	r3, r3
 80031a8:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80031aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d129      	bne.n	8003206 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80031b2:	883a      	ldrh	r2, [r7, #0]
 80031b4:	88bb      	ldrh	r3, [r7, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d205      	bcs.n	80031c6 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80031ba:	883b      	ldrh	r3, [r7, #0]
 80031bc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80031c2:	893b      	ldrh	r3, [r7, #8]
 80031c4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d205      	bcs.n	80031da <SSD1306_DrawLine+0x104>
			tmp = x1;
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80031d6:	893b      	ldrh	r3, [r7, #8]
 80031d8:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80031da:	88bb      	ldrh	r3, [r7, #4]
 80031dc:	82bb      	strh	r3, [r7, #20]
 80031de:	e00c      	b.n	80031fa <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80031e0:	8ab9      	ldrh	r1, [r7, #20]
 80031e2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fe5b 	bl	8002ea4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80031ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	82bb      	strh	r3, [r7, #20]
 80031fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80031fe:	883b      	ldrh	r3, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	dded      	ble.n	80031e0 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8003204:	e05f      	b.n	80032c6 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8003206:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d129      	bne.n	8003262 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800320e:	883a      	ldrh	r2, [r7, #0]
 8003210:	88bb      	ldrh	r3, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	d205      	bcs.n	8003222 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8003216:	883b      	ldrh	r3, [r7, #0]
 8003218:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800321a:	88bb      	ldrh	r3, [r7, #4]
 800321c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800321e:	893b      	ldrh	r3, [r7, #8]
 8003220:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	429a      	cmp	r2, r3
 8003228:	d205      	bcs.n	8003236 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003232:	893b      	ldrh	r3, [r7, #8]
 8003234:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	82bb      	strh	r3, [r7, #20]
 800323a:	e00c      	b.n	8003256 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 800323c:	8abb      	ldrh	r3, [r7, #20]
 800323e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003242:	88b9      	ldrh	r1, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fe2d 	bl	8002ea4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800324a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800324e:	b29b      	uxth	r3, r3
 8003250:	3301      	adds	r3, #1
 8003252:	b29b      	uxth	r3, r3
 8003254:	82bb      	strh	r3, [r7, #20]
 8003256:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	429a      	cmp	r2, r3
 800325e:	dded      	ble.n	800323c <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8003260:	e031      	b.n	80032c6 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8003262:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003266:	88b9      	ldrh	r1, [r7, #4]
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fe1a 	bl	8002ea4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	429a      	cmp	r2, r3
 8003276:	d103      	bne.n	8003280 <SSD1306_DrawLine+0x1aa>
 8003278:	88ba      	ldrh	r2, [r7, #4]
 800327a:	883b      	ldrh	r3, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d021      	beq.n	80032c4 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8003280:	8afb      	ldrh	r3, [r7, #22]
 8003282:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8003284:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003288:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800328c:	425b      	negs	r3, r3
 800328e:	429a      	cmp	r2, r3
 8003290:	dd08      	ble.n	80032a4 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8003292:	8afa      	ldrh	r2, [r7, #22]
 8003294:	8a3b      	ldrh	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	b29b      	uxth	r3, r3
 800329a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800329c:	89fa      	ldrh	r2, [r7, #14]
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	4413      	add	r3, r2
 80032a2:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 80032a4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80032a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	dad8      	bge.n	8003262 <SSD1306_DrawLine+0x18c>
			err += dx;
 80032b0:	8afa      	ldrh	r2, [r7, #22]
 80032b2:	8a7b      	ldrh	r3, [r7, #18]
 80032b4:	4413      	add	r3, r2
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80032ba:	89ba      	ldrh	r2, [r7, #12]
 80032bc:	88bb      	ldrh	r3, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80032c2:	e7ce      	b.n	8003262 <SSD1306_DrawLine+0x18c>
			break;
 80032c4:	bf00      	nop
		}
	}
}
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}

080032cc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80032d2:	4b08      	ldr	r3, [pc, #32]	@ (80032f4 <ssd1306_I2C_Init+0x28>)
 80032d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032d6:	e002      	b.n	80032de <ssd1306_I2C_Init+0x12>
		p--;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f9      	bne.n	80032d8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	0003d090 	.word	0x0003d090

080032f8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b0c7      	sub	sp, #284	@ 0x11c
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	4604      	mov	r4, r0
 8003300:	4608      	mov	r0, r1
 8003302:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003306:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800330a:	600a      	str	r2, [r1, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003312:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003316:	4622      	mov	r2, r4
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800331e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003322:	4602      	mov	r2, r0
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800332a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800332e:	460a      	mov	r2, r1
 8003330:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003332:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800333a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800333e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800334c:	e015      	b.n	800337a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800334e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003352:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003356:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	441a      	add	r2, r3
 800335e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003362:	3301      	adds	r3, #1
 8003364:	7811      	ldrb	r1, [r2, #0]
 8003366:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800336a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800336e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003370:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003374:	3301      	adds	r3, #1
 8003376:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800337a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800337e:	b29b      	uxth	r3, r3
 8003380:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003384:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003388:	8812      	ldrh	r2, [r2, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d8df      	bhi.n	800334e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800338e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003392:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b299      	uxth	r1, r3
 800339a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800339e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f107 020c 	add.w	r2, r7, #12
 80033ac:	200a      	movs	r0, #10
 80033ae:	9000      	str	r0, [sp, #0]
 80033b0:	4803      	ldr	r0, [pc, #12]	@ (80033c0 <ssd1306_I2C_WriteMulti+0xc8>)
 80033b2:	f002 f9e3 	bl	800577c <HAL_I2C_Master_Transmit>
}
 80033b6:	bf00      	nop
 80033b8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}
 80033c0:	200004a4 	.word	0x200004a4

080033c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
 80033ce:	460b      	mov	r3, r1
 80033d0:	71bb      	strb	r3, [r7, #6]
 80033d2:	4613      	mov	r3, r2
 80033d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80033d6:	79bb      	ldrb	r3, [r7, #6]
 80033d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80033da:	797b      	ldrb	r3, [r7, #5]
 80033dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	b299      	uxth	r1, r3
 80033e2:	f107 020c 	add.w	r2, r7, #12
 80033e6:	230a      	movs	r3, #10
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2302      	movs	r3, #2
 80033ec:	4803      	ldr	r0, [pc, #12]	@ (80033fc <ssd1306_I2C_Write+0x38>)
 80033ee:	f002 f9c5 	bl	800577c <HAL_I2C_Master_Transmit>
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200004a4 	.word	0x200004a4

08003400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <HAL_MspInit+0x4c>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	4a0f      	ldr	r2, [pc, #60]	@ (800344c <HAL_MspInit+0x4c>)
 8003410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003414:	6453      	str	r3, [r2, #68]	@ 0x44
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <HAL_MspInit+0x4c>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341e:	607b      	str	r3, [r7, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_MspInit+0x4c>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <HAL_MspInit+0x4c>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	@ 0x40
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_MspInit+0x4c>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800

08003450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a33      	ldr	r2, [pc, #204]	@ (800353c <HAL_ADC_MspInit+0xec>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d160      	bne.n	8003534 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <HAL_ADC_MspInit+0xf0>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	4a31      	ldr	r2, [pc, #196]	@ (8003540 <HAL_ADC_MspInit+0xf0>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003480:	6453      	str	r3, [r2, #68]	@ 0x44
 8003482:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_ADC_MspInit+0xf0>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_ADC_MspInit+0xf0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	4a2a      	ldr	r2, [pc, #168]	@ (8003540 <HAL_ADC_MspInit+0xf0>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6313      	str	r3, [r2, #48]	@ 0x30
 800349e:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <HAL_ADC_MspInit+0xf0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = MUX5_Pin|MUX4_Pin|MUX3_Pin|MUX2_Pin
 80034aa:	233f      	movs	r3, #63	@ 0x3f
 80034ac:	617b      	str	r3, [r7, #20]
                          |MUX1_Pin|MUX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ae:	2303      	movs	r3, #3
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	4821      	ldr	r0, [pc, #132]	@ (8003544 <HAL_ADC_MspInit+0xf4>)
 80034be:	f001 fe63 	bl	8005188 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80034c2:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034c4:	4a21      	ldr	r2, [pc, #132]	@ (800354c <HAL_ADC_MspInit+0xfc>)
 80034c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034da:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034e2:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034ea:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 8003502:	2204      	movs	r2, #4
 8003504:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003506:	4b10      	ldr	r3, [pc, #64]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 8003508:	2203      	movs	r2, #3
 800350a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800350c:	4b0e      	ldr	r3, [pc, #56]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 800350e:	2200      	movs	r2, #0
 8003510:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003512:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003518:	480b      	ldr	r0, [pc, #44]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 800351a:	f000 ffad 	bl	8004478 <HAL_DMA_Init>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8003524:	f7ff fb46 	bl	8002bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a07      	ldr	r2, [pc, #28]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
 800352e:	4a06      	ldr	r2, [pc, #24]	@ (8003548 <HAL_ADC_MspInit+0xf8>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003534:	bf00      	nop
 8003536:	3728      	adds	r7, #40	@ 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40012000 	.word	0x40012000
 8003540:	40023800 	.word	0x40023800
 8003544:	40020000 	.word	0x40020000
 8003548:	20000444 	.word	0x20000444
 800354c:	40026470 	.word	0x40026470

08003550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a34      	ldr	r2, [pc, #208]	@ (8003640 <HAL_I2C_MspInit+0xf0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d162      	bne.n	8003638 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b33      	ldr	r3, [pc, #204]	@ (8003644 <HAL_I2C_MspInit+0xf4>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	4a32      	ldr	r2, [pc, #200]	@ (8003644 <HAL_I2C_MspInit+0xf4>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	6313      	str	r3, [r2, #48]	@ 0x30
 8003582:	4b30      	ldr	r3, [pc, #192]	@ (8003644 <HAL_I2C_MspInit+0xf4>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800358e:	23c0      	movs	r3, #192	@ 0xc0
 8003590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003592:	2312      	movs	r3, #18
 8003594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800359e:	2304      	movs	r3, #4
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	4827      	ldr	r0, [pc, #156]	@ (8003648 <HAL_I2C_MspInit+0xf8>)
 80035aa:	f001 fded 	bl	8005188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <HAL_I2C_MspInit+0xf4>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	4a23      	ldr	r2, [pc, #140]	@ (8003644 <HAL_I2C_MspInit+0xf4>)
 80035b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035be:	4b21      	ldr	r3, [pc, #132]	@ (8003644 <HAL_I2C_MspInit+0xf4>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80035ca:	4b20      	ldr	r3, [pc, #128]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 80035cc:	4a20      	ldr	r2, [pc, #128]	@ (8003650 <HAL_I2C_MspInit+0x100>)
 80035ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80035d0:	4b1e      	ldr	r3, [pc, #120]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 80035d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035d8:	4b1c      	ldr	r3, [pc, #112]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 80035da:	2240      	movs	r2, #64	@ 0x40
 80035dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035de:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035e4:	4b19      	ldr	r3, [pc, #100]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 80035e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ec:	4b17      	ldr	r3, [pc, #92]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035f2:	4b16      	ldr	r3, [pc, #88]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80035f8:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035fe:	4b13      	ldr	r3, [pc, #76]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 8003600:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003604:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003606:	4b11      	ldr	r3, [pc, #68]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 8003608:	2200      	movs	r2, #0
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800360c:	480f      	ldr	r0, [pc, #60]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 800360e:	f000 ff33 	bl	8004478 <HAL_DMA_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003618:	f7ff facc 	bl	8002bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0b      	ldr	r2, [pc, #44]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34
 8003622:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <HAL_I2C_MspInit+0xfc>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	201f      	movs	r0, #31
 800362e:	f000 feec 	bl	800440a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003632:	201f      	movs	r0, #31
 8003634:	f000 ff05 	bl	8004442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003638:	bf00      	nop
 800363a:	3728      	adds	r7, #40	@ 0x28
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40005400 	.word	0x40005400
 8003644:	40023800 	.word	0x40023800
 8003648:	40020400 	.word	0x40020400
 800364c:	200004f8 	.word	0x200004f8
 8003650:	400260a0 	.word	0x400260a0

08003654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a23      	ldr	r2, [pc, #140]	@ (80036f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d13f      	bne.n	80036e6 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b22      	ldr	r3, [pc, #136]	@ (80036f4 <HAL_TIM_Base_MspInit+0xa0>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <HAL_TIM_Base_MspInit+0xa0>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6453      	str	r3, [r2, #68]	@ 0x44
 8003676:	4b1f      	ldr	r3, [pc, #124]	@ (80036f4 <HAL_TIM_Base_MspInit+0xa0>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8003682:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 8003684:	4a1d      	ldr	r2, [pc, #116]	@ (80036fc <HAL_TIM_Base_MspInit+0xa8>)
 8003686:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8003688:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 800368a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800368e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003690:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 8003692:	2240      	movs	r2, #64	@ 0x40
 8003694:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003696:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 8003698:	2200      	movs	r2, #0
 800369a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800369c:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 800369e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036a2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036a4:	4b14      	ldr	r3, [pc, #80]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036aa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036ac:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036b2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 80036b4:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036ba:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036bc:	4b0e      	ldr	r3, [pc, #56]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036c2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c4:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80036ca:	480b      	ldr	r0, [pc, #44]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036cc:	f000 fed4 	bl	8004478 <HAL_DMA_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80036d6:	f7ff fa6d 	bl	8002bb4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a06      	ldr	r2, [pc, #24]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e0:	4a05      	ldr	r2, [pc, #20]	@ (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40023800 	.word	0x40023800
 80036f8:	200005e8 	.word	0x200005e8
 80036fc:	40026440 	.word	0x40026440

08003700 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	@ 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a19      	ldr	r2, [pc, #100]	@ (8003784 <HAL_TIM_Encoder_MspInit+0x84>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d12b      	bne.n	800377a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	4b18      	ldr	r3, [pc, #96]	@ (8003788 <HAL_TIM_Encoder_MspInit+0x88>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <HAL_TIM_Encoder_MspInit+0x88>)
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	6413      	str	r3, [r2, #64]	@ 0x40
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_TIM_Encoder_MspInit+0x88>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <HAL_TIM_Encoder_MspInit+0x88>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	4a10      	ldr	r2, [pc, #64]	@ (8003788 <HAL_TIM_Encoder_MspInit+0x88>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	@ 0x30
 800374e:	4b0e      	ldr	r3, [pc, #56]	@ (8003788 <HAL_TIM_Encoder_MspInit+0x88>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin;
 800375a:	23c0      	movs	r3, #192	@ 0xc0
 800375c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800375e:	2312      	movs	r3, #18
 8003760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003766:	2303      	movs	r3, #3
 8003768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800376a:	2302      	movs	r3, #2
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376e:	f107 0314 	add.w	r3, r7, #20
 8003772:	4619      	mov	r1, r3
 8003774:	4805      	ldr	r0, [pc, #20]	@ (800378c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003776:	f001 fd07 	bl	8005188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800377a:	bf00      	nop
 800377c:	3728      	adds	r7, #40	@ 0x28
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40000400 	.word	0x40000400
 8003788:	40023800 	.word	0x40023800
 800378c:	40020000 	.word	0x40020000

08003790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 030c 	add.w	r3, r7, #12
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a12      	ldr	r2, [pc, #72]	@ (80037f8 <HAL_TIM_MspPostInit+0x68>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d11e      	bne.n	80037f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_TIM_MspPostInit+0x6c>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	4a10      	ldr	r2, [pc, #64]	@ (80037fc <HAL_TIM_MspPostInit+0x6c>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c2:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <HAL_TIM_MspPostInit+0x6c>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ARGB_Pin;
 80037ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037d4:	2312      	movs	r3, #18
 80037d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037dc:	2303      	movs	r3, #3
 80037de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037e0:	2301      	movs	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARGB_GPIO_Port, &GPIO_InitStruct);
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	4619      	mov	r1, r3
 80037ea:	4805      	ldr	r0, [pc, #20]	@ (8003800 <HAL_TIM_MspPostInit+0x70>)
 80037ec:	f001 fccc 	bl	8005188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40023800 	.word	0x40023800
 8003800:	40020000 	.word	0x40020000

08003804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <NMI_Handler+0x4>

0800380c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <HardFault_Handler+0x4>

08003814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <MemManage_Handler+0x4>

0800381c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <BusFault_Handler+0x4>

08003824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003828:	bf00      	nop
 800382a:	e7fd      	b.n	8003828 <UsageFault_Handler+0x4>

0800382c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800385a:	f000 f8f9 	bl	8003a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003868:	4802      	ldr	r0, [pc, #8]	@ (8003874 <DMA1_Stream6_IRQHandler+0x10>)
 800386a:	f000 ff2d 	bl	80046c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200004f8 	.word	0x200004f8

08003878 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800387c:	4802      	ldr	r0, [pc, #8]	@ (8003888 <I2C1_EV_IRQHandler+0x10>)
 800387e:	f002 f9a9 	bl	8005bd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200004a4 	.word	0x200004a4

0800388c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8003890:	4802      	ldr	r0, [pc, #8]	@ (800389c <DMA2_Stream2_IRQHandler+0x10>)
 8003892:	f000 ff19 	bl	80046c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200005e8 	.word	0x200005e8

080038a0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038a4:	4802      	ldr	r0, [pc, #8]	@ (80038b0 <DMA2_Stream4_IRQHandler+0x10>)
 80038a6:	f000 ff0f 	bl	80046c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000444 	.word	0x20000444

080038b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80038b8:	4802      	ldr	r0, [pc, #8]	@ (80038c4 <OTG_FS_IRQHandler+0x10>)
 80038ba:	f004 f889 	bl	80079d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000d84 	.word	0x20000d84

080038c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d0:	4a14      	ldr	r2, [pc, #80]	@ (8003924 <_sbrk+0x5c>)
 80038d2:	4b15      	ldr	r3, [pc, #84]	@ (8003928 <_sbrk+0x60>)
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038dc:	4b13      	ldr	r3, [pc, #76]	@ (800392c <_sbrk+0x64>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e4:	4b11      	ldr	r3, [pc, #68]	@ (800392c <_sbrk+0x64>)
 80038e6:	4a12      	ldr	r2, [pc, #72]	@ (8003930 <_sbrk+0x68>)
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ea:	4b10      	ldr	r3, [pc, #64]	@ (800392c <_sbrk+0x64>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d207      	bcs.n	8003908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f8:	f00a fa30 	bl	800dd5c <__errno>
 80038fc:	4603      	mov	r3, r0
 80038fe:	220c      	movs	r2, #12
 8003900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003906:	e009      	b.n	800391c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003908:	4b08      	ldr	r3, [pc, #32]	@ (800392c <_sbrk+0x64>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800390e:	4b07      	ldr	r3, [pc, #28]	@ (800392c <_sbrk+0x64>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	4a05      	ldr	r2, [pc, #20]	@ (800392c <_sbrk+0x64>)
 8003918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800391a:	68fb      	ldr	r3, [r7, #12]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20020000 	.word	0x20020000
 8003928:	00000400 	.word	0x00000400
 800392c:	2000087c 	.word	0x2000087c
 8003930:	200013f0 	.word	0x200013f0

08003934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <SystemInit+0x20>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393e:	4a05      	ldr	r2, [pc, #20]	@ (8003954 <SystemInit+0x20>)
 8003940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800395c:	480d      	ldr	r0, [pc, #52]	@ (8003994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800395e:	490e      	ldr	r1, [pc, #56]	@ (8003998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003960:	4a0e      	ldr	r2, [pc, #56]	@ (800399c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003964:	e002      	b.n	800396c <LoopCopyDataInit>

08003966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396a:	3304      	adds	r3, #4

0800396c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800396c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800396e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003970:	d3f9      	bcc.n	8003966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003972:	4a0b      	ldr	r2, [pc, #44]	@ (80039a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003974:	4c0b      	ldr	r4, [pc, #44]	@ (80039a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003978:	e001      	b.n	800397e <LoopFillZerobss>

0800397a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800397c:	3204      	adds	r2, #4

0800397e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800397e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003980:	d3fb      	bcc.n	800397a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003982:	f7ff ffd7 	bl	8003934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003986:	f00a f9ef 	bl	800dd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800398a:	f7fd fefb 	bl	8001784 <main>
  bx  lr    
 800398e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003998:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800399c:	0800f158 	.word	0x0800f158
  ldr r2, =_sbss
 80039a0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80039a4:	200013ec 	.word	0x200013ec

080039a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039a8:	e7fe      	b.n	80039a8 <ADC_IRQHandler>
	...

080039ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039b0:	4b0e      	ldr	r3, [pc, #56]	@ (80039ec <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0d      	ldr	r2, [pc, #52]	@ (80039ec <HAL_Init+0x40>)
 80039b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039bc:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <HAL_Init+0x40>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0a      	ldr	r2, [pc, #40]	@ (80039ec <HAL_Init+0x40>)
 80039c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c8:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <HAL_Init+0x40>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a07      	ldr	r2, [pc, #28]	@ (80039ec <HAL_Init+0x40>)
 80039ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d4:	2003      	movs	r0, #3
 80039d6:	f000 fd0d 	bl	80043f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039da:	200f      	movs	r0, #15
 80039dc:	f000 f808 	bl	80039f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039e0:	f7ff fd0e 	bl	8003400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023c00 	.word	0x40023c00

080039f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <HAL_InitTick+0x54>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <HAL_InitTick+0x58>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fd25 	bl	800445e <HAL_SYSTICK_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00e      	b.n	8003a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d80a      	bhi.n	8003a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a24:	2200      	movs	r2, #0
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a2c:	f000 fced 	bl	800440a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a30:	4a06      	ldr	r2, [pc, #24]	@ (8003a4c <HAL_InitTick+0x5c>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000000c 	.word	0x2000000c
 8003a48:	20000014 	.word	0x20000014
 8003a4c:	20000010 	.word	0x20000010

08003a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_IncTick+0x20>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_IncTick+0x24>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a04      	ldr	r2, [pc, #16]	@ (8003a74 <HAL_IncTick+0x24>)
 8003a62:	6013      	str	r3, [r2, #0]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000014 	.word	0x20000014
 8003a74:	20000880 	.word	0x20000880

08003a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <HAL_GetTick+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000880 	.word	0x20000880

08003a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7ff ffee 	bl	8003a78 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aa8:	d005      	beq.n	8003ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <HAL_Delay+0x44>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ab6:	bf00      	nop
 8003ab8:	f7ff ffde 	bl	8003a78 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d8f7      	bhi.n	8003ab8 <HAL_Delay+0x28>
  {
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000014 	.word	0x20000014

08003ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e033      	b.n	8003b56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fcaa 	bl	8003450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d118      	bne.n	8003b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b1e:	f023 0302 	bic.w	r3, r3, #2
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa96 	bl	800405c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b46:	e001      	b.n	8003b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_Start+0x1a>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e097      	b.n	8003caa <HAL_ADC_Start+0x14a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d018      	beq.n	8003bc2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba0:	4b45      	ldr	r3, [pc, #276]	@ (8003cb8 <HAL_ADC_Start+0x158>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a45      	ldr	r2, [pc, #276]	@ (8003cbc <HAL_ADC_Start+0x15c>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0c9a      	lsrs	r2, r3, #18
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003bb4:	e002      	b.n	8003bbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f9      	bne.n	8003bb6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d15f      	bne.n	8003c90 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bfa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c0e:	d106      	bne.n	8003c1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c14:	f023 0206 	bic.w	r2, r3, #6
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c1c:	e002      	b.n	8003c24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c2c:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_ADC_Start+0x160>)
 8003c2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003c38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10f      	bne.n	8003c66 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d129      	bne.n	8003ca8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	e020      	b.n	8003ca8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <HAL_ADC_Start+0x164>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d11b      	bne.n	8003ca8 <HAL_ADC_Start+0x148>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d114      	bne.n	8003ca8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c8c:	609a      	str	r2, [r3, #8]
 8003c8e:	e00b      	b.n	8003ca8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	f043 0210 	orr.w	r2, r3, #16
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	2000000c 	.word	0x2000000c
 8003cbc:	431bde83 	.word	0x431bde83
 8003cc0:	40012300 	.word	0x40012300
 8003cc4:	40012000 	.word	0x40012000

08003cc8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce4:	d113      	bne.n	8003d0e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf4:	d10b      	bne.n	8003d0e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e063      	b.n	8003dd6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003d0e:	f7ff feb3 	bl	8003a78 <HAL_GetTick>
 8003d12:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d14:	e021      	b.n	8003d5a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d1c:	d01d      	beq.n	8003d5a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_ADC_PollForConversion+0x6c>
 8003d24:	f7ff fea8 	bl	8003a78 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d212      	bcs.n	8003d5a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d00b      	beq.n	8003d5a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e03d      	b.n	8003dd6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d1d6      	bne.n	8003d16 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0212 	mvn.w	r2, #18
 8003d70:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d123      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d11f      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d006      	beq.n	8003db0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x1c>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e113      	b.n	800403c <HAL_ADC_ConfigChannel+0x244>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b09      	cmp	r3, #9
 8003e22:	d925      	bls.n	8003e70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68d9      	ldr	r1, [r3, #12]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	4613      	mov	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4413      	add	r3, r2
 8003e38:	3b1e      	subs	r3, #30
 8003e3a:	2207      	movs	r2, #7
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43da      	mvns	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	400a      	ands	r2, r1
 8003e48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68d9      	ldr	r1, [r3, #12]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4403      	add	r3, r0
 8003e62:	3b1e      	subs	r3, #30
 8003e64:	409a      	lsls	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	e022      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6919      	ldr	r1, [r3, #16]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	2207      	movs	r2, #7
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	400a      	ands	r2, r1
 8003e92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4403      	add	r3, r0
 8003eac:	409a      	lsls	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d824      	bhi.n	8003f08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	3b05      	subs	r3, #5
 8003ed0:	221f      	movs	r2, #31
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	400a      	ands	r2, r1
 8003ede:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4618      	mov	r0, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3b05      	subs	r3, #5
 8003efa:	fa00 f203 	lsl.w	r2, r0, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f06:	e04c      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b0c      	cmp	r3, #12
 8003f0e:	d824      	bhi.n	8003f5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	3b23      	subs	r3, #35	@ 0x23
 8003f22:	221f      	movs	r2, #31
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	400a      	ands	r2, r1
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	4618      	mov	r0, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	3b23      	subs	r3, #35	@ 0x23
 8003f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f58:	e023      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	3b41      	subs	r3, #65	@ 0x41
 8003f6c:	221f      	movs	r2, #31
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43da      	mvns	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	400a      	ands	r2, r1
 8003f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	4618      	mov	r0, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	3b41      	subs	r3, #65	@ 0x41
 8003f96:	fa00 f203 	lsl.w	r2, r0, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fa2:	4b29      	ldr	r3, [pc, #164]	@ (8004048 <HAL_ADC_ConfigChannel+0x250>)
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a28      	ldr	r2, [pc, #160]	@ (800404c <HAL_ADC_ConfigChannel+0x254>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10f      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x1d8>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b12      	cmp	r3, #18
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800404c <HAL_ADC_ConfigChannel+0x254>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d12b      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x23a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1c      	ldr	r2, [pc, #112]	@ (8004050 <HAL_ADC_ConfigChannel+0x258>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <HAL_ADC_ConfigChannel+0x1f4>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b11      	cmp	r3, #17
 8003fea:	d122      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a11      	ldr	r2, [pc, #68]	@ (8004050 <HAL_ADC_ConfigChannel+0x258>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800400e:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <HAL_ADC_ConfigChannel+0x25c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a11      	ldr	r2, [pc, #68]	@ (8004058 <HAL_ADC_ConfigChannel+0x260>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	0c9a      	lsrs	r2, r3, #18
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004024:	e002      	b.n	800402c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3b01      	subs	r3, #1
 800402a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f9      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40012300 	.word	0x40012300
 800404c:	40012000 	.word	0x40012000
 8004050:	10000012 	.word	0x10000012
 8004054:	2000000c 	.word	0x2000000c
 8004058:	431bde83 	.word	0x431bde83

0800405c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004064:	4b79      	ldr	r3, [pc, #484]	@ (800424c <ADC_Init+0x1f0>)
 8004066:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	021a      	lsls	r2, r3, #8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80040b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6859      	ldr	r1, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6899      	ldr	r1, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	4a58      	ldr	r2, [pc, #352]	@ (8004250 <ADC_Init+0x1f4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d022      	beq.n	800413a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004102:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6899      	ldr	r1, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	e00f      	b.n	800415a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004158:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0202 	bic.w	r2, r2, #2
 8004168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6899      	ldr	r1, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7e1b      	ldrb	r3, [r3, #24]
 8004174:	005a      	lsls	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01b      	beq.n	80041c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004196:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80041a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	3b01      	subs	r3, #1
 80041b4:	035a      	lsls	r2, r3, #13
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	e007      	b.n	80041d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80041de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	051a      	lsls	r2, r3, #20
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004204:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6899      	ldr	r1, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004212:	025a      	lsls	r2, r3, #9
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6899      	ldr	r1, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	029a      	lsls	r2, r3, #10
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40012300 	.word	0x40012300
 8004250:	0f000001 	.word	0x0f000001

08004254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <__NVIC_SetPriorityGrouping+0x44>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004270:	4013      	ands	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800427c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004286:	4a04      	ldr	r2, [pc, #16]	@ (8004298 <__NVIC_SetPriorityGrouping+0x44>)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	60d3      	str	r3, [r2, #12]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <__NVIC_GetPriorityGrouping+0x18>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	f003 0307 	and.w	r3, r3, #7
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	db0b      	blt.n	80042e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	f003 021f 	and.w	r2, r3, #31
 80042d0:	4907      	ldr	r1, [pc, #28]	@ (80042f0 <__NVIC_EnableIRQ+0x38>)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2001      	movs	r0, #1
 80042da:	fa00 f202 	lsl.w	r2, r0, r2
 80042de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	e000e100 	.word	0xe000e100

080042f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	6039      	str	r1, [r7, #0]
 80042fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004304:	2b00      	cmp	r3, #0
 8004306:	db0a      	blt.n	800431e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	490c      	ldr	r1, [pc, #48]	@ (8004340 <__NVIC_SetPriority+0x4c>)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	0112      	lsls	r2, r2, #4
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	440b      	add	r3, r1
 8004318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800431c:	e00a      	b.n	8004334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4908      	ldr	r1, [pc, #32]	@ (8004344 <__NVIC_SetPriority+0x50>)
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	3b04      	subs	r3, #4
 800432c:	0112      	lsls	r2, r2, #4
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	440b      	add	r3, r1
 8004332:	761a      	strb	r2, [r3, #24]
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000e100 	.word	0xe000e100
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004348:	b480      	push	{r7}
 800434a:	b089      	sub	sp, #36	@ 0x24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f1c3 0307 	rsb	r3, r3, #7
 8004362:	2b04      	cmp	r3, #4
 8004364:	bf28      	it	cs
 8004366:	2304      	movcs	r3, #4
 8004368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3304      	adds	r3, #4
 800436e:	2b06      	cmp	r3, #6
 8004370:	d902      	bls.n	8004378 <NVIC_EncodePriority+0x30>
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3b03      	subs	r3, #3
 8004376:	e000      	b.n	800437a <NVIC_EncodePriority+0x32>
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43da      	mvns	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	401a      	ands	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004390:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	43d9      	mvns	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	4313      	orrs	r3, r2
         );
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3724      	adds	r7, #36	@ 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043c0:	d301      	bcc.n	80043c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043c2:	2301      	movs	r3, #1
 80043c4:	e00f      	b.n	80043e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043c6:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <SysTick_Config+0x40>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ce:	210f      	movs	r1, #15
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043d4:	f7ff ff8e 	bl	80042f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d8:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <SysTick_Config+0x40>)
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043de:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <SysTick_Config+0x40>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	e000e010 	.word	0xe000e010

080043f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ff29 	bl	8004254 <__NVIC_SetPriorityGrouping>
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	4603      	mov	r3, r0
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800441c:	f7ff ff3e 	bl	800429c <__NVIC_GetPriorityGrouping>
 8004420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	6978      	ldr	r0, [r7, #20]
 8004428:	f7ff ff8e 	bl	8004348 <NVIC_EncodePriority>
 800442c:	4602      	mov	r2, r0
 800442e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff ff5d 	bl	80042f4 <__NVIC_SetPriority>
}
 800443a:	bf00      	nop
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	4603      	mov	r3, r0
 800444a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff ff31 	bl	80042b8 <__NVIC_EnableIRQ>
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff ffa2 	bl	80043b0 <SysTick_Config>
 800446c:	4603      	mov	r3, r0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004484:	f7ff faf8 	bl	8003a78 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e099      	b.n	80045c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b4:	e00f      	b.n	80044d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044b6:	f7ff fadf 	bl	8003a78 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d908      	bls.n	80044d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2203      	movs	r2, #3
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e078      	b.n	80045c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e8      	bne.n	80044b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4b38      	ldr	r3, [pc, #224]	@ (80045d0 <HAL_DMA_Init+0x158>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004502:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800450e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800451a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	2b04      	cmp	r3, #4
 800452e:	d107      	bne.n	8004540 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	4313      	orrs	r3, r2
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f023 0307 	bic.w	r3, r3, #7
 8004556:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	2b04      	cmp	r3, #4
 8004568:	d117      	bne.n	800459a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fa9f 	bl	8004ac0 <DMA_CheckFifoParam>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2240      	movs	r2, #64	@ 0x40
 800458c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004596:	2301      	movs	r3, #1
 8004598:	e016      	b.n	80045c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fa56 	bl	8004a54 <DMA_CalcBaseAndBitshift>
 80045a8:	4603      	mov	r3, r0
 80045aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b0:	223f      	movs	r2, #63	@ 0x3f
 80045b2:	409a      	lsls	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	f010803f 	.word	0xf010803f

080045d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_DMA_Start_IT+0x26>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e040      	b.n	800467c <HAL_DMA_Start_IT+0xa8>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	d12f      	bne.n	800466e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f9e8 	bl	80049f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462c:	223f      	movs	r2, #63	@ 0x3f
 800462e:	409a      	lsls	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0216 	orr.w	r2, r2, #22
 8004642:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0208 	orr.w	r2, r2, #8
 800465a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e005      	b.n	800467a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004676:	2302      	movs	r3, #2
 8004678:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800467a:	7dfb      	ldrb	r3, [r7, #23]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d004      	beq.n	80046a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2280      	movs	r2, #128	@ 0x80
 800469c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e00c      	b.n	80046bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2205      	movs	r2, #5
 80046a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046d4:	4b8e      	ldr	r3, [pc, #568]	@ (8004910 <HAL_DMA_IRQHandler+0x248>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a8e      	ldr	r2, [pc, #568]	@ (8004914 <HAL_DMA_IRQHandler+0x24c>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	0a9b      	lsrs	r3, r3, #10
 80046e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f2:	2208      	movs	r2, #8
 80046f4:	409a      	lsls	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01a      	beq.n	8004734 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d013      	beq.n	8004734 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0204 	bic.w	r2, r2, #4
 800471a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004720:	2208      	movs	r2, #8
 8004722:	409a      	lsls	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472c:	f043 0201 	orr.w	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	2201      	movs	r2, #1
 800473a:	409a      	lsls	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d012      	beq.n	800476a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00b      	beq.n	800476a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004756:	2201      	movs	r2, #1
 8004758:	409a      	lsls	r2, r3
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004762:	f043 0202 	orr.w	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476e:	2204      	movs	r2, #4
 8004770:	409a      	lsls	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478c:	2204      	movs	r2, #4
 800478e:	409a      	lsls	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a4:	2210      	movs	r2, #16
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d043      	beq.n	8004838 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d03c      	beq.n	8004838 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c2:	2210      	movs	r2, #16
 80047c4:	409a      	lsls	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d018      	beq.n	800480a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d108      	bne.n	80047f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d024      	beq.n	8004838 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
 80047f6:	e01f      	b.n	8004838 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
 8004808:	e016      	b.n	8004838 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0208 	bic.w	r2, r2, #8
 8004826:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	2220      	movs	r2, #32
 800483e:	409a      	lsls	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 808f 	beq.w	8004968 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8087 	beq.w	8004968 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	2220      	movs	r2, #32
 8004860:	409a      	lsls	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b05      	cmp	r3, #5
 8004870:	d136      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0216 	bic.w	r2, r2, #22
 8004880:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004890:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <HAL_DMA_IRQHandler+0x1da>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0208 	bic.w	r2, r2, #8
 80048b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b6:	223f      	movs	r2, #63	@ 0x3f
 80048b8:	409a      	lsls	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d07e      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4798      	blx	r3
        }
        return;
 80048de:	e079      	b.n	80049d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01d      	beq.n	800492a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10d      	bne.n	8004918 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	2b00      	cmp	r3, #0
 8004902:	d031      	beq.n	8004968 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4798      	blx	r3
 800490c:	e02c      	b.n	8004968 <HAL_DMA_IRQHandler+0x2a0>
 800490e:	bf00      	nop
 8004910:	2000000c 	.word	0x2000000c
 8004914:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d023      	beq.n	8004968 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
 8004928:	e01e      	b.n	8004968 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10f      	bne.n	8004958 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0210 	bic.w	r2, r2, #16
 8004946:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496c:	2b00      	cmp	r3, #0
 800496e:	d032      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2205      	movs	r2, #5
 8004980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3301      	adds	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	429a      	cmp	r2, r3
 800499e:	d307      	bcc.n	80049b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f2      	bne.n	8004994 <HAL_DMA_IRQHandler+0x2cc>
 80049ae:	e000      	b.n	80049b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
 80049d2:	e000      	b.n	80049d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80049d4:	bf00      	nop
    }
  }
}
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049ea:	b2db      	uxtb	r3, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b40      	cmp	r3, #64	@ 0x40
 8004a24:	d108      	bne.n	8004a38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a36:	e007      	b.n	8004a48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	3b10      	subs	r3, #16
 8004a64:	4a14      	ldr	r2, [pc, #80]	@ (8004ab8 <DMA_CalcBaseAndBitshift+0x64>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a6e:	4a13      	ldr	r2, [pc, #76]	@ (8004abc <DMA_CalcBaseAndBitshift+0x68>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d909      	bls.n	8004a96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	1d1a      	adds	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a94:	e007      	b.n	8004aa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	aaaaaaab 	.word	0xaaaaaaab
 8004abc:	0800f10c 	.word	0x0800f10c

08004ac0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11f      	bne.n	8004b1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d856      	bhi.n	8004b8e <DMA_CheckFifoParam+0xce>
 8004ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <DMA_CheckFifoParam+0x28>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004b0b 	.word	0x08004b0b
 8004af0:	08004af9 	.word	0x08004af9
 8004af4:	08004b8f 	.word	0x08004b8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d046      	beq.n	8004b92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b08:	e043      	b.n	8004b92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b12:	d140      	bne.n	8004b96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b18:	e03d      	b.n	8004b96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b22:	d121      	bne.n	8004b68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d837      	bhi.n	8004b9a <DMA_CheckFifoParam+0xda>
 8004b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <DMA_CheckFifoParam+0x70>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b47 	.word	0x08004b47
 8004b38:	08004b41 	.word	0x08004b41
 8004b3c:	08004b59 	.word	0x08004b59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      break;
 8004b44:	e030      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d025      	beq.n	8004b9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b56:	e022      	b.n	8004b9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b60:	d11f      	bne.n	8004ba2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b66:	e01c      	b.n	8004ba2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d903      	bls.n	8004b76 <DMA_CheckFifoParam+0xb6>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d003      	beq.n	8004b7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b74:	e018      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7a:	e015      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00e      	beq.n	8004ba6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8c:	e00b      	b.n	8004ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e00a      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8004b92:	bf00      	nop
 8004b94:	e008      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8004b96:	bf00      	nop
 8004b98:	e006      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e004      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e002      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ba6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bca:	4b23      	ldr	r3, [pc, #140]	@ (8004c58 <HAL_FLASH_Program+0xa0>)
 8004bcc:	7e1b      	ldrb	r3, [r3, #24]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_FLASH_Program+0x1e>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e03b      	b.n	8004c4e <HAL_FLASH_Program+0x96>
 8004bd6:	4b20      	ldr	r3, [pc, #128]	@ (8004c58 <HAL_FLASH_Program+0xa0>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004bdc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004be0:	f000 f870 	bl	8004cc4 <FLASH_WaitForLastOperation>
 8004be4:	4603      	mov	r3, r0
 8004be6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d12b      	bne.n	8004c46 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004bf4:	783b      	ldrb	r3, [r7, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	68b8      	ldr	r0, [r7, #8]
 8004bfa:	f000 f91b 	bl	8004e34 <FLASH_Program_Byte>
 8004bfe:	e016      	b.n	8004c2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004c06:	883b      	ldrh	r3, [r7, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	68b8      	ldr	r0, [r7, #8]
 8004c0c:	f000 f8ee 	bl	8004dec <FLASH_Program_HalfWord>
 8004c10:	e00d      	b.n	8004c2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d105      	bne.n	8004c24 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	68b8      	ldr	r0, [r7, #8]
 8004c1e:	f000 f8c3 	bl	8004da8 <FLASH_Program_Word>
 8004c22:	e004      	b.n	8004c2e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c28:	68b8      	ldr	r0, [r7, #8]
 8004c2a:	f000 f88b 	bl	8004d44 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c2e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c32:	f000 f847 	bl	8004cc4 <FLASH_WaitForLastOperation>
 8004c36:	4603      	mov	r3, r0
 8004c38:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004c3a:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <HAL_FLASH_Program+0xa4>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	4a07      	ldr	r2, [pc, #28]	@ (8004c5c <HAL_FLASH_Program+0xa4>)
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c46:	4b04      	ldr	r3, [pc, #16]	@ (8004c58 <HAL_FLASH_Program+0xa0>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000884 	.word	0x20000884
 8004c5c:	40023c00 	.word	0x40023c00

08004c60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <HAL_FLASH_Unlock+0x38>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	da0b      	bge.n	8004c8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004c72:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_FLASH_Unlock+0x38>)
 8004c74:	4a09      	ldr	r2, [pc, #36]	@ (8004c9c <HAL_FLASH_Unlock+0x3c>)
 8004c76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004c78:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <HAL_FLASH_Unlock+0x38>)
 8004c7a:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <HAL_FLASH_Unlock+0x40>)
 8004c7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004c7e:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <HAL_FLASH_Unlock+0x38>)
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	da01      	bge.n	8004c8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40023c00 	.word	0x40023c00
 8004c9c:	45670123 	.word	0x45670123
 8004ca0:	cdef89ab 	.word	0xcdef89ab

08004ca4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_FLASH_Lock+0x1c>)
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	4a04      	ldr	r2, [pc, #16]	@ (8004cc0 <HAL_FLASH_Lock+0x1c>)
 8004cae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cb2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40023c00 	.word	0x40023c00

08004cc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <FLASH_WaitForLastOperation+0x78>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004cd6:	f7fe fecf 	bl	8003a78 <HAL_GetTick>
 8004cda:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004cdc:	e010      	b.n	8004d00 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ce4:	d00c      	beq.n	8004d00 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <FLASH_WaitForLastOperation+0x38>
 8004cec:	f7fe fec4 	bl	8003a78 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d201      	bcs.n	8004d00 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e019      	b.n	8004d34 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004d00:	4b0f      	ldr	r3, [pc, #60]	@ (8004d40 <FLASH_WaitForLastOperation+0x7c>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e8      	bne.n	8004cde <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <FLASH_WaitForLastOperation+0x7c>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d18:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <FLASH_WaitForLastOperation+0x7c>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004d1e:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <FLASH_WaitForLastOperation+0x7c>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004d2a:	f000 f8a5 	bl	8004e78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
  
}  
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000884 	.word	0x20000884
 8004d40:	40023c00 	.word	0x40023c00

08004d44 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d50:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <FLASH_Program_DoubleWord+0x60>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <FLASH_Program_DoubleWord+0x60>)
 8004d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004d5c:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <FLASH_Program_DoubleWord+0x60>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	4a10      	ldr	r2, [pc, #64]	@ (8004da4 <FLASH_Program_DoubleWord+0x60>)
 8004d62:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004d66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d68:	4b0e      	ldr	r3, [pc, #56]	@ (8004da4 <FLASH_Program_DoubleWord+0x60>)
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004da4 <FLASH_Program_DoubleWord+0x60>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004d7a:	f3bf 8f6f 	isb	sy
}
 8004d7e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	000a      	movs	r2, r1
 8004d8e:	2300      	movs	r3, #0
 8004d90:	68f9      	ldr	r1, [r7, #12]
 8004d92:	3104      	adds	r1, #4
 8004d94:	4613      	mov	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40023c00 	.word	0x40023c00

08004da8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004db2:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <FLASH_Program_Word+0x40>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4a0c      	ldr	r2, [pc, #48]	@ (8004de8 <FLASH_Program_Word+0x40>)
 8004db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <FLASH_Program_Word+0x40>)
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4a09      	ldr	r2, [pc, #36]	@ (8004de8 <FLASH_Program_Word+0x40>)
 8004dc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <FLASH_Program_Word+0x40>)
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	4a06      	ldr	r2, [pc, #24]	@ (8004de8 <FLASH_Program_Word+0x40>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40023c00 	.word	0x40023c00

08004dec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004df8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <FLASH_Program_HalfWord+0x44>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8004e30 <FLASH_Program_HalfWord+0x44>)
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <FLASH_Program_HalfWord+0x44>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	4a09      	ldr	r2, [pc, #36]	@ (8004e30 <FLASH_Program_HalfWord+0x44>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e10:	4b07      	ldr	r3, [pc, #28]	@ (8004e30 <FLASH_Program_HalfWord+0x44>)
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	4a06      	ldr	r2, [pc, #24]	@ (8004e30 <FLASH_Program_HalfWord+0x44>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	801a      	strh	r2, [r3, #0]
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40023c00 	.word	0x40023c00

08004e34 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e40:	4b0c      	ldr	r3, [pc, #48]	@ (8004e74 <FLASH_Program_Byte+0x40>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	4a0b      	ldr	r2, [pc, #44]	@ (8004e74 <FLASH_Program_Byte+0x40>)
 8004e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <FLASH_Program_Byte+0x40>)
 8004e4e:	4a09      	ldr	r2, [pc, #36]	@ (8004e74 <FLASH_Program_Byte+0x40>)
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e54:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <FLASH_Program_Byte+0x40>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4a06      	ldr	r2, [pc, #24]	@ (8004e74 <FLASH_Program_Byte+0x40>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	701a      	strb	r2, [r3, #0]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40023c00 	.word	0x40023c00

08004e78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004e88:	4b2d      	ldr	r3, [pc, #180]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f043 0310 	orr.w	r3, r3, #16
 8004e90:	4a2b      	ldr	r2, [pc, #172]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004e92:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004e94:	4b29      	ldr	r3, [pc, #164]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004e96:	2210      	movs	r2, #16
 8004e98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004e9a:	4b28      	ldr	r3, [pc, #160]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004ea6:	4b26      	ldr	r3, [pc, #152]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f043 0308 	orr.w	r3, r3, #8
 8004eae:	4a24      	ldr	r2, [pc, #144]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004eb0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004eb2:	4b22      	ldr	r3, [pc, #136]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004eb8:	4b20      	ldr	r3, [pc, #128]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f043 0304 	orr.w	r3, r3, #4
 8004ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004ece:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004ed2:	2240      	movs	r2, #64	@ 0x40
 8004ed4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004ed6:	4b19      	ldr	r3, [pc, #100]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004ee2:	4b17      	ldr	r3, [pc, #92]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f043 0302 	orr.w	r3, r3, #2
 8004eea:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004eec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004eee:	4b13      	ldr	r3, [pc, #76]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004ef0:	2280      	movs	r2, #128	@ 0x80
 8004ef2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004ef4:	4b11      	ldr	r3, [pc, #68]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004f00:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004f0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004f0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f12:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004f14:	4b09      	ldr	r3, [pc, #36]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004f20:	4b07      	ldr	r3, [pc, #28]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f043 0320 	orr.w	r3, r3, #32
 8004f28:	4a05      	ldr	r2, [pc, #20]	@ (8004f40 <FLASH_SetErrorCode+0xc8>)
 8004f2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004f2c:	4b03      	ldr	r3, [pc, #12]	@ (8004f3c <FLASH_SetErrorCode+0xc4>)
 8004f2e:	2202      	movs	r2, #2
 8004f30:	60da      	str	r2, [r3, #12]
  }
}
 8004f32:	bf00      	nop
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40023c00 	.word	0x40023c00
 8004f40:	20000884 	.word	0x20000884

08004f44 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f56:	4b31      	ldr	r3, [pc, #196]	@ (800501c <HAL_FLASHEx_Erase+0xd8>)
 8004f58:	7e1b      	ldrb	r3, [r3, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_FLASHEx_Erase+0x1e>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e058      	b.n	8005014 <HAL_FLASHEx_Erase+0xd0>
 8004f62:	4b2e      	ldr	r3, [pc, #184]	@ (800501c <HAL_FLASHEx_Erase+0xd8>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004f6c:	f7ff feaa 	bl	8004cc4 <FLASH_WaitForLastOperation>
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d148      	bne.n	800500c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f80:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d115      	bne.n	8004fb6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 f844 	bl	8005024 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004fa0:	f7ff fe90 	bl	8004cc4 <FLASH_WaitForLastOperation>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <HAL_FLASHEx_Erase+0xdc>)
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <HAL_FLASHEx_Erase+0xdc>)
 8004fae:	f023 0304 	bic.w	r3, r3, #4
 8004fb2:	6113      	str	r3, [r2, #16]
 8004fb4:	e028      	b.n	8005008 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	e01c      	b.n	8004ff8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	68b8      	ldr	r0, [r7, #8]
 8004fc8:	f000 f850 	bl	800506c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fcc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004fd0:	f7ff fe78 	bl	8004cc4 <FLASH_WaitForLastOperation>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004fd8:	4b11      	ldr	r3, [pc, #68]	@ (8005020 <HAL_FLASHEx_Erase+0xdc>)
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	4a10      	ldr	r2, [pc, #64]	@ (8005020 <HAL_FLASHEx_Erase+0xdc>)
 8004fde:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8004fe2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	601a      	str	r2, [r3, #0]
          break;
 8004ff0:	e00a      	b.n	8005008 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4413      	add	r3, r2
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	d3da      	bcc.n	8004fbe <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005008:	f000 f878 	bl	80050fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800500c:	4b03      	ldr	r3, [pc, #12]	@ (800501c <HAL_FLASHEx_Erase+0xd8>)
 800500e:	2200      	movs	r2, #0
 8005010:	761a      	strb	r2, [r3, #24]

  return status;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000884 	.word	0x20000884
 8005020:	40023c00 	.word	0x40023c00

08005024 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	6039      	str	r1, [r7, #0]
 800502e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005030:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <FLASH_MassErase+0x44>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	4a0c      	ldr	r2, [pc, #48]	@ (8005068 <FLASH_MassErase+0x44>)
 8005036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800503c:	4b0a      	ldr	r3, [pc, #40]	@ (8005068 <FLASH_MassErase+0x44>)
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	4a09      	ldr	r2, [pc, #36]	@ (8005068 <FLASH_MassErase+0x44>)
 8005042:	f043 0304 	orr.w	r3, r3, #4
 8005046:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005048:	4b07      	ldr	r3, [pc, #28]	@ (8005068 <FLASH_MassErase+0x44>)
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	4313      	orrs	r3, r2
 8005052:	4a05      	ldr	r2, [pc, #20]	@ (8005068 <FLASH_MassErase+0x44>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	6113      	str	r3, [r2, #16]
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40023c00 	.word	0x40023c00

0800506c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e010      	b.n	80050aa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d103      	bne.n	8005096 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800508e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e009      	b.n	80050aa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d103      	bne.n	80050a4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800509c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e002      	b.n	80050aa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80050a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80050a8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050aa:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	4a12      	ldr	r2, [pc, #72]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80050b6:	4b10      	ldr	r3, [pc, #64]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	490f      	ldr	r1, [pc, #60]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4a0c      	ldr	r2, [pc, #48]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80050cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	4a07      	ldr	r2, [pc, #28]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050da:	f043 0302 	orr.w	r3, r3, #2
 80050de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80050e0:	4b05      	ldr	r3, [pc, #20]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	4a04      	ldr	r2, [pc, #16]	@ (80050f8 <FLASH_Erase_Sector+0x8c>)
 80050e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ea:	6113      	str	r3, [r2, #16]
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40023c00 	.word	0x40023c00

080050fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005100:	4b20      	ldr	r3, [pc, #128]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005108:	2b00      	cmp	r3, #0
 800510a:	d017      	beq.n	800513c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800510c:	4b1d      	ldr	r3, [pc, #116]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005112:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005116:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005118:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a19      	ldr	r2, [pc, #100]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800511e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b17      	ldr	r3, [pc, #92]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a16      	ldr	r2, [pc, #88]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800512a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800512e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005130:	4b14      	ldr	r3, [pc, #80]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a13      	ldr	r2, [pc, #76]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800513a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800513c:	4b11      	ldr	r3, [pc, #68]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d017      	beq.n	8005178 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005148:	4b0e      	ldr	r3, [pc, #56]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0d      	ldr	r2, [pc, #52]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800514e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005152:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005154:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a0a      	ldr	r2, [pc, #40]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800515a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	4b08      	ldr	r3, [pc, #32]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a07      	ldr	r2, [pc, #28]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800516a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800516c:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <FLASH_FlushCaches+0x88>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a04      	ldr	r2, [pc, #16]	@ (8005184 <FLASH_FlushCaches+0x88>)
 8005172:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005176:	6013      	str	r3, [r2, #0]
  }
}
 8005178:	bf00      	nop
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40023c00 	.word	0x40023c00

08005188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005188:	b480      	push	{r7}
 800518a:	b089      	sub	sp, #36	@ 0x24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	e159      	b.n	8005458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051a4:	2201      	movs	r2, #1
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4013      	ands	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	429a      	cmp	r2, r3
 80051be:	f040 8148 	bne.w	8005452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d005      	beq.n	80051da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d130      	bne.n	800523c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	2203      	movs	r2, #3
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4313      	orrs	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005210:	2201      	movs	r2, #1
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 0201 	and.w	r2, r3, #1
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	2b03      	cmp	r3, #3
 8005246:	d017      	beq.n	8005278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	2203      	movs	r2, #3
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4013      	ands	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d123      	bne.n	80052cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	08da      	lsrs	r2, r3, #3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3208      	adds	r2, #8
 800528c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	220f      	movs	r2, #15
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	08da      	lsrs	r2, r3, #3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3208      	adds	r2, #8
 80052c6:	69b9      	ldr	r1, [r7, #24]
 80052c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	2203      	movs	r2, #3
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 0203 	and.w	r2, r3, #3
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80a2 	beq.w	8005452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	4b57      	ldr	r3, [pc, #348]	@ (8005470 <HAL_GPIO_Init+0x2e8>)
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	4a56      	ldr	r2, [pc, #344]	@ (8005470 <HAL_GPIO_Init+0x2e8>)
 8005318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800531c:	6453      	str	r3, [r2, #68]	@ 0x44
 800531e:	4b54      	ldr	r3, [pc, #336]	@ (8005470 <HAL_GPIO_Init+0x2e8>)
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800532a:	4a52      	ldr	r2, [pc, #328]	@ (8005474 <HAL_GPIO_Init+0x2ec>)
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	3302      	adds	r3, #2
 8005332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	220f      	movs	r2, #15
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a49      	ldr	r2, [pc, #292]	@ (8005478 <HAL_GPIO_Init+0x2f0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d019      	beq.n	800538a <HAL_GPIO_Init+0x202>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a48      	ldr	r2, [pc, #288]	@ (800547c <HAL_GPIO_Init+0x2f4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_GPIO_Init+0x1fe>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a47      	ldr	r2, [pc, #284]	@ (8005480 <HAL_GPIO_Init+0x2f8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00d      	beq.n	8005382 <HAL_GPIO_Init+0x1fa>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a46      	ldr	r2, [pc, #280]	@ (8005484 <HAL_GPIO_Init+0x2fc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <HAL_GPIO_Init+0x1f6>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a45      	ldr	r2, [pc, #276]	@ (8005488 <HAL_GPIO_Init+0x300>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d101      	bne.n	800537a <HAL_GPIO_Init+0x1f2>
 8005376:	2304      	movs	r3, #4
 8005378:	e008      	b.n	800538c <HAL_GPIO_Init+0x204>
 800537a:	2307      	movs	r3, #7
 800537c:	e006      	b.n	800538c <HAL_GPIO_Init+0x204>
 800537e:	2303      	movs	r3, #3
 8005380:	e004      	b.n	800538c <HAL_GPIO_Init+0x204>
 8005382:	2302      	movs	r3, #2
 8005384:	e002      	b.n	800538c <HAL_GPIO_Init+0x204>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <HAL_GPIO_Init+0x204>
 800538a:	2300      	movs	r3, #0
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	f002 0203 	and.w	r2, r2, #3
 8005392:	0092      	lsls	r2, r2, #2
 8005394:	4093      	lsls	r3, r2
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800539c:	4935      	ldr	r1, [pc, #212]	@ (8005474 <HAL_GPIO_Init+0x2ec>)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	089b      	lsrs	r3, r3, #2
 80053a2:	3302      	adds	r3, #2
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053aa:	4b38      	ldr	r3, [pc, #224]	@ (800548c <HAL_GPIO_Init+0x304>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	43db      	mvns	r3, r3
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	4013      	ands	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053ce:	4a2f      	ldr	r2, [pc, #188]	@ (800548c <HAL_GPIO_Init+0x304>)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053d4:	4b2d      	ldr	r3, [pc, #180]	@ (800548c <HAL_GPIO_Init+0x304>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	43db      	mvns	r3, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4013      	ands	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053f8:	4a24      	ldr	r2, [pc, #144]	@ (800548c <HAL_GPIO_Init+0x304>)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053fe:	4b23      	ldr	r3, [pc, #140]	@ (800548c <HAL_GPIO_Init+0x304>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	43db      	mvns	r3, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4013      	ands	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005422:	4a1a      	ldr	r2, [pc, #104]	@ (800548c <HAL_GPIO_Init+0x304>)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005428:	4b18      	ldr	r3, [pc, #96]	@ (800548c <HAL_GPIO_Init+0x304>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800544c:	4a0f      	ldr	r2, [pc, #60]	@ (800548c <HAL_GPIO_Init+0x304>)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3301      	adds	r3, #1
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	f67f aea2 	bls.w	80051a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	3724      	adds	r7, #36	@ 0x24
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40023800 	.word	0x40023800
 8005474:	40013800 	.word	0x40013800
 8005478:	40020000 	.word	0x40020000
 800547c:	40020400 	.word	0x40020400
 8005480:	40020800 	.word	0x40020800
 8005484:	40020c00 	.word	0x40020c00
 8005488:	40021000 	.word	0x40021000
 800548c:	40013c00 	.word	0x40013c00

08005490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	887b      	ldrh	r3, [r7, #2]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	e001      	b.n	80054b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	807b      	strh	r3, [r7, #2]
 80054cc:	4613      	mov	r3, r2
 80054ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054d0:	787b      	ldrb	r3, [r7, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054d6:	887a      	ldrh	r2, [r7, #2]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054dc:	e003      	b.n	80054e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054de:	887b      	ldrh	r3, [r7, #2]
 80054e0:	041a      	lsls	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	619a      	str	r2, [r3, #24]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e12b      	b.n	800575e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fe f818 	bl	8003550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	@ 0x24
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005558:	f003 ff80 	bl	800945c <HAL_RCC_GetPCLK1Freq>
 800555c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4a81      	ldr	r2, [pc, #516]	@ (8005768 <HAL_I2C_Init+0x274>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d807      	bhi.n	8005578 <HAL_I2C_Init+0x84>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a80      	ldr	r2, [pc, #512]	@ (800576c <HAL_I2C_Init+0x278>)
 800556c:	4293      	cmp	r3, r2
 800556e:	bf94      	ite	ls
 8005570:	2301      	movls	r3, #1
 8005572:	2300      	movhi	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e006      	b.n	8005586 <HAL_I2C_Init+0x92>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a7d      	ldr	r2, [pc, #500]	@ (8005770 <HAL_I2C_Init+0x27c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	bf94      	ite	ls
 8005580:	2301      	movls	r3, #1
 8005582:	2300      	movhi	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e0e7      	b.n	800575e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a78      	ldr	r2, [pc, #480]	@ (8005774 <HAL_I2C_Init+0x280>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	0c9b      	lsrs	r3, r3, #18
 8005598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4a6a      	ldr	r2, [pc, #424]	@ (8005768 <HAL_I2C_Init+0x274>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d802      	bhi.n	80055c8 <HAL_I2C_Init+0xd4>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	3301      	adds	r3, #1
 80055c6:	e009      	b.n	80055dc <HAL_I2C_Init+0xe8>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	4a69      	ldr	r2, [pc, #420]	@ (8005778 <HAL_I2C_Init+0x284>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	099b      	lsrs	r3, r3, #6
 80055da:	3301      	adds	r3, #1
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	495c      	ldr	r1, [pc, #368]	@ (8005768 <HAL_I2C_Init+0x274>)
 80055f8:	428b      	cmp	r3, r1
 80055fa:	d819      	bhi.n	8005630 <HAL_I2C_Init+0x13c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1e59      	subs	r1, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	fbb1 f3f3 	udiv	r3, r1, r3
 800560a:	1c59      	adds	r1, r3, #1
 800560c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005610:	400b      	ands	r3, r1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_I2C_Init+0x138>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1e59      	subs	r1, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fbb1 f3f3 	udiv	r3, r1, r3
 8005624:	3301      	adds	r3, #1
 8005626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562a:	e051      	b.n	80056d0 <HAL_I2C_Init+0x1dc>
 800562c:	2304      	movs	r3, #4
 800562e:	e04f      	b.n	80056d0 <HAL_I2C_Init+0x1dc>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d111      	bne.n	800565c <HAL_I2C_Init+0x168>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1e58      	subs	r0, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6859      	ldr	r1, [r3, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	440b      	add	r3, r1
 8005646:	fbb0 f3f3 	udiv	r3, r0, r3
 800564a:	3301      	adds	r3, #1
 800564c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e012      	b.n	8005682 <HAL_I2C_Init+0x18e>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	1e58      	subs	r0, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6859      	ldr	r1, [r3, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	0099      	lsls	r1, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005672:	3301      	adds	r3, #1
 8005674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_Init+0x196>
 8005686:	2301      	movs	r3, #1
 8005688:	e022      	b.n	80056d0 <HAL_I2C_Init+0x1dc>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10e      	bne.n	80056b0 <HAL_I2C_Init+0x1bc>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1e58      	subs	r0, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6859      	ldr	r1, [r3, #4]
 800569a:	460b      	mov	r3, r1
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	440b      	add	r3, r1
 80056a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a4:	3301      	adds	r3, #1
 80056a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ae:	e00f      	b.n	80056d0 <HAL_I2C_Init+0x1dc>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	1e58      	subs	r0, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	0099      	lsls	r1, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c6:	3301      	adds	r3, #1
 80056c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	6809      	ldr	r1, [r1, #0]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6911      	ldr	r1, [r2, #16]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68d2      	ldr	r2, [r2, #12]
 800570a:	4311      	orrs	r1, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	430b      	orrs	r3, r1
 8005712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	000186a0 	.word	0x000186a0
 800576c:	001e847f 	.word	0x001e847f
 8005770:	003d08ff 	.word	0x003d08ff
 8005774:	431bde83 	.word	0x431bde83
 8005778:	10624dd3 	.word	0x10624dd3

0800577c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	461a      	mov	r2, r3
 8005788:	460b      	mov	r3, r1
 800578a:	817b      	strh	r3, [r7, #10]
 800578c:	4613      	mov	r3, r2
 800578e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005790:	f7fe f972 	bl	8003a78 <HAL_GetTick>
 8005794:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	f040 80e0 	bne.w	8005964 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2319      	movs	r3, #25
 80057aa:	2201      	movs	r2, #1
 80057ac:	4970      	ldr	r1, [pc, #448]	@ (8005970 <HAL_I2C_Master_Transmit+0x1f4>)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f001 fdea 	bl	8007388 <I2C_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0d3      	b.n	8005966 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_I2C_Master_Transmit+0x50>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e0cc      	b.n	8005966 <HAL_I2C_Master_Transmit+0x1ea>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d007      	beq.n	80057f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0201 	orr.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005800:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2221      	movs	r2, #33	@ 0x21
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2210      	movs	r2, #16
 800580e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	893a      	ldrh	r2, [r7, #8]
 8005822:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4a50      	ldr	r2, [pc, #320]	@ (8005974 <HAL_I2C_Master_Transmit+0x1f8>)
 8005832:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005834:	8979      	ldrh	r1, [r7, #10]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	6a3a      	ldr	r2, [r7, #32]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f001 fc7a 	bl	8007134 <I2C_MasterRequestWrite>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e08d      	b.n	8005966 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584a:	2300      	movs	r3, #0
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	613b      	str	r3, [r7, #16]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005860:	e066      	b.n	8005930 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	6a39      	ldr	r1, [r7, #32]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f001 fe64 	bl	8007534 <I2C_WaitOnTXEFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	2b04      	cmp	r3, #4
 8005878:	d107      	bne.n	800588a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005888:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e06b      	b.n	8005966 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d11b      	bne.n	8005904 <HAL_I2C_Master_Transmit+0x188>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d017      	beq.n	8005904 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	6a39      	ldr	r1, [r7, #32]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f001 fe54 	bl	80075b6 <I2C_WaitOnBTFFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00d      	beq.n	8005930 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	2b04      	cmp	r3, #4
 800591a:	d107      	bne.n	800592c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800592a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e01a      	b.n	8005966 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005934:	2b00      	cmp	r3, #0
 8005936:	d194      	bne.n	8005862 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	00100002 	.word	0x00100002
 8005974:	ffff0000 	.word	0xffff0000

08005978 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	@ 0x28
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	460b      	mov	r3, r1
 8005986:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005988:	f7fe f876 	bl	8003a78 <HAL_GetTick>
 800598c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b20      	cmp	r3, #32
 800599c:	f040 8111 	bne.w	8005bc2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2319      	movs	r3, #25
 80059a6:	2201      	movs	r2, #1
 80059a8:	4988      	ldr	r1, [pc, #544]	@ (8005bcc <HAL_I2C_IsDeviceReady+0x254>)
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f001 fcec 	bl	8007388 <I2C_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80059b6:	2302      	movs	r3, #2
 80059b8:	e104      	b.n	8005bc4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_I2C_IsDeviceReady+0x50>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e0fd      	b.n	8005bc4 <HAL_I2C_IsDeviceReady+0x24c>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d007      	beq.n	80059ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2224      	movs	r2, #36	@ 0x24
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a70      	ldr	r2, [pc, #448]	@ (8005bd0 <HAL_I2C_IsDeviceReady+0x258>)
 8005a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f001 fcaa 	bl	8007388 <I2C_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a48:	d103      	bne.n	8005a52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a50:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e0b6      	b.n	8005bc4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a56:	897b      	ldrh	r3, [r7, #10]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a66:	f7fe f807 	bl	8003a78 <HAL_GetTick>
 8005a6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a9a:	e025      	b.n	8005ae8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a9c:	f7fd ffec 	bl	8003a78 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d302      	bcc.n	8005ab2 <HAL_I2C_IsDeviceReady+0x13a>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	22a0      	movs	r2, #160	@ 0xa0
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2ba0      	cmp	r3, #160	@ 0xa0
 8005af2:	d005      	beq.n	8005b00 <HAL_I2C_IsDeviceReady+0x188>
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d102      	bne.n	8005b00 <HAL_I2C_IsDeviceReady+0x188>
 8005afa:	7dbb      	ldrb	r3, [r7, #22]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0cd      	beq.n	8005a9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d129      	bne.n	8005b6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	2319      	movs	r3, #25
 8005b42:	2201      	movs	r2, #1
 8005b44:	4921      	ldr	r1, [pc, #132]	@ (8005bcc <HAL_I2C_IsDeviceReady+0x254>)
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f001 fc1e 	bl	8007388 <I2C_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e036      	b.n	8005bc4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e02c      	b.n	8005bc4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	2319      	movs	r3, #25
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	490f      	ldr	r1, [pc, #60]	@ (8005bcc <HAL_I2C_IsDeviceReady+0x254>)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f001 fbfa 	bl	8007388 <I2C_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e012      	b.n	8005bc4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	f4ff af32 	bcc.w	8005a12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3720      	adds	r7, #32
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	00100002 	.word	0x00100002
 8005bd0:	ffff0000 	.word	0xffff0000

08005bd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bf4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d003      	beq.n	8005c0c <HAL_I2C_EV_IRQHandler+0x38>
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b40      	cmp	r3, #64	@ 0x40
 8005c08:	f040 80b1 	bne.w	8005d6e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10d      	bne.n	8005c42 <HAL_I2C_EV_IRQHandler+0x6e>
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005c2c:	d003      	beq.n	8005c36 <HAL_I2C_EV_IRQHandler+0x62>
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005c34:	d101      	bne.n	8005c3a <HAL_I2C_EV_IRQHandler+0x66>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <HAL_I2C_EV_IRQHandler+0x68>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	f000 8114 	beq.w	8005e6a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_I2C_EV_IRQHandler+0x90>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 fd4f 	bl	80076fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fcbf 	bl	80065e0 <I2C_Master_SB>
 8005c62:	e083      	b.n	8005d6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_I2C_EV_IRQHandler+0xac>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fd37 	bl	80066ec <I2C_Master_ADD10>
 8005c7e:	e075      	b.n	8005d6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <HAL_I2C_EV_IRQHandler+0xc8>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fd53 	bl	8006740 <I2C_Master_ADDR>
 8005c9a:	e067      	b.n	8005d6c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d036      	beq.n	8005d14 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cb4:	f000 80db 	beq.w	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00d      	beq.n	8005cde <HAL_I2C_EV_IRQHandler+0x10a>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_I2C_EV_IRQHandler+0x10a>
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f937 	bl	8005f4a <I2C_MasterTransmit_TXE>
 8005cdc:	e046      	b.n	8005d6c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80c2 	beq.w	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80bc 	beq.w	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	2b21      	cmp	r3, #33	@ 0x21
 8005cfa:	d103      	bne.n	8005d04 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f9c0 	bl	8006082 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d02:	e0b4      	b.n	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b40      	cmp	r3, #64	@ 0x40
 8005d08:	f040 80b1 	bne.w	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fa2e 	bl	800616e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d12:	e0ac      	b.n	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d22:	f000 80a4 	beq.w	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00d      	beq.n	8005d4c <HAL_I2C_EV_IRQHandler+0x178>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_I2C_EV_IRQHandler+0x178>
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d103      	bne.n	8005d4c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 faa6 	bl	8006296 <I2C_MasterReceive_RXNE>
 8005d4a:	e00f      	b.n	8005d6c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 808b 	beq.w	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8085 	beq.w	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fb51 	bl	800640c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d6a:	e080      	b.n	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
 8005d6c:	e07f      	b.n	8005e6e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	e007      	b.n	8005d90 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d011      	beq.n	8005dbe <HAL_I2C_EV_IRQHandler+0x1ea>
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00c      	beq.n	8005dbe <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005db4:	69b9      	ldr	r1, [r7, #24]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 ff11 	bl	8006bde <I2C_Slave_ADDR>
 8005dbc:	e05a      	b.n	8005e74 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_I2C_EV_IRQHandler+0x206>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 ff4c 	bl	8006c70 <I2C_Slave_STOPF>
 8005dd8:	e04c      	b.n	8005e74 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	2b21      	cmp	r3, #33	@ 0x21
 8005dde:	d002      	beq.n	8005de6 <HAL_I2C_EV_IRQHandler+0x212>
 8005de0:	7bbb      	ldrb	r3, [r7, #14]
 8005de2:	2b29      	cmp	r3, #41	@ 0x29
 8005de4:	d120      	bne.n	8005e28 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00d      	beq.n	8005e0c <HAL_I2C_EV_IRQHandler+0x238>
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_I2C_EV_IRQHandler+0x238>
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fe2c 	bl	8006a62 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e0a:	e032      	b.n	8005e72 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02d      	beq.n	8005e72 <HAL_I2C_EV_IRQHandler+0x29e>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d028      	beq.n	8005e72 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fe5b 	bl	8006adc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e26:	e024      	b.n	8005e72 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00d      	beq.n	8005e4e <HAL_I2C_EV_IRQHandler+0x27a>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_I2C_EV_IRQHandler+0x27a>
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fe69 	bl	8006b1e <I2C_SlaveReceive_RXNE>
 8005e4c:	e012      	b.n	8005e74 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fe99 	bl	8006b9a <I2C_SlaveReceive_BTF>
 8005e68:	e004      	b.n	8005e74 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005e6a:	bf00      	nop
 8005e6c:	e002      	b.n	8005e74 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e72:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	70fb      	strb	r3, [r7, #3]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f60:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f66:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d150      	bne.n	8006012 <I2C_MasterTransmit_TXE+0xc8>
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b21      	cmp	r3, #33	@ 0x21
 8005f74:	d14d      	bne.n	8006012 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d01d      	beq.n	8005fb8 <I2C_MasterTransmit_TXE+0x6e>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d01a      	beq.n	8005fb8 <I2C_MasterTransmit_TXE+0x6e>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f88:	d016      	beq.n	8005fb8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f98:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2211      	movs	r2, #17
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff ff62 	bl	8005e7a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fb6:	e060      	b.n	800607a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fc6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fd6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b40      	cmp	r3, #64	@ 0x40
 8005ff0:	d107      	bne.n	8006002 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ff7d 	bl	8005efa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006000:	e03b      	b.n	800607a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ff35 	bl	8005e7a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006010:	e033      	b.n	800607a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	2b21      	cmp	r3, #33	@ 0x21
 8006016:	d005      	beq.n	8006024 <I2C_MasterTransmit_TXE+0xda>
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	2b40      	cmp	r3, #64	@ 0x40
 800601c:	d12d      	bne.n	800607a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	2b22      	cmp	r3, #34	@ 0x22
 8006022:	d12a      	bne.n	800607a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d108      	bne.n	8006040 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800603e:	e01c      	b.n	800607a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d103      	bne.n	8006054 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f88e 	bl	800616e <I2C_MemoryTransmit_TXE_BTF>
}
 8006052:	e012      	b.n	800607a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006078:	e7ff      	b.n	800607a <I2C_MasterTransmit_TXE+0x130>
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b21      	cmp	r3, #33	@ 0x21
 800609a:	d164      	bne.n	8006166 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d012      	beq.n	80060cc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	781a      	ldrb	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80060ca:	e04c      	b.n	8006166 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d01d      	beq.n	800610e <I2C_MasterTransmit_BTF+0x8c>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d01a      	beq.n	800610e <I2C_MasterTransmit_BTF+0x8c>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060de:	d016      	beq.n	800610e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060ee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2211      	movs	r2, #17
 80060f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff feb7 	bl	8005e7a <HAL_I2C_MasterTxCpltCallback>
}
 800610c:	e02b      	b.n	8006166 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800611c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800612c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b40      	cmp	r3, #64	@ 0x40
 8006146:	d107      	bne.n	8006158 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fed2 	bl	8005efa <HAL_I2C_MemTxCpltCallback>
}
 8006156:	e006      	b.n	8006166 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fe8a 	bl	8005e7a <HAL_I2C_MasterTxCpltCallback>
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006182:	2b00      	cmp	r3, #0
 8006184:	d11d      	bne.n	80061c2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d10b      	bne.n	80061a6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006192:	b2da      	uxtb	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80061a4:	e073      	b.n	800628e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	121b      	asrs	r3, r3, #8
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80061c0:	e065      	b.n	800628e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10b      	bne.n	80061e2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80061e0:	e055      	b.n	800628e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d151      	bne.n	800628e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	2b22      	cmp	r3, #34	@ 0x22
 80061ee:	d10d      	bne.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061fe:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800620a:	e040      	b.n	800628e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d015      	beq.n	8006242 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b21      	cmp	r3, #33	@ 0x21
 800621a:	d112      	bne.n	8006242 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006240:	e025      	b.n	800628e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d120      	bne.n	800628e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b21      	cmp	r3, #33	@ 0x21
 8006250:	d11d      	bne.n	800628e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006260:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006270:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fe36 	bl	8005efa <HAL_I2C_MemTxCpltCallback>
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b22      	cmp	r3, #34	@ 0x22
 80062a8:	f040 80ac 	bne.w	8006404 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d921      	bls.n	80062fe <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	f040 808c 	bne.w	8006404 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80062fc:	e082      	b.n	8006404 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	2b02      	cmp	r3, #2
 8006304:	d075      	beq.n	80063f2 <I2C_MasterReceive_RXNE+0x15c>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d002      	beq.n	8006312 <I2C_MasterReceive_RXNE+0x7c>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d16f      	bne.n	80063f2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 f990 	bl	8007638 <I2C_WaitOnSTOPRequestThroughIT>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d142      	bne.n	80063a4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800632c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800633c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b40      	cmp	r3, #64	@ 0x40
 8006376:	d10a      	bne.n	800638e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fdc1 	bl	8005f0e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800638c:	e03a      	b.n	8006404 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2212      	movs	r2, #18
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fd76 	bl	8005e8e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063a2:	e02f      	b.n	8006404 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80063b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fd99 	bl	8005f22 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063f0:	e008      	b.n	8006404 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006400:	605a      	str	r2, [r3, #4]
}
 8006402:	e7ff      	b.n	8006404 <I2C_MasterReceive_RXNE+0x16e>
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b04      	cmp	r3, #4
 8006422:	d11b      	bne.n	800645c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006432:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800645a:	e0bd      	b.n	80065d8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b03      	cmp	r3, #3
 8006464:	d129      	bne.n	80064ba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006474:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d00a      	beq.n	8006492 <I2C_MasterReceive_BTF+0x86>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d007      	beq.n	8006492 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006490:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80064b8:	e08e      	b.n	80065d8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d176      	bne.n	80065b2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d002      	beq.n	80064d0 <I2C_MasterReceive_BTF+0xc4>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d108      	bne.n	80064e2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e019      	b.n	8006516 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d002      	beq.n	80064ee <I2C_MasterReceive_BTF+0xe2>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d108      	bne.n	8006500 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e00a      	b.n	8006516 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b10      	cmp	r3, #16
 8006504:	d007      	beq.n	8006516 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006514:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006570:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d10a      	bne.n	800659c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff fcba 	bl	8005f0e <HAL_I2C_MemRxCpltCallback>
}
 800659a:	e01d      	b.n	80065d8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2212      	movs	r2, #18
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff fc6f 	bl	8005e8e <HAL_I2C_MasterRxCpltCallback>
}
 80065b0:	e012      	b.n	80065d8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b40      	cmp	r3, #64	@ 0x40
 80065f2:	d117      	bne.n	8006624 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006600:	b2db      	uxtb	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800660c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800660e:	e067      	b.n	80066e0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	b2da      	uxtb	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	611a      	str	r2, [r3, #16]
}
 8006622:	e05d      	b.n	80066e0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662c:	d133      	bne.n	8006696 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b21      	cmp	r3, #33	@ 0x21
 8006638:	d109      	bne.n	800664e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800664a:	611a      	str	r2, [r3, #16]
 800664c:	e008      	b.n	8006660 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	b2da      	uxtb	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <I2C_Master_SB+0x92>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d108      	bne.n	8006684 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	2b00      	cmp	r3, #0
 8006678:	d032      	beq.n	80066e0 <I2C_Master_SB+0x100>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d02d      	beq.n	80066e0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006692:	605a      	str	r2, [r3, #4]
}
 8006694:	e024      	b.n	80066e0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10e      	bne.n	80066bc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	11db      	asrs	r3, r3, #7
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f003 0306 	and.w	r3, r3, #6
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f063 030f 	orn	r3, r3, #15
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	611a      	str	r2, [r3, #16]
}
 80066ba:	e011      	b.n	80066e0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d10d      	bne.n	80066e0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	11db      	asrs	r3, r3, #7
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0306 	and.w	r3, r3, #6
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f063 030e 	orn	r3, r3, #14
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	611a      	str	r2, [r3, #16]
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <I2C_Master_ADD10+0x26>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800670c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d108      	bne.n	8006724 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00c      	beq.n	8006734 <I2C_Master_ADD10+0x48>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006732:	605a      	str	r2, [r3, #4]
  }
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006740:	b480      	push	{r7}
 8006742:	b091      	sub	sp, #68	@ 0x44
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800674e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006756:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b22      	cmp	r3, #34	@ 0x22
 8006768:	f040 8169 	bne.w	8006a3e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10f      	bne.n	8006794 <I2C_Master_ADDR+0x54>
 8006774:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006778:	2b40      	cmp	r3, #64	@ 0x40
 800677a:	d10b      	bne.n	8006794 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800677c:	2300      	movs	r3, #0
 800677e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	633b      	str	r3, [r7, #48]	@ 0x30
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006792:	e160      	b.n	8006a56 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006798:	2b00      	cmp	r3, #0
 800679a:	d11d      	bne.n	80067d8 <I2C_Master_ADDR+0x98>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067a4:	d118      	bne.n	80067d8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a6:	2300      	movs	r3, #0
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067ca:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80067d6:	e13e      	b.n	8006a56 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d113      	bne.n	800680a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e2:	2300      	movs	r3, #0
 80067e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	e115      	b.n	8006a36 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	f040 808a 	bne.w	800692a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800681c:	d137      	bne.n	800688e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800682c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800683c:	d113      	bne.n	8006866 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800684c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684e:	2300      	movs	r3, #0
 8006850:	627b      	str	r3, [r7, #36]	@ 0x24
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	627b      	str	r3, [r7, #36]	@ 0x24
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	e0e7      	b.n	8006a36 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006866:	2300      	movs	r3, #0
 8006868:	623b      	str	r3, [r7, #32]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	623b      	str	r3, [r7, #32]
 800687a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e0d3      	b.n	8006a36 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800688e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006890:	2b08      	cmp	r3, #8
 8006892:	d02e      	beq.n	80068f2 <I2C_Master_ADDR+0x1b2>
 8006894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006896:	2b20      	cmp	r3, #32
 8006898:	d02b      	beq.n	80068f2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800689a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689c:	2b12      	cmp	r3, #18
 800689e:	d102      	bne.n	80068a6 <I2C_Master_ADDR+0x166>
 80068a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d125      	bne.n	80068f2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d00e      	beq.n	80068ca <I2C_Master_ADDR+0x18a>
 80068ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d00b      	beq.n	80068ca <I2C_Master_ADDR+0x18a>
 80068b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d008      	beq.n	80068ca <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	e007      	b.n	80068da <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	e0a1      	b.n	8006a36 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006900:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	e085      	b.n	8006a36 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d14d      	bne.n	80069d0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	2b04      	cmp	r3, #4
 8006938:	d016      	beq.n	8006968 <I2C_Master_ADDR+0x228>
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	2b02      	cmp	r3, #2
 800693e:	d013      	beq.n	8006968 <I2C_Master_ADDR+0x228>
 8006940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006942:	2b10      	cmp	r3, #16
 8006944:	d010      	beq.n	8006968 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006954:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	e007      	b.n	8006978 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006976:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006986:	d117      	bne.n	80069b8 <I2C_Master_ADDR+0x278>
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800698e:	d00b      	beq.n	80069a8 <I2C_Master_ADDR+0x268>
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	2b01      	cmp	r3, #1
 8006994:	d008      	beq.n	80069a8 <I2C_Master_ADDR+0x268>
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	2b08      	cmp	r3, #8
 800699a:	d005      	beq.n	80069a8 <I2C_Master_ADDR+0x268>
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	2b10      	cmp	r3, #16
 80069a0:	d002      	beq.n	80069a8 <I2C_Master_ADDR+0x268>
 80069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d107      	bne.n	80069b8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069b6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	e032      	b.n	8006a36 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80069de:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ee:	d117      	bne.n	8006a20 <I2C_Master_ADDR+0x2e0>
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069f6:	d00b      	beq.n	8006a10 <I2C_Master_ADDR+0x2d0>
 80069f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d008      	beq.n	8006a10 <I2C_Master_ADDR+0x2d0>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d005      	beq.n	8006a10 <I2C_Master_ADDR+0x2d0>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d002      	beq.n	8006a10 <I2C_Master_ADDR+0x2d0>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d107      	bne.n	8006a20 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a1e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006a3c:	e00b      	b.n	8006a56 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	68fb      	ldr	r3, [r7, #12]
}
 8006a54:	e7ff      	b.n	8006a56 <I2C_Master_ADDR+0x316>
 8006a56:	bf00      	nop
 8006a58:	3744      	adds	r7, #68	@ 0x44
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a70:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02b      	beq.n	8006ad4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	781a      	ldrb	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d114      	bne.n	8006ad4 <I2C_SlaveTransmit_TXE+0x72>
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b29      	cmp	r3, #41	@ 0x29
 8006aae:	d111      	bne.n	8006ad4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006abe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2221      	movs	r2, #33	@ 0x21
 8006ac4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2228      	movs	r2, #40	@ 0x28
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff f9e7 	bl	8005ea2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d011      	beq.n	8006b12 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02c      	beq.n	8006b92 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d114      	bne.n	8006b92 <I2C_SlaveReceive_RXNE+0x74>
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b6c:	d111      	bne.n	8006b92 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2222      	movs	r2, #34	@ 0x22
 8006b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2228      	movs	r2, #40	@ 0x28
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff f992 	bl	8005eb6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d012      	beq.n	8006bd2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006bf8:	2b28      	cmp	r3, #40	@ 0x28
 8006bfa:	d125      	bne.n	8006c48 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c0a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006c16:	2301      	movs	r3, #1
 8006c18:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	81bb      	strh	r3, [r7, #12]
 8006c2a:	e002      	b.n	8006c32 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006c3a:	89ba      	ldrh	r2, [r7, #12]
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff f942 	bl	8005eca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006c46:	e00e      	b.n	8006c66 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60bb      	str	r3, [r7, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	60bb      	str	r3, [r7, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	60bb      	str	r3, [r7, #8]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c7e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c90:	2300      	movs	r3, #0
 8006c92:	60bb      	str	r3, [r7, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cbc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ccc:	d172      	bne.n	8006db4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b22      	cmp	r3, #34	@ 0x22
 8006cd2:	d002      	beq.n	8006cda <I2C_Slave_STOPF+0x6a>
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd8:	d135      	bne.n	8006d46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf6:	f043 0204 	orr.w	r2, r3, #4
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fd fe62 	bl	80049dc <HAL_DMA_GetState>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d049      	beq.n	8006db2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d22:	4a69      	ldr	r2, [pc, #420]	@ (8006ec8 <I2C_Slave_STOPF+0x258>)
 8006d24:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fd fcaa 	bl	8004684 <HAL_DMA_Abort_IT>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d03d      	beq.n	8006db2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d40:	4610      	mov	r0, r2
 8006d42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d44:	e035      	b.n	8006db2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d005      	beq.n	8006d6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	f043 0204 	orr.w	r2, r3, #4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd fe2c 	bl	80049dc <HAL_DMA_GetState>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d014      	beq.n	8006db4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ec8 <I2C_Slave_STOPF+0x258>)
 8006d90:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd fc74 	bl	8004684 <HAL_DMA_Abort_IT>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	e000      	b.n	8006db4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d03e      	beq.n	8006e3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d112      	bne.n	8006df2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d112      	bne.n	8006e26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	f043 0204 	orr.w	r2, r3, #4
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f843 	bl	8006ed0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006e4a:	e039      	b.n	8006ec0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e50:	d109      	bne.n	8006e66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2228      	movs	r2, #40	@ 0x28
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff f828 	bl	8005eb6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b28      	cmp	r3, #40	@ 0x28
 8006e70:	d111      	bne.n	8006e96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a15      	ldr	r2, [pc, #84]	@ (8006ecc <I2C_Slave_STOPF+0x25c>)
 8006e76:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff f829 	bl	8005ee6 <HAL_I2C_ListenCpltCallback>
}
 8006e94:	e014      	b.n	8006ec0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9a:	2b22      	cmp	r3, #34	@ 0x22
 8006e9c:	d002      	beq.n	8006ea4 <I2C_Slave_STOPF+0x234>
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b22      	cmp	r3, #34	@ 0x22
 8006ea2:	d10d      	bne.n	8006ec0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe fffb 	bl	8005eb6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	08007239 	.word	0x08007239
 8006ecc:	ffff0000 	.word	0xffff0000

08006ed0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ede:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ee6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d002      	beq.n	8006ef4 <I2C_ITError+0x24>
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	d10a      	bne.n	8006f0a <I2C_ITError+0x3a>
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	2b22      	cmp	r3, #34	@ 0x22
 8006ef8:	d107      	bne.n	8006f0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f10:	2b28      	cmp	r3, #40	@ 0x28
 8006f12:	d107      	bne.n	8006f24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2228      	movs	r2, #40	@ 0x28
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006f22:	e015      	b.n	8006f50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f32:	d00a      	beq.n	8006f4a <I2C_ITError+0x7a>
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b60      	cmp	r3, #96	@ 0x60
 8006f38:	d007      	beq.n	8006f4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f5e:	d162      	bne.n	8007026 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d020      	beq.n	8006fc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f82:	4a6a      	ldr	r2, [pc, #424]	@ (800712c <I2C_ITError+0x25c>)
 8006f84:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fd fb7a 	bl	8004684 <HAL_DMA_Abort_IT>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8089 	beq.w	80070aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4798      	blx	r3
 8006fbe:	e074      	b.n	80070aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc4:	4a59      	ldr	r2, [pc, #356]	@ (800712c <I2C_ITError+0x25c>)
 8006fc6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fd fb59 	bl	8004684 <HAL_DMA_Abort_IT>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d068      	beq.n	80070aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe2:	2b40      	cmp	r3, #64	@ 0x40
 8006fe4:	d10b      	bne.n	8006ffe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0201 	bic.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	e041      	b.n	80070aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b60      	cmp	r3, #96	@ 0x60
 8007030:	d125      	bne.n	800707e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d10b      	bne.n	8007066 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0201 	bic.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fe ff5d 	bl	8005f36 <HAL_I2C_AbortCpltCallback>
 800707c:	e015      	b.n	80070aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007088:	2b40      	cmp	r3, #64	@ 0x40
 800708a:	d10b      	bne.n	80070a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe ff3c 	bl	8005f22 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10e      	bne.n	80070d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d104      	bne.n	80070d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80070e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d113      	bne.n	8007124 <I2C_ITError+0x254>
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b28      	cmp	r3, #40	@ 0x28
 8007100:	d110      	bne.n	8007124 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a0a      	ldr	r2, [pc, #40]	@ (8007130 <I2C_ITError+0x260>)
 8007106:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fe fee1 	bl	8005ee6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	08007239 	.word	0x08007239
 8007130:	ffff0000 	.word	0xffff0000

08007134 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af02      	add	r7, sp, #8
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	460b      	mov	r3, r1
 8007142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007148:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b08      	cmp	r3, #8
 800714e:	d006      	beq.n	800715e <I2C_MasterRequestWrite+0x2a>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d003      	beq.n	800715e <I2C_MasterRequestWrite+0x2a>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800715c:	d108      	bne.n	8007170 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e00b      	b.n	8007188 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007174:	2b12      	cmp	r3, #18
 8007176:	d107      	bne.n	8007188 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f8f7 	bl	8007388 <I2C_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00d      	beq.n	80071bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ae:	d103      	bne.n	80071b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e035      	b.n	8007228 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071c4:	d108      	bne.n	80071d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071c6:	897b      	ldrh	r3, [r7, #10]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80071d4:	611a      	str	r2, [r3, #16]
 80071d6:	e01b      	b.n	8007210 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071d8:	897b      	ldrh	r3, [r7, #10]
 80071da:	11db      	asrs	r3, r3, #7
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0306 	and.w	r3, r3, #6
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f063 030f 	orn	r3, r3, #15
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	490e      	ldr	r1, [pc, #56]	@ (8007230 <I2C_MasterRequestWrite+0xfc>)
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f91d 	bl	8007436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e010      	b.n	8007228 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007206:	897b      	ldrh	r3, [r7, #10]
 8007208:	b2da      	uxtb	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	4907      	ldr	r1, [pc, #28]	@ (8007234 <I2C_MasterRequestWrite+0x100>)
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f90d 	bl	8007436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	00010008 	.word	0x00010008
 8007234:	00010002 	.word	0x00010002

08007238 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007250:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007252:	4b4b      	ldr	r3, [pc, #300]	@ (8007380 <I2C_DMAAbort+0x148>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	08db      	lsrs	r3, r3, #3
 8007258:	4a4a      	ldr	r2, [pc, #296]	@ (8007384 <I2C_DMAAbort+0x14c>)
 800725a:	fba2 2303 	umull	r2, r3, r2, r3
 800725e:	0a1a      	lsrs	r2, r3, #8
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	00da      	lsls	r2, r3, #3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007276:	f043 0220 	orr.w	r2, r3, #32
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800727e:	e00a      	b.n	8007296 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3b01      	subs	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007294:	d0ea      	beq.n	800726c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a2:	2200      	movs	r2, #0
 80072a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b2:	2200      	movs	r2, #0
 80072b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2200      	movs	r2, #0
 80072ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d8:	2200      	movs	r2, #0
 80072da:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e8:	2200      	movs	r2, #0
 80072ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0201 	bic.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b60      	cmp	r3, #96	@ 0x60
 8007306:	d10e      	bne.n	8007326 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2200      	movs	r2, #0
 800731c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800731e:	6978      	ldr	r0, [r7, #20]
 8007320:	f7fe fe09 	bl	8005f36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007324:	e027      	b.n	8007376 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007326:	7cfb      	ldrb	r3, [r7, #19]
 8007328:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800732c:	2b28      	cmp	r3, #40	@ 0x28
 800732e:	d117      	bne.n	8007360 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800734e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2228      	movs	r2, #40	@ 0x28
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800735e:	e007      	b.n	8007370 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007370:	6978      	ldr	r0, [r7, #20]
 8007372:	f7fe fdd6 	bl	8005f22 <HAL_I2C_ErrorCallback>
}
 8007376:	bf00      	nop
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	2000000c 	.word	0x2000000c
 8007384:	14f8b589 	.word	0x14f8b589

08007388 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007398:	e025      	b.n	80073e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073a0:	d021      	beq.n	80073e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a2:	f7fc fb69 	bl	8003a78 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d302      	bcc.n	80073b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d116      	bne.n	80073e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	f043 0220 	orr.w	r2, r3, #32
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e023      	b.n	800742e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	0c1b      	lsrs	r3, r3, #16
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d10d      	bne.n	800740c <I2C_WaitOnFlagUntilTimeout+0x84>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	43da      	mvns	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4013      	ands	r3, r2
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf0c      	ite	eq
 8007402:	2301      	moveq	r3, #1
 8007404:	2300      	movne	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	e00c      	b.n	8007426 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	43da      	mvns	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4013      	ands	r3, r2
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	bf0c      	ite	eq
 800741e:	2301      	moveq	r3, #1
 8007420:	2300      	movne	r3, #0
 8007422:	b2db      	uxtb	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	429a      	cmp	r2, r3
 800742a:	d0b6      	beq.n	800739a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
 8007442:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007444:	e051      	b.n	80074ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007454:	d123      	bne.n	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007464:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800746e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	f043 0204 	orr.w	r2, r3, #4
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e046      	b.n	800752c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074a4:	d021      	beq.n	80074ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a6:	f7fc fae7 	bl	8003a78 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d302      	bcc.n	80074bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d116      	bne.n	80074ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	f043 0220 	orr.w	r2, r3, #32
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e020      	b.n	800752c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	0c1b      	lsrs	r3, r3, #16
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d10c      	bne.n	800750e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	43da      	mvns	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4013      	ands	r3, r2
 8007500:	b29b      	uxth	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	bf14      	ite	ne
 8007506:	2301      	movne	r3, #1
 8007508:	2300      	moveq	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	e00b      	b.n	8007526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	43da      	mvns	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4013      	ands	r3, r2
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	bf14      	ite	ne
 8007520:	2301      	movne	r3, #1
 8007522:	2300      	moveq	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d18d      	bne.n	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007540:	e02d      	b.n	800759e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 f8aa 	bl	800769c <I2C_IsAcknowledgeFailed>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e02d      	b.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007558:	d021      	beq.n	800759e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800755a:	f7fc fa8d 	bl	8003a78 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	429a      	cmp	r2, r3
 8007568:	d302      	bcc.n	8007570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d116      	bne.n	800759e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	f043 0220 	orr.w	r2, r3, #32
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e007      	b.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a8:	2b80      	cmp	r3, #128	@ 0x80
 80075aa:	d1ca      	bne.n	8007542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075c2:	e02d      	b.n	8007620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f869 	bl	800769c <I2C_IsAcknowledgeFailed>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e02d      	b.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075da:	d021      	beq.n	8007620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075dc:	f7fc fa4c 	bl	8003a78 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d302      	bcc.n	80075f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d116      	bne.n	8007620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e007      	b.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b04      	cmp	r3, #4
 800762c:	d1ca      	bne.n	80075c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007644:	4b13      	ldr	r3, [pc, #76]	@ (8007694 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	4a13      	ldr	r2, [pc, #76]	@ (8007698 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800764c:	fba2 2303 	umull	r2, r3, r2, r3
 8007650:	0a1a      	lsrs	r2, r3, #8
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b01      	subs	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d107      	bne.n	8007676 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766a:	f043 0220 	orr.w	r2, r3, #32
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e008      	b.n	8007688 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007684:	d0e9      	beq.n	800765a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	2000000c 	.word	0x2000000c
 8007698:	14f8b589 	.word	0x14f8b589

0800769c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076b2:	d11b      	bne.n	80076ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80076bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d8:	f043 0204 	orr.w	r2, r3, #4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007706:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800770a:	d103      	bne.n	8007714 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007712:	e007      	b.n	8007724 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800771c:	d102      	bne.n	8007724 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2208      	movs	r2, #8
 8007722:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007732:	b08f      	sub	sp, #60	@ 0x3c
 8007734:	af0a      	add	r7, sp, #40	@ 0x28
 8007736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e10f      	b.n	8007962 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f005 ffdd 	bl	800d71c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2203      	movs	r2, #3
 8007766:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800776e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f002 fed8 	bl	800a536 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	687e      	ldr	r6, [r7, #4]
 800778e:	466d      	mov	r5, sp
 8007790:	f106 0410 	add.w	r4, r6, #16
 8007794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800779a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800779c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80077a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80077a4:	1d33      	adds	r3, r6, #4
 80077a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077a8:	6838      	ldr	r0, [r7, #0]
 80077aa:	f002 fdaf 	bl	800a30c <USB_CoreInit>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e0d0      	b.n	8007962 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f002 fec6 	bl	800a558 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
 80077d0:	e04a      	b.n	8007868 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80077d2:	7bfa      	ldrb	r2, [r7, #15]
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	333d      	adds	r3, #61	@ 0x3d
 80077e2:	2201      	movs	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80077e6:	7bfa      	ldrb	r2, [r7, #15]
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	4613      	mov	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	333c      	adds	r3, #60	@ 0x3c
 80077f6:	7bfa      	ldrb	r2, [r7, #15]
 80077f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80077fa:	7bfa      	ldrb	r2, [r7, #15]
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	b298      	uxth	r0, r3
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3344      	adds	r3, #68	@ 0x44
 800780e:	4602      	mov	r2, r0
 8007810:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007812:	7bfa      	ldrb	r2, [r7, #15]
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	3340      	adds	r3, #64	@ 0x40
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007826:	7bfa      	ldrb	r2, [r7, #15]
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3348      	adds	r3, #72	@ 0x48
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800783a:	7bfa      	ldrb	r2, [r7, #15]
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	334c      	adds	r3, #76	@ 0x4c
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800784e:	7bfa      	ldrb	r2, [r7, #15]
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	3354      	adds	r3, #84	@ 0x54
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	3301      	adds	r3, #1
 8007866:	73fb      	strb	r3, [r7, #15]
 8007868:	7bfa      	ldrb	r2, [r7, #15]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	429a      	cmp	r2, r3
 8007870:	d3af      	bcc.n	80077d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
 8007876:	e044      	b.n	8007902 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007878:	7bfa      	ldrb	r2, [r7, #15]
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	4613      	mov	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	440b      	add	r3, r1
 8007886:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800788e:	7bfa      	ldrb	r2, [r7, #15]
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80078a0:	7bfa      	ldrb	r2, [r7, #15]
 80078a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80078a4:	7bfa      	ldrb	r2, [r7, #15]
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	4613      	mov	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80078ba:	7bfa      	ldrb	r2, [r7, #15]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80078d0:	7bfa      	ldrb	r2, [r7, #15]
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4613      	mov	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	440b      	add	r3, r1
 80078de:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80078e6:	7bfa      	ldrb	r2, [r7, #15]
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	3301      	adds	r3, #1
 8007900:	73fb      	strb	r3, [r7, #15]
 8007902:	7bfa      	ldrb	r2, [r7, #15]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d3b5      	bcc.n	8007878 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	603b      	str	r3, [r7, #0]
 8007912:	687e      	ldr	r6, [r7, #4]
 8007914:	466d      	mov	r5, sp
 8007916:	f106 0410 	add.w	r4, r6, #16
 800791a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800791c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800791e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007926:	e885 0003 	stmia.w	r5, {r0, r1}
 800792a:	1d33      	adds	r3, r6, #4
 800792c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800792e:	6838      	ldr	r0, [r7, #0]
 8007930:	f002 fe5e 	bl	800a5f0 <USB_DevInit>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d005      	beq.n	8007946 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2202      	movs	r2, #2
 800793e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e00d      	b.n	8007962 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f003 ffad 	bl	800b8ba <USB_DevDisconnect>

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800796a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_PCD_Start+0x1c>
 8007982:	2302      	movs	r3, #2
 8007984:	e020      	b.n	80079c8 <HAL_PCD_Start+0x5e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007992:	2b01      	cmp	r3, #1
 8007994:	d109      	bne.n	80079aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800799a:	2b01      	cmp	r3, #1
 800799c:	d005      	beq.n	80079aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f002 fdb0 	bl	800a514 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f003 ff5d 	bl	800b878 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80079d0:	b590      	push	{r4, r7, lr}
 80079d2:	b08d      	sub	sp, #52	@ 0x34
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f004 f81b 	bl	800ba22 <USB_GetMode>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f040 848a 	bne.w	8008308 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f003 ff7f 	bl	800b8fc <USB_ReadInterrupts>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8480 	beq.w	8008306 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f003 ff6c 	bl	800b8fc <USB_ReadInterrupts>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d107      	bne.n	8007a3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695a      	ldr	r2, [r3, #20]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f002 0202 	and.w	r2, r2, #2
 8007a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f003 ff5a 	bl	800b8fc <USB_ReadInterrupts>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d161      	bne.n	8007b16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	699a      	ldr	r2, [r3, #24]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0210 	bic.w	r2, r2, #16
 8007a60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f003 020f 	and.w	r2, r3, #15
 8007a6e:	4613      	mov	r3, r2
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	3304      	adds	r3, #4
 8007a80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	0c5b      	lsrs	r3, r3, #17
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d124      	bne.n	8007ad8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d035      	beq.n	8007b06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	091b      	lsrs	r3, r3, #4
 8007aa2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6a38      	ldr	r0, [r7, #32]
 8007aae:	f003 fd91 	bl	800b5d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	091b      	lsrs	r3, r3, #4
 8007aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007abe:	441a      	add	r2, r3
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	091b      	lsrs	r3, r3, #4
 8007acc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ad0:	441a      	add	r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	621a      	str	r2, [r3, #32]
 8007ad6:	e016      	b.n	8007b06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	0c5b      	lsrs	r3, r3, #17
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	2b06      	cmp	r3, #6
 8007ae2:	d110      	bne.n	8007b06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007aea:	2208      	movs	r2, #8
 8007aec:	4619      	mov	r1, r3
 8007aee:	6a38      	ldr	r0, [r7, #32]
 8007af0:	f003 fd70 	bl	800b5d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6a1a      	ldr	r2, [r3, #32]
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	091b      	lsrs	r3, r3, #4
 8007afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b00:	441a      	add	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0210 	orr.w	r2, r2, #16
 8007b14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f003 feee 	bl	800b8fc <USB_ReadInterrupts>
 8007b20:	4603      	mov	r3, r0
 8007b22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007b2a:	f040 80a7 	bne.w	8007c7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f003 fef3 	bl	800b922 <USB_ReadDevAllOutEpInterrupt>
 8007b3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007b3e:	e099      	b.n	8007c74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 808e 	beq.w	8007c68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f003 ff17 	bl	800b98a <USB_ReadDevOutEPInterrupt>
 8007b5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00c      	beq.n	8007b82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b74:	461a      	mov	r2, r3
 8007b76:	2301      	movs	r3, #1
 8007b78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007b7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 feab 	bl	80088d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00c      	beq.n	8007ba6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b98:	461a      	mov	r2, r3
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 ff81 	bl	8008aa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2310      	movs	r3, #16
 8007bc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d030      	beq.n	8007c2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd4:	2b80      	cmp	r3, #128	@ 0x80
 8007bd6:	d109      	bne.n	8007bec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	69fa      	ldr	r2, [r7, #28]
 8007be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007bea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bee:	4613      	mov	r3, r2
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3304      	adds	r3, #4
 8007c00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	78db      	ldrb	r3, [r3, #3]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d108      	bne.n	8007c1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f005 fe7c 	bl	800d914 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c28:	461a      	mov	r2, r3
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c44:	461a      	mov	r2, r3
 8007c46:	2320      	movs	r3, #32
 8007c48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d009      	beq.n	8007c68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c60:	461a      	mov	r2, r3
 8007c62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f47f af62 	bne.w	8007b40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f003 fe3b 	bl	800b8fc <USB_ReadInterrupts>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c90:	f040 80db 	bne.w	8007e4a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f003 fe5c 	bl	800b956 <USB_ReadDevAllInEpInterrupt>
 8007c9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007ca4:	e0cd      	b.n	8007e42 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 80c2 	beq.w	8007e36 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	4611      	mov	r1, r2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f003 fe82 	bl	800b9c6 <USB_ReadDevInEPInterrupt>
 8007cc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d057      	beq.n	8007d7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	69f9      	ldr	r1, [r7, #28]
 8007cea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cee:	4013      	ands	r3, r2
 8007cf0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfe:	461a      	mov	r2, r3
 8007d00:	2301      	movs	r3, #1
 8007d02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d132      	bne.n	8007d72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007d0c:	6879      	ldr	r1, [r7, #4]
 8007d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	334c      	adds	r3, #76	@ 0x4c
 8007d1c:	6819      	ldr	r1, [r3, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d22:	4613      	mov	r3, r2
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4403      	add	r3, r0
 8007d2c:	3348      	adds	r3, #72	@ 0x48
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4419      	add	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d36:	4613      	mov	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4403      	add	r3, r0
 8007d40:	334c      	adds	r3, #76	@ 0x4c
 8007d42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d113      	bne.n	8007d72 <HAL_PCD_IRQHandler+0x3a2>
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4e:	4613      	mov	r3, r2
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	3354      	adds	r3, #84	@ 0x54
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d108      	bne.n	8007d72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	f003 fe89 	bl	800ba84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f005 fd50 	bl	800d81e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d008      	beq.n	8007d9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d94:	461a      	mov	r2, r3
 8007d96:	2308      	movs	r3, #8
 8007d98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f003 0310 	and.w	r3, r3, #16
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db0:	461a      	mov	r2, r3
 8007db2:	2310      	movs	r3, #16
 8007db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d008      	beq.n	8007dd2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2340      	movs	r3, #64	@ 0x40
 8007dd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d023      	beq.n	8007e24 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007ddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dde:	6a38      	ldr	r0, [r7, #32]
 8007de0:	f002 fd6a 	bl	800a8b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de6:	4613      	mov	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	3338      	adds	r3, #56	@ 0x38
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	4413      	add	r3, r2
 8007df4:	3304      	adds	r3, #4
 8007df6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	78db      	ldrb	r3, [r3, #3]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d108      	bne.n	8007e12 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2200      	movs	r2, #0
 8007e04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f005 fd93 	bl	800d938 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1e:	461a      	mov	r2, r3
 8007e20:	2302      	movs	r3, #2
 8007e22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007e2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fcc3 	bl	80087bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	3301      	adds	r3, #1
 8007e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f47f af2e 	bne.w	8007ca6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f003 fd54 	bl	800b8fc <USB_ReadInterrupts>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e5e:	d122      	bne.n	8007ea6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e6e:	f023 0301 	bic.w	r3, r3, #1
 8007e72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d108      	bne.n	8007e90 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e86:	2100      	movs	r1, #0
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 feab 	bl	8008be4 <HAL_PCDEx_LPM_Callback>
 8007e8e:	e002      	b.n	8007e96 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f005 fd31 	bl	800d8f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695a      	ldr	r2, [r3, #20]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f003 fd26 	bl	800b8fc <USB_ReadInterrupts>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eba:	d112      	bne.n	8007ee2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d102      	bne.n	8007ed2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f005 fced 	bl	800d8ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007ee0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f003 fd08 	bl	800b8fc <USB_ReadInterrupts>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef6:	f040 80b7 	bne.w	8008068 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2110      	movs	r1, #16
 8007f14:	4618      	mov	r0, r3
 8007f16:	f002 fccf 	bl	800a8b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f1e:	e046      	b.n	8007fae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f60:	461a      	mov	r2, r3
 8007f62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f78:	0151      	lsls	r1, r2, #5
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	440a      	add	r2, r1
 8007f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fa2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007fa6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	3301      	adds	r3, #1
 8007fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d3b3      	bcc.n	8007f20 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fc6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007fca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d016      	beq.n	8008002 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fe4:	f043 030b 	orr.w	r3, r3, #11
 8007fe8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ffa:	f043 030b 	orr.w	r3, r3, #11
 8007ffe:	6453      	str	r3, [r2, #68]	@ 0x44
 8008000:	e015      	b.n	800802e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008010:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008014:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008018:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008028:	f043 030b 	orr.w	r3, r3, #11
 800802c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69fa      	ldr	r2, [r7, #28]
 8008038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800803c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008040:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008052:	461a      	mov	r2, r3
 8008054:	f003 fd16 	bl	800ba84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695a      	ldr	r2, [r3, #20]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f003 fc45 	bl	800b8fc <USB_ReadInterrupts>
 8008072:	4603      	mov	r3, r0
 8008074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800807c:	d124      	bne.n	80080c8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f003 fcdb 	bl	800ba3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f002 fc90 	bl	800a9b2 <USB_GetDevSpeed>
 8008092:	4603      	mov	r3, r0
 8008094:	461a      	mov	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681c      	ldr	r4, [r3, #0]
 800809e:	f001 f9d1 	bl	8009444 <HAL_RCC_GetHCLKFreq>
 80080a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	461a      	mov	r2, r3
 80080ac:	4620      	mov	r0, r4
 80080ae:	f002 f98f 	bl	800a3d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f005 fbdb 	bl	800d86e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695a      	ldr	r2, [r3, #20]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80080c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f003 fc15 	bl	800b8fc <USB_ReadInterrupts>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d10a      	bne.n	80080f2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f005 fbb8 	bl	800d852 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695a      	ldr	r2, [r3, #20]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f002 0208 	and.w	r2, r2, #8
 80080f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f003 fc00 	bl	800b8fc <USB_ReadInterrupts>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008102:	2b80      	cmp	r3, #128	@ 0x80
 8008104:	d122      	bne.n	800814c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008112:	2301      	movs	r3, #1
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
 8008116:	e014      	b.n	8008142 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800811c:	4613      	mov	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d105      	bne.n	800813c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	b2db      	uxtb	r3, r3
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fb0f 	bl	800875a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	3301      	adds	r3, #1
 8008140:	627b      	str	r3, [r7, #36]	@ 0x24
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008148:	429a      	cmp	r2, r3
 800814a:	d3e5      	bcc.n	8008118 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4618      	mov	r0, r3
 8008152:	f003 fbd3 	bl	800b8fc <USB_ReadInterrupts>
 8008156:	4603      	mov	r3, r0
 8008158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800815c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008160:	d13b      	bne.n	80081da <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008162:	2301      	movs	r3, #1
 8008164:	627b      	str	r3, [r7, #36]	@ 0x24
 8008166:	e02b      	b.n	80081c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800817c:	4613      	mov	r3, r2
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	3340      	adds	r3, #64	@ 0x40
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d115      	bne.n	80081ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800818e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008190:	2b00      	cmp	r3, #0
 8008192:	da12      	bge.n	80081ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008198:	4613      	mov	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	333f      	adds	r3, #63	@ 0x3f
 80081a4:	2201      	movs	r2, #1
 80081a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fad0 	bl	800875a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	3301      	adds	r3, #1
 80081be:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d3ce      	bcc.n	8008168 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	695a      	ldr	r2, [r3, #20]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80081d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4618      	mov	r0, r3
 80081e0:	f003 fb8c 	bl	800b8fc <USB_ReadInterrupts>
 80081e4:	4603      	mov	r3, r0
 80081e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081ee:	d155      	bne.n	800829c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081f0:	2301      	movs	r3, #1
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f4:	e045      	b.n	8008282 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820a:	4613      	mov	r3, r2
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d12e      	bne.n	800827c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800821e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008220:	2b00      	cmp	r3, #0
 8008222:	da2b      	bge.n	800827c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8008230:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008234:	429a      	cmp	r2, r3
 8008236:	d121      	bne.n	800827c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800823c:	4613      	mov	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800824a:	2201      	movs	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	69fa      	ldr	r2, [r7, #28]
 8008270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008274:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008278:	6053      	str	r3, [r2, #4]
            break;
 800827a:	e007      	b.n	800828c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800827c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827e:	3301      	adds	r3, #1
 8008280:	627b      	str	r3, [r7, #36]	@ 0x24
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008288:	429a      	cmp	r2, r3
 800828a:	d3b4      	bcc.n	80081f6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695a      	ldr	r2, [r3, #20]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800829a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f003 fb2b 	bl	800b8fc <USB_ReadInterrupts>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b0:	d10a      	bne.n	80082c8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f005 fb52 	bl	800d95c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80082c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f003 fb15 	bl	800b8fc <USB_ReadInterrupts>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d115      	bne.n	8008308 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f005 fb42 	bl	800d978 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6859      	ldr	r1, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	430a      	orrs	r2, r1
 8008302:	605a      	str	r2, [r3, #4]
 8008304:	e000      	b.n	8008308 <HAL_PCD_IRQHandler+0x938>
      return;
 8008306:	bf00      	nop
    }
  }
}
 8008308:	3734      	adds	r7, #52	@ 0x34
 800830a:	46bd      	mov	sp, r7
 800830c:	bd90      	pop	{r4, r7, pc}

0800830e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_PCD_SetAddress+0x1a>
 8008324:	2302      	movs	r3, #2
 8008326:	e013      	b.n	8008350 <HAL_PCD_SetAddress+0x42>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f003 fa73 	bl	800b82c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	4608      	mov	r0, r1
 8008362:	4611      	mov	r1, r2
 8008364:	461a      	mov	r2, r3
 8008366:	4603      	mov	r3, r0
 8008368:	70fb      	strb	r3, [r7, #3]
 800836a:	460b      	mov	r3, r1
 800836c:	803b      	strh	r3, [r7, #0]
 800836e:	4613      	mov	r3, r2
 8008370:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800837a:	2b00      	cmp	r3, #0
 800837c:	da0f      	bge.n	800839e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800837e:	78fb      	ldrb	r3, [r7, #3]
 8008380:	f003 020f 	and.w	r2, r3, #15
 8008384:	4613      	mov	r3, r2
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	3338      	adds	r3, #56	@ 0x38
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	3304      	adds	r3, #4
 8008394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2201      	movs	r2, #1
 800839a:	705a      	strb	r2, [r3, #1]
 800839c:	e00f      	b.n	80083be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	f003 020f 	and.w	r2, r3, #15
 80083a4:	4613      	mov	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	4413      	add	r3, r2
 80083b4:	3304      	adds	r3, #4
 80083b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	f003 030f 	and.w	r3, r3, #15
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80083ca:	883a      	ldrh	r2, [r7, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	78ba      	ldrb	r2, [r7, #2]
 80083d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d004      	beq.n	80083e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80083e8:	78bb      	ldrb	r3, [r7, #2]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d102      	bne.n	80083f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_PCD_EP_Open+0xaa>
 80083fe:	2302      	movs	r3, #2
 8008400:	e00e      	b.n	8008420 <HAL_PCD_EP_Open+0xc8>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68f9      	ldr	r1, [r7, #12]
 8008410:	4618      	mov	r0, r3
 8008412:	f002 faf3 	bl	800a9fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800841e:	7afb      	ldrb	r3, [r7, #11]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008438:	2b00      	cmp	r3, #0
 800843a:	da0f      	bge.n	800845c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	f003 020f 	and.w	r2, r3, #15
 8008442:	4613      	mov	r3, r2
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	3338      	adds	r3, #56	@ 0x38
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	4413      	add	r3, r2
 8008450:	3304      	adds	r3, #4
 8008452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	705a      	strb	r2, [r3, #1]
 800845a:	e00f      	b.n	800847c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	f003 020f 	and.w	r2, r3, #15
 8008462:	4613      	mov	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	3304      	adds	r3, #4
 8008474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	b2da      	uxtb	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_PCD_EP_Close+0x6e>
 8008492:	2302      	movs	r3, #2
 8008494:	e00e      	b.n	80084b4 <HAL_PCD_EP_Close+0x8c>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68f9      	ldr	r1, [r7, #12]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f002 fb31 	bl	800ab0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	460b      	mov	r3, r1
 80084ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	f003 020f 	and.w	r2, r3, #15
 80084d2:	4613      	mov	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4413      	add	r3, r2
 80084e2:	3304      	adds	r3, #4
 80084e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2200      	movs	r2, #0
 80084f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2200      	movs	r2, #0
 80084fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084fe:	7afb      	ldrb	r3, [r7, #11]
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	b2da      	uxtb	r2, r3
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d102      	bne.n	8008518 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	f003 030f 	and.w	r3, r3, #15
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	461a      	mov	r2, r3
 800852e:	6979      	ldr	r1, [r7, #20]
 8008530:	f002 fe10 	bl	800b154 <USB_EP0StartXfer>
 8008534:	e008      	b.n	8008548 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	b2db      	uxtb	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	6979      	ldr	r1, [r7, #20]
 8008544:	f002 fbbe 	bl	800acc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b086      	sub	sp, #24
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	460b      	mov	r3, r1
 8008560:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	4613      	mov	r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	3338      	adds	r3, #56	@ 0x38
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	3304      	adds	r3, #4
 8008578:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2200      	movs	r2, #0
 800858a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2201      	movs	r2, #1
 8008590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008592:	7afb      	ldrb	r3, [r7, #11]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	b2da      	uxtb	r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d102      	bne.n	80085ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d109      	bne.n	80085ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	6979      	ldr	r1, [r7, #20]
 80085c4:	f002 fdc6 	bl	800b154 <USB_EP0StartXfer>
 80085c8:	e008      	b.n	80085dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	6979      	ldr	r1, [r7, #20]
 80085d8:	f002 fb74 	bl	800acc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	460b      	mov	r3, r1
 80085f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	f003 020f 	and.w	r2, r3, #15
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d901      	bls.n	8008604 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e050      	b.n	80086a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008608:	2b00      	cmp	r3, #0
 800860a:	da0f      	bge.n	800862c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	f003 020f 	and.w	r2, r3, #15
 8008612:	4613      	mov	r3, r2
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	3338      	adds	r3, #56	@ 0x38
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	4413      	add	r3, r2
 8008620:	3304      	adds	r3, #4
 8008622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	705a      	strb	r2, [r3, #1]
 800862a:	e00d      	b.n	8008648 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800862c:	78fa      	ldrb	r2, [r7, #3]
 800862e:	4613      	mov	r3, r2
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	3304      	adds	r3, #4
 8008640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008660:	2b01      	cmp	r3, #1
 8008662:	d101      	bne.n	8008668 <HAL_PCD_EP_SetStall+0x82>
 8008664:	2302      	movs	r3, #2
 8008666:	e01e      	b.n	80086a6 <HAL_PCD_EP_SetStall+0xc0>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	4618      	mov	r0, r3
 8008678:	f003 f804 	bl	800b684 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	f003 030f 	and.w	r3, r3, #15
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	b2d9      	uxtb	r1, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008696:	461a      	mov	r2, r3
 8008698:	f003 f9f4 	bl	800ba84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	f003 020f 	and.w	r2, r3, #15
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d901      	bls.n	80086cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e042      	b.n	8008752 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80086cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	da0f      	bge.n	80086f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	f003 020f 	and.w	r2, r3, #15
 80086da:	4613      	mov	r3, r2
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	3338      	adds	r3, #56	@ 0x38
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	3304      	adds	r3, #4
 80086ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	705a      	strb	r2, [r3, #1]
 80086f2:	e00f      	b.n	8008714 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	f003 020f 	and.w	r2, r3, #15
 80086fa:	4613      	mov	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4413      	add	r3, r2
 800870a:	3304      	adds	r3, #4
 800870c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	b2da      	uxtb	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_PCD_EP_ClrStall+0x86>
 8008730:	2302      	movs	r3, #2
 8008732:	e00e      	b.n	8008752 <HAL_PCD_EP_ClrStall+0xa4>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68f9      	ldr	r1, [r7, #12]
 8008742:	4618      	mov	r0, r3
 8008744:	f003 f80c 	bl	800b760 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800876a:	2b00      	cmp	r3, #0
 800876c:	da0c      	bge.n	8008788 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	f003 020f 	and.w	r2, r3, #15
 8008774:	4613      	mov	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	3338      	adds	r3, #56	@ 0x38
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	3304      	adds	r3, #4
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	e00c      	b.n	80087a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	f003 020f 	and.w	r2, r3, #15
 800878e:	4613      	mov	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	4413      	add	r3, r2
 800879e:	3304      	adds	r3, #4
 80087a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f002 fe2b 	bl	800b404 <USB_EPStopXfer>
 80087ae:	4603      	mov	r3, r0
 80087b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80087b2:	7afb      	ldrb	r3, [r7, #11]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	@ 0x28
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	4613      	mov	r3, r2
 80087d4:	00db      	lsls	r3, r3, #3
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	3338      	adds	r3, #56	@ 0x38
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	3304      	adds	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1a      	ldr	r2, [r3, #32]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d901      	bls.n	80087f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e06c      	b.n	80088ce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	699a      	ldr	r2, [r3, #24]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a1b      	ldr	r3, [r3, #32]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	69fa      	ldr	r2, [r7, #28]
 8008806:	429a      	cmp	r2, r3
 8008808:	d902      	bls.n	8008810 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3303      	adds	r3, #3
 8008814:	089b      	lsrs	r3, r3, #2
 8008816:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008818:	e02b      	b.n	8008872 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	429a      	cmp	r2, r3
 800882e:	d902      	bls.n	8008836 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	3303      	adds	r3, #3
 800883a:	089b      	lsrs	r3, r3, #2
 800883c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6919      	ldr	r1, [r3, #16]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	b2da      	uxtb	r2, r3
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800884e:	b2db      	uxtb	r3, r3
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	4603      	mov	r3, r0
 8008854:	6978      	ldr	r0, [r7, #20]
 8008856:	f002 fe7f 	bl	800b558 <USB_WritePacket>

    ep->xfer_buff  += len;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	691a      	ldr	r2, [r3, #16]
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	441a      	add	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a1a      	ldr	r2, [r3, #32]
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	441a      	add	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	429a      	cmp	r2, r3
 8008886:	d809      	bhi.n	800889c <PCD_WriteEmptyTxFifo+0xe0>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a1a      	ldr	r2, [r3, #32]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008890:	429a      	cmp	r2, r3
 8008892:	d203      	bcs.n	800889c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1be      	bne.n	800881a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d811      	bhi.n	80088cc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	2201      	movs	r2, #1
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	6939      	ldr	r1, [r7, #16]
 80088c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088c8:	4013      	ands	r3, r2
 80088ca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3720      	adds	r7, #32
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	333c      	adds	r3, #60	@ 0x3c
 80088f0:	3304      	adds	r3, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d17b      	bne.n	8008a06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d015      	beq.n	8008944 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	4a61      	ldr	r2, [pc, #388]	@ (8008aa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800891c:	4293      	cmp	r3, r2
 800891e:	f240 80b9 	bls.w	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 80b3 	beq.w	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800893a:	461a      	mov	r2, r3
 800893c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008940:	6093      	str	r3, [r2, #8]
 8008942:	e0a7      	b.n	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	2b00      	cmp	r3, #0
 800894c:	d009      	beq.n	8008962 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895a:	461a      	mov	r2, r3
 800895c:	2320      	movs	r3, #32
 800895e:	6093      	str	r3, [r2, #8]
 8008960:	e098      	b.n	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 8093 	bne.w	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4a4b      	ldr	r2, [pc, #300]	@ (8008aa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d90f      	bls.n	8008996 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00a      	beq.n	8008996 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898c:	461a      	mov	r2, r3
 800898e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008992:	6093      	str	r3, [r2, #8]
 8008994:	e07e      	b.n	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	4613      	mov	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	3304      	adds	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	0159      	lsls	r1, r3, #5
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	440b      	add	r3, r1
 80089b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c2:	1ad2      	subs	r2, r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d114      	bne.n	80089f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d109      	bne.n	80089ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6818      	ldr	r0, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80089e0:	461a      	mov	r2, r3
 80089e2:	2101      	movs	r1, #1
 80089e4:	f003 f84e 	bl	800ba84 <USB_EP0_OutStart>
 80089e8:	e006      	b.n	80089f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	691a      	ldr	r2, [r3, #16]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	441a      	add	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f004 fef2 	bl	800d7e8 <HAL_PCD_DataOutStageCallback>
 8008a04:	e046      	b.n	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	4a26      	ldr	r2, [pc, #152]	@ (8008aa4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d124      	bne.n	8008a58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00a      	beq.n	8008a2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a24:	461a      	mov	r2, r3
 8008a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a2a:	6093      	str	r3, [r2, #8]
 8008a2c:	e032      	b.n	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a44:	461a      	mov	r2, r3
 8008a46:	2320      	movs	r3, #32
 8008a48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f004 fec9 	bl	800d7e8 <HAL_PCD_DataOutStageCallback>
 8008a56:	e01d      	b.n	8008a94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d114      	bne.n	8008a88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	4613      	mov	r3, r2
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d108      	bne.n	8008a88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008a80:	461a      	mov	r2, r3
 8008a82:	2100      	movs	r1, #0
 8008a84:	f002 fffe 	bl	800ba84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f004 feaa 	bl	800d7e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3720      	adds	r7, #32
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	4f54300a 	.word	0x4f54300a
 8008aa4:	4f54310a 	.word	0x4f54310a

08008aa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	333c      	adds	r3, #60	@ 0x3c
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4a15      	ldr	r2, [pc, #84]	@ (8008b30 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d90e      	bls.n	8008afc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d009      	beq.n	8008afc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af4:	461a      	mov	r2, r3
 8008af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008afa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f004 fe61 	bl	800d7c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4a0a      	ldr	r2, [pc, #40]	@ (8008b30 <PCD_EP_OutSetupPacket_int+0x88>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d90c      	bls.n	8008b24 <PCD_EP_OutSetupPacket_int+0x7c>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d108      	bne.n	8008b24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6818      	ldr	r0, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	2101      	movs	r1, #1
 8008b20:	f002 ffb0 	bl	800ba84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	4f54300a 	.word	0x4f54300a

08008b34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
 8008b40:	4613      	mov	r3, r2
 8008b42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d107      	bne.n	8008b62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008b52:	883b      	ldrh	r3, [r7, #0]
 8008b54:	0419      	lsls	r1, r3, #16
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b60:	e028      	b.n	8008bb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b68:	0c1b      	lsrs	r3, r3, #16
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
 8008b74:	e00d      	b.n	8008b92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	3340      	adds	r3, #64	@ 0x40
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	0c1b      	lsrs	r3, r3, #16
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	4413      	add	r3, r2
 8008b8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
 8008b92:	7bfa      	ldrb	r2, [r7, #15]
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d3ec      	bcc.n	8008b76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008b9c:	883b      	ldrh	r3, [r7, #0]
 8008b9e:	0418      	lsls	r0, r3, #16
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	4302      	orrs	r2, r0
 8008bac:	3340      	adds	r3, #64	@ 0x40
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	887a      	ldrh	r2, [r7, #2]
 8008bd4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e267      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d075      	beq.n	8008d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c1a:	4b88      	ldr	r3, [pc, #544]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f003 030c 	and.w	r3, r3, #12
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d00c      	beq.n	8008c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c26:	4b85      	ldr	r3, [pc, #532]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c2e:	2b08      	cmp	r3, #8
 8008c30:	d112      	bne.n	8008c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c32:	4b82      	ldr	r3, [pc, #520]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c3e:	d10b      	bne.n	8008c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c40:	4b7e      	ldr	r3, [pc, #504]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d05b      	beq.n	8008d04 <HAL_RCC_OscConfig+0x108>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d157      	bne.n	8008d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e242      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c60:	d106      	bne.n	8008c70 <HAL_RCC_OscConfig+0x74>
 8008c62:	4b76      	ldr	r3, [pc, #472]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a75      	ldr	r2, [pc, #468]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	e01d      	b.n	8008cac <HAL_RCC_OscConfig+0xb0>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c78:	d10c      	bne.n	8008c94 <HAL_RCC_OscConfig+0x98>
 8008c7a:	4b70      	ldr	r3, [pc, #448]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a6f      	ldr	r2, [pc, #444]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	4b6d      	ldr	r3, [pc, #436]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e00b      	b.n	8008cac <HAL_RCC_OscConfig+0xb0>
 8008c94:	4b69      	ldr	r3, [pc, #420]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a68      	ldr	r2, [pc, #416]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	4b66      	ldr	r3, [pc, #408]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a65      	ldr	r2, [pc, #404]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d013      	beq.n	8008cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb4:	f7fa fee0 	bl	8003a78 <HAL_GetTick>
 8008cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cba:	e008      	b.n	8008cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cbc:	f7fa fedc 	bl	8003a78 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b64      	cmp	r3, #100	@ 0x64
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e207      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cce:	4b5b      	ldr	r3, [pc, #364]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f0      	beq.n	8008cbc <HAL_RCC_OscConfig+0xc0>
 8008cda:	e014      	b.n	8008d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cdc:	f7fa fecc 	bl	8003a78 <HAL_GetTick>
 8008ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ce4:	f7fa fec8 	bl	8003a78 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b64      	cmp	r3, #100	@ 0x64
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e1f3      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cf6:	4b51      	ldr	r3, [pc, #324]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f0      	bne.n	8008ce4 <HAL_RCC_OscConfig+0xe8>
 8008d02:	e000      	b.n	8008d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d063      	beq.n	8008dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d12:	4b4a      	ldr	r3, [pc, #296]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f003 030c 	and.w	r3, r3, #12
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00b      	beq.n	8008d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d1e:	4b47      	ldr	r3, [pc, #284]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d11c      	bne.n	8008d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d2a:	4b44      	ldr	r3, [pc, #272]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d116      	bne.n	8008d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d36:	4b41      	ldr	r3, [pc, #260]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <HAL_RCC_OscConfig+0x152>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d001      	beq.n	8008d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e1c7      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	4937      	ldr	r1, [pc, #220]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d62:	e03a      	b.n	8008dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d020      	beq.n	8008dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d6c:	4b34      	ldr	r3, [pc, #208]	@ (8008e40 <HAL_RCC_OscConfig+0x244>)
 8008d6e:	2201      	movs	r2, #1
 8008d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d72:	f7fa fe81 	bl	8003a78 <HAL_GetTick>
 8008d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d78:	e008      	b.n	8008d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d7a:	f7fa fe7d 	bl	8003a78 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e1a8      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0f0      	beq.n	8008d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d98:	4b28      	ldr	r3, [pc, #160]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	4925      	ldr	r1, [pc, #148]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	600b      	str	r3, [r1, #0]
 8008dac:	e015      	b.n	8008dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dae:	4b24      	ldr	r3, [pc, #144]	@ (8008e40 <HAL_RCC_OscConfig+0x244>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db4:	f7fa fe60 	bl	8003a78 <HAL_GetTick>
 8008db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dbc:	f7fa fe5c 	bl	8003a78 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e187      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dce:	4b1b      	ldr	r3, [pc, #108]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1f0      	bne.n	8008dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d036      	beq.n	8008e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d016      	beq.n	8008e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dee:	4b15      	ldr	r3, [pc, #84]	@ (8008e44 <HAL_RCC_OscConfig+0x248>)
 8008df0:	2201      	movs	r2, #1
 8008df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df4:	f7fa fe40 	bl	8003a78 <HAL_GetTick>
 8008df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dfa:	e008      	b.n	8008e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dfc:	f7fa fe3c 	bl	8003a78 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e167      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e3c <HAL_RCC_OscConfig+0x240>)
 8008e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0f0      	beq.n	8008dfc <HAL_RCC_OscConfig+0x200>
 8008e1a:	e01b      	b.n	8008e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e1c:	4b09      	ldr	r3, [pc, #36]	@ (8008e44 <HAL_RCC_OscConfig+0x248>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e22:	f7fa fe29 	bl	8003a78 <HAL_GetTick>
 8008e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e28:	e00e      	b.n	8008e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e2a:	f7fa fe25 	bl	8003a78 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d907      	bls.n	8008e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e150      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
 8008e3c:	40023800 	.word	0x40023800
 8008e40:	42470000 	.word	0x42470000
 8008e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e48:	4b88      	ldr	r3, [pc, #544]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1ea      	bne.n	8008e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 8097 	beq.w	8008f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e66:	4b81      	ldr	r3, [pc, #516]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10f      	bne.n	8008e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e72:	2300      	movs	r3, #0
 8008e74:	60bb      	str	r3, [r7, #8]
 8008e76:	4b7d      	ldr	r3, [pc, #500]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e82:	4b7a      	ldr	r3, [pc, #488]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e8a:	60bb      	str	r3, [r7, #8]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e92:	4b77      	ldr	r3, [pc, #476]	@ (8009070 <HAL_RCC_OscConfig+0x474>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d118      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e9e:	4b74      	ldr	r3, [pc, #464]	@ (8009070 <HAL_RCC_OscConfig+0x474>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a73      	ldr	r2, [pc, #460]	@ (8009070 <HAL_RCC_OscConfig+0x474>)
 8008ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eaa:	f7fa fde5 	bl	8003a78 <HAL_GetTick>
 8008eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb0:	e008      	b.n	8008ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eb2:	f7fa fde1 	bl	8003a78 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e10c      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8009070 <HAL_RCC_OscConfig+0x474>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0f0      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d106      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x2ea>
 8008ed8:	4b64      	ldr	r3, [pc, #400]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008edc:	4a63      	ldr	r2, [pc, #396]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008ede:	f043 0301 	orr.w	r3, r3, #1
 8008ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ee4:	e01c      	b.n	8008f20 <HAL_RCC_OscConfig+0x324>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	d10c      	bne.n	8008f08 <HAL_RCC_OscConfig+0x30c>
 8008eee:	4b5f      	ldr	r3, [pc, #380]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008ef4:	f043 0304 	orr.w	r3, r3, #4
 8008ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008efa:	4b5c      	ldr	r3, [pc, #368]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008efe:	4a5b      	ldr	r2, [pc, #364]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f00:	f043 0301 	orr.w	r3, r3, #1
 8008f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f06:	e00b      	b.n	8008f20 <HAL_RCC_OscConfig+0x324>
 8008f08:	4b58      	ldr	r3, [pc, #352]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f0c:	4a57      	ldr	r2, [pc, #348]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f0e:	f023 0301 	bic.w	r3, r3, #1
 8008f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f14:	4b55      	ldr	r3, [pc, #340]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f18:	4a54      	ldr	r2, [pc, #336]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f1a:	f023 0304 	bic.w	r3, r3, #4
 8008f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d015      	beq.n	8008f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f28:	f7fa fda6 	bl	8003a78 <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f2e:	e00a      	b.n	8008f46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f30:	f7fa fda2 	bl	8003a78 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e0cb      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f46:	4b49      	ldr	r3, [pc, #292]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0ee      	beq.n	8008f30 <HAL_RCC_OscConfig+0x334>
 8008f52:	e014      	b.n	8008f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f54:	f7fa fd90 	bl	8003a78 <HAL_GetTick>
 8008f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f5a:	e00a      	b.n	8008f72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f5c:	f7fa fd8c 	bl	8003a78 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e0b5      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f72:	4b3e      	ldr	r3, [pc, #248]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1ee      	bne.n	8008f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d105      	bne.n	8008f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f84:	4b39      	ldr	r3, [pc, #228]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f88:	4a38      	ldr	r2, [pc, #224]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 80a1 	beq.w	80090dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f9a:	4b34      	ldr	r3, [pc, #208]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f003 030c 	and.w	r3, r3, #12
 8008fa2:	2b08      	cmp	r3, #8
 8008fa4:	d05c      	beq.n	8009060 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d141      	bne.n	8009032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fae:	4b31      	ldr	r3, [pc, #196]	@ (8009074 <HAL_RCC_OscConfig+0x478>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb4:	f7fa fd60 	bl	8003a78 <HAL_GetTick>
 8008fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fba:	e008      	b.n	8008fce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fbc:	f7fa fd5c 	bl	8003a78 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d901      	bls.n	8008fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e087      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fce:	4b27      	ldr	r3, [pc, #156]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1f0      	bne.n	8008fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69da      	ldr	r2, [r3, #28]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	019b      	lsls	r3, r3, #6
 8008fea:	431a      	orrs	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff0:	085b      	lsrs	r3, r3, #1
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	041b      	lsls	r3, r3, #16
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffc:	061b      	lsls	r3, r3, #24
 8008ffe:	491b      	ldr	r1, [pc, #108]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8009000:	4313      	orrs	r3, r2
 8009002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009004:	4b1b      	ldr	r3, [pc, #108]	@ (8009074 <HAL_RCC_OscConfig+0x478>)
 8009006:	2201      	movs	r2, #1
 8009008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800900a:	f7fa fd35 	bl	8003a78 <HAL_GetTick>
 800900e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009010:	e008      	b.n	8009024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009012:	f7fa fd31 	bl	8003a78 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d901      	bls.n	8009024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e05c      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009024:	4b11      	ldr	r3, [pc, #68]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0f0      	beq.n	8009012 <HAL_RCC_OscConfig+0x416>
 8009030:	e054      	b.n	80090dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009032:	4b10      	ldr	r3, [pc, #64]	@ (8009074 <HAL_RCC_OscConfig+0x478>)
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009038:	f7fa fd1e 	bl	8003a78 <HAL_GetTick>
 800903c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800903e:	e008      	b.n	8009052 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009040:	f7fa fd1a 	bl	8003a78 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2b02      	cmp	r3, #2
 800904c:	d901      	bls.n	8009052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e045      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009052:	4b06      	ldr	r3, [pc, #24]	@ (800906c <HAL_RCC_OscConfig+0x470>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f0      	bne.n	8009040 <HAL_RCC_OscConfig+0x444>
 800905e:	e03d      	b.n	80090dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d107      	bne.n	8009078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e038      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
 800906c:	40023800 	.word	0x40023800
 8009070:	40007000 	.word	0x40007000
 8009074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009078:	4b1b      	ldr	r3, [pc, #108]	@ (80090e8 <HAL_RCC_OscConfig+0x4ec>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d028      	beq.n	80090d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009090:	429a      	cmp	r2, r3
 8009092:	d121      	bne.n	80090d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800909e:	429a      	cmp	r2, r3
 80090a0:	d11a      	bne.n	80090d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80090a8:	4013      	ands	r3, r2
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80090ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d111      	bne.n	80090d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	3b01      	subs	r3, #1
 80090c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d107      	bne.n	80090d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d001      	beq.n	80090dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	40023800 	.word	0x40023800

080090ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e0cc      	b.n	800929a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009100:	4b68      	ldr	r3, [pc, #416]	@ (80092a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0307 	and.w	r3, r3, #7
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d90c      	bls.n	8009128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800910e:	4b65      	ldr	r3, [pc, #404]	@ (80092a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009116:	4b63      	ldr	r3, [pc, #396]	@ (80092a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d001      	beq.n	8009128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e0b8      	b.n	800929a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d020      	beq.n	8009176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009140:	4b59      	ldr	r3, [pc, #356]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	4a58      	ldr	r2, [pc, #352]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009146:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800914a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009158:	4b53      	ldr	r3, [pc, #332]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	4a52      	ldr	r2, [pc, #328]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 800915e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009164:	4b50      	ldr	r3, [pc, #320]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	494d      	ldr	r1, [pc, #308]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009172:	4313      	orrs	r3, r2
 8009174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d044      	beq.n	800920c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d107      	bne.n	800919a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800918a:	4b47      	ldr	r3, [pc, #284]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d119      	bne.n	80091ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e07f      	b.n	800929a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d003      	beq.n	80091aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d107      	bne.n	80091ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091aa:	4b3f      	ldr	r3, [pc, #252]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d109      	bne.n	80091ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e06f      	b.n	800929a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ba:	4b3b      	ldr	r3, [pc, #236]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e067      	b.n	800929a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091ca:	4b37      	ldr	r3, [pc, #220]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f023 0203 	bic.w	r2, r3, #3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	4934      	ldr	r1, [pc, #208]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091dc:	f7fa fc4c 	bl	8003a78 <HAL_GetTick>
 80091e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091e2:	e00a      	b.n	80091fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091e4:	f7fa fc48 	bl	8003a78 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e04f      	b.n	800929a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091fa:	4b2b      	ldr	r3, [pc, #172]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f003 020c 	and.w	r2, r3, #12
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	429a      	cmp	r2, r3
 800920a:	d1eb      	bne.n	80091e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800920c:	4b25      	ldr	r3, [pc, #148]	@ (80092a4 <HAL_RCC_ClockConfig+0x1b8>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0307 	and.w	r3, r3, #7
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	429a      	cmp	r2, r3
 8009218:	d20c      	bcs.n	8009234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800921a:	4b22      	ldr	r3, [pc, #136]	@ (80092a4 <HAL_RCC_ClockConfig+0x1b8>)
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009222:	4b20      	ldr	r3, [pc, #128]	@ (80092a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0307 	and.w	r3, r3, #7
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d001      	beq.n	8009234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e032      	b.n	800929a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	d008      	beq.n	8009252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009240:	4b19      	ldr	r3, [pc, #100]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	4916      	ldr	r1, [pc, #88]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 800924e:	4313      	orrs	r3, r2
 8009250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0308 	and.w	r3, r3, #8
 800925a:	2b00      	cmp	r3, #0
 800925c:	d009      	beq.n	8009272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800925e:	4b12      	ldr	r3, [pc, #72]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	00db      	lsls	r3, r3, #3
 800926c:	490e      	ldr	r1, [pc, #56]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 800926e:	4313      	orrs	r3, r2
 8009270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009272:	f000 f821 	bl	80092b8 <HAL_RCC_GetSysClockFreq>
 8009276:	4602      	mov	r2, r0
 8009278:	4b0b      	ldr	r3, [pc, #44]	@ (80092a8 <HAL_RCC_ClockConfig+0x1bc>)
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	091b      	lsrs	r3, r3, #4
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	490a      	ldr	r1, [pc, #40]	@ (80092ac <HAL_RCC_ClockConfig+0x1c0>)
 8009284:	5ccb      	ldrb	r3, [r1, r3]
 8009286:	fa22 f303 	lsr.w	r3, r2, r3
 800928a:	4a09      	ldr	r2, [pc, #36]	@ (80092b0 <HAL_RCC_ClockConfig+0x1c4>)
 800928c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800928e:	4b09      	ldr	r3, [pc, #36]	@ (80092b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	f7fa fbac 	bl	80039f0 <HAL_InitTick>

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	40023c00 	.word	0x40023c00
 80092a8:	40023800 	.word	0x40023800
 80092ac:	0800f0f4 	.word	0x0800f0f4
 80092b0:	2000000c 	.word	0x2000000c
 80092b4:	20000010 	.word	0x20000010

080092b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092bc:	b090      	sub	sp, #64	@ 0x40
 80092be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092c8:	2300      	movs	r3, #0
 80092ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092d0:	4b59      	ldr	r3, [pc, #356]	@ (8009438 <HAL_RCC_GetSysClockFreq+0x180>)
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f003 030c 	and.w	r3, r3, #12
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d00d      	beq.n	80092f8 <HAL_RCC_GetSysClockFreq+0x40>
 80092dc:	2b08      	cmp	r3, #8
 80092de:	f200 80a1 	bhi.w	8009424 <HAL_RCC_GetSysClockFreq+0x16c>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d002      	beq.n	80092ec <HAL_RCC_GetSysClockFreq+0x34>
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d003      	beq.n	80092f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80092ea:	e09b      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092ec:	4b53      	ldr	r3, [pc, #332]	@ (800943c <HAL_RCC_GetSysClockFreq+0x184>)
 80092ee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80092f0:	e09b      	b.n	800942a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092f2:	4b53      	ldr	r3, [pc, #332]	@ (8009440 <HAL_RCC_GetSysClockFreq+0x188>)
 80092f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80092f6:	e098      	b.n	800942a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092f8:	4b4f      	ldr	r3, [pc, #316]	@ (8009438 <HAL_RCC_GetSysClockFreq+0x180>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009302:	4b4d      	ldr	r3, [pc, #308]	@ (8009438 <HAL_RCC_GetSysClockFreq+0x180>)
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d028      	beq.n	8009360 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800930e:	4b4a      	ldr	r3, [pc, #296]	@ (8009438 <HAL_RCC_GetSysClockFreq+0x180>)
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	099b      	lsrs	r3, r3, #6
 8009314:	2200      	movs	r2, #0
 8009316:	623b      	str	r3, [r7, #32]
 8009318:	627a      	str	r2, [r7, #36]	@ 0x24
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009320:	2100      	movs	r1, #0
 8009322:	4b47      	ldr	r3, [pc, #284]	@ (8009440 <HAL_RCC_GetSysClockFreq+0x188>)
 8009324:	fb03 f201 	mul.w	r2, r3, r1
 8009328:	2300      	movs	r3, #0
 800932a:	fb00 f303 	mul.w	r3, r0, r3
 800932e:	4413      	add	r3, r2
 8009330:	4a43      	ldr	r2, [pc, #268]	@ (8009440 <HAL_RCC_GetSysClockFreq+0x188>)
 8009332:	fba0 1202 	umull	r1, r2, r0, r2
 8009336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009338:	460a      	mov	r2, r1
 800933a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800933c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800933e:	4413      	add	r3, r2
 8009340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009344:	2200      	movs	r2, #0
 8009346:	61bb      	str	r3, [r7, #24]
 8009348:	61fa      	str	r2, [r7, #28]
 800934a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800934e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009352:	f7f7 fa9b 	bl	800088c <__aeabi_uldivmod>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4613      	mov	r3, r2
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800935e:	e053      	b.n	8009408 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009360:	4b35      	ldr	r3, [pc, #212]	@ (8009438 <HAL_RCC_GetSysClockFreq+0x180>)
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	099b      	lsrs	r3, r3, #6
 8009366:	2200      	movs	r2, #0
 8009368:	613b      	str	r3, [r7, #16]
 800936a:	617a      	str	r2, [r7, #20]
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009372:	f04f 0b00 	mov.w	fp, #0
 8009376:	4652      	mov	r2, sl
 8009378:	465b      	mov	r3, fp
 800937a:	f04f 0000 	mov.w	r0, #0
 800937e:	f04f 0100 	mov.w	r1, #0
 8009382:	0159      	lsls	r1, r3, #5
 8009384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009388:	0150      	lsls	r0, r2, #5
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	ebb2 080a 	subs.w	r8, r2, sl
 8009392:	eb63 090b 	sbc.w	r9, r3, fp
 8009396:	f04f 0200 	mov.w	r2, #0
 800939a:	f04f 0300 	mov.w	r3, #0
 800939e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80093a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80093a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80093aa:	ebb2 0408 	subs.w	r4, r2, r8
 80093ae:	eb63 0509 	sbc.w	r5, r3, r9
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	00eb      	lsls	r3, r5, #3
 80093bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093c0:	00e2      	lsls	r2, r4, #3
 80093c2:	4614      	mov	r4, r2
 80093c4:	461d      	mov	r5, r3
 80093c6:	eb14 030a 	adds.w	r3, r4, sl
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	eb45 030b 	adc.w	r3, r5, fp
 80093d0:	607b      	str	r3, [r7, #4]
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093de:	4629      	mov	r1, r5
 80093e0:	028b      	lsls	r3, r1, #10
 80093e2:	4621      	mov	r1, r4
 80093e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093e8:	4621      	mov	r1, r4
 80093ea:	028a      	lsls	r2, r1, #10
 80093ec:	4610      	mov	r0, r2
 80093ee:	4619      	mov	r1, r3
 80093f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f2:	2200      	movs	r2, #0
 80093f4:	60bb      	str	r3, [r7, #8]
 80093f6:	60fa      	str	r2, [r7, #12]
 80093f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093fc:	f7f7 fa46 	bl	800088c <__aeabi_uldivmod>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4613      	mov	r3, r2
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009408:	4b0b      	ldr	r3, [pc, #44]	@ (8009438 <HAL_RCC_GetSysClockFreq+0x180>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	0c1b      	lsrs	r3, r3, #16
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	3301      	adds	r3, #1
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009418:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800941a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009420:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009422:	e002      	b.n	800942a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <HAL_RCC_GetSysClockFreq+0x184>)
 8009426:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800942a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800942c:	4618      	mov	r0, r3
 800942e:	3740      	adds	r7, #64	@ 0x40
 8009430:	46bd      	mov	sp, r7
 8009432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009436:	bf00      	nop
 8009438:	40023800 	.word	0x40023800
 800943c:	00f42400 	.word	0x00f42400
 8009440:	017d7840 	.word	0x017d7840

08009444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009448:	4b03      	ldr	r3, [pc, #12]	@ (8009458 <HAL_RCC_GetHCLKFreq+0x14>)
 800944a:	681b      	ldr	r3, [r3, #0]
}
 800944c:	4618      	mov	r0, r3
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	2000000c 	.word	0x2000000c

0800945c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009460:	f7ff fff0 	bl	8009444 <HAL_RCC_GetHCLKFreq>
 8009464:	4602      	mov	r2, r0
 8009466:	4b05      	ldr	r3, [pc, #20]	@ (800947c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	0a9b      	lsrs	r3, r3, #10
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	4903      	ldr	r1, [pc, #12]	@ (8009480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009472:	5ccb      	ldrb	r3, [r1, r3]
 8009474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009478:	4618      	mov	r0, r3
 800947a:	bd80      	pop	{r7, pc}
 800947c:	40023800 	.word	0x40023800
 8009480:	0800f104 	.word	0x0800f104

08009484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e041      	b.n	800951a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d106      	bne.n	80094b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7fa f8d2 	bl	8003654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f000 fb96 	bl	8009bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e041      	b.n	80095b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f839 	bl	80095c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2202      	movs	r2, #2
 8009552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3304      	adds	r3, #4
 800955e:	4619      	mov	r1, r3
 8009560:	4610      	mov	r0, r2
 8009562:	f000 fb47 	bl	8009bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e097      	b.n	8009718 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fa f87f 	bl	8003700 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2202      	movs	r2, #2
 8009606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009618:	f023 0307 	bic.w	r3, r3, #7
 800961c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f000 fae3 	bl	8009bf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	4313      	orrs	r3, r2
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	4313      	orrs	r3, r2
 800966c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009674:	f023 030c 	bic.w	r3, r3, #12
 8009678:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009680:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	021b      	lsls	r3, r3, #8
 8009690:	4313      	orrs	r3, r2
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	011a      	lsls	r2, r3, #4
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	031b      	lsls	r3, r3, #12
 80096a4:	4313      	orrs	r3, r2
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80096b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80096ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	011b      	lsls	r3, r3, #4
 80096c6:	4313      	orrs	r3, r2
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009730:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009738:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009740:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009748:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d110      	bne.n	8009772 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d102      	bne.n	800975c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009756:	7b7b      	ldrb	r3, [r7, #13]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d001      	beq.n	8009760 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e069      	b.n	8009834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009770:	e031      	b.n	80097d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b04      	cmp	r3, #4
 8009776:	d110      	bne.n	800979a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d102      	bne.n	8009784 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800977e:	7b3b      	ldrb	r3, [r7, #12]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d001      	beq.n	8009788 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e055      	b.n	8009834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009798:	e01d      	b.n	80097d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d108      	bne.n	80097b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d105      	bne.n	80097b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80097a6:	7b7b      	ldrb	r3, [r7, #13]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d102      	bne.n	80097b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80097ac:	7b3b      	ldrb	r3, [r7, #12]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d001      	beq.n	80097b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e03e      	b.n	8009834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2202      	movs	r2, #2
 80097c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_TIM_Encoder_Start+0xc4>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d008      	beq.n	80097f4 <HAL_TIM_Encoder_Start+0xd4>
 80097e2:	e00f      	b.n	8009804 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2201      	movs	r2, #1
 80097ea:	2100      	movs	r1, #0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fca7 	bl	800a140 <TIM_CCxChannelCmd>
      break;
 80097f2:	e016      	b.n	8009822 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2201      	movs	r2, #1
 80097fa:	2104      	movs	r1, #4
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fc9f 	bl	800a140 <TIM_CCxChannelCmd>
      break;
 8009802:	e00e      	b.n	8009822 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2201      	movs	r2, #1
 800980a:	2100      	movs	r1, #0
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fc97 	bl	800a140 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2201      	movs	r2, #1
 8009818:	2104      	movs	r1, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fc90 	bl	800a140 <TIM_CCxChannelCmd>
      break;
 8009820:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0201 	orr.w	r2, r2, #1
 8009830:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009856:	2302      	movs	r3, #2
 8009858:	e0ae      	b.n	80099b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b0c      	cmp	r3, #12
 8009866:	f200 809f 	bhi.w	80099a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800986a:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	080098a5 	.word	0x080098a5
 8009874:	080099a9 	.word	0x080099a9
 8009878:	080099a9 	.word	0x080099a9
 800987c:	080099a9 	.word	0x080099a9
 8009880:	080098e5 	.word	0x080098e5
 8009884:	080099a9 	.word	0x080099a9
 8009888:	080099a9 	.word	0x080099a9
 800988c:	080099a9 	.word	0x080099a9
 8009890:	08009927 	.word	0x08009927
 8009894:	080099a9 	.word	0x080099a9
 8009898:	080099a9 	.word	0x080099a9
 800989c:	080099a9 	.word	0x080099a9
 80098a0:	08009967 	.word	0x08009967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fa22 	bl	8009cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699a      	ldr	r2, [r3, #24]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 0208 	orr.w	r2, r2, #8
 80098be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 0204 	bic.w	r2, r2, #4
 80098ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6999      	ldr	r1, [r3, #24]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	691a      	ldr	r2, [r3, #16]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	619a      	str	r2, [r3, #24]
      break;
 80098e2:	e064      	b.n	80099ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68b9      	ldr	r1, [r7, #8]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fa68 	bl	8009dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	699a      	ldr	r2, [r3, #24]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699a      	ldr	r2, [r3, #24]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800990e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6999      	ldr	r1, [r3, #24]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	021a      	lsls	r2, r3, #8
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	619a      	str	r2, [r3, #24]
      break;
 8009924:	e043      	b.n	80099ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68b9      	ldr	r1, [r7, #8]
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fab3 	bl	8009e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69da      	ldr	r2, [r3, #28]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f042 0208 	orr.w	r2, r2, #8
 8009940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69da      	ldr	r2, [r3, #28]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f022 0204 	bic.w	r2, r2, #4
 8009950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69d9      	ldr	r1, [r3, #28]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	691a      	ldr	r2, [r3, #16]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	430a      	orrs	r2, r1
 8009962:	61da      	str	r2, [r3, #28]
      break;
 8009964:	e023      	b.n	80099ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fafd 	bl	8009f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69da      	ldr	r2, [r3, #28]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69da      	ldr	r2, [r3, #28]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69d9      	ldr	r1, [r3, #28]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	021a      	lsls	r2, r3, #8
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	61da      	str	r2, [r3, #28]
      break;
 80099a6:	e002      	b.n	80099ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	75fb      	strb	r3, [r7, #23]
      break;
 80099ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d101      	bne.n	80099dc <HAL_TIM_ConfigClockSource+0x1c>
 80099d8:	2302      	movs	r3, #2
 80099da:	e0b4      	b.n	8009b46 <HAL_TIM_ConfigClockSource+0x186>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80099fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a14:	d03e      	beq.n	8009a94 <HAL_TIM_ConfigClockSource+0xd4>
 8009a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a1a:	f200 8087 	bhi.w	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
 8009a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a22:	f000 8086 	beq.w	8009b32 <HAL_TIM_ConfigClockSource+0x172>
 8009a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a2a:	d87f      	bhi.n	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
 8009a2c:	2b70      	cmp	r3, #112	@ 0x70
 8009a2e:	d01a      	beq.n	8009a66 <HAL_TIM_ConfigClockSource+0xa6>
 8009a30:	2b70      	cmp	r3, #112	@ 0x70
 8009a32:	d87b      	bhi.n	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
 8009a34:	2b60      	cmp	r3, #96	@ 0x60
 8009a36:	d050      	beq.n	8009ada <HAL_TIM_ConfigClockSource+0x11a>
 8009a38:	2b60      	cmp	r3, #96	@ 0x60
 8009a3a:	d877      	bhi.n	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
 8009a3c:	2b50      	cmp	r3, #80	@ 0x50
 8009a3e:	d03c      	beq.n	8009aba <HAL_TIM_ConfigClockSource+0xfa>
 8009a40:	2b50      	cmp	r3, #80	@ 0x50
 8009a42:	d873      	bhi.n	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
 8009a44:	2b40      	cmp	r3, #64	@ 0x40
 8009a46:	d058      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x13a>
 8009a48:	2b40      	cmp	r3, #64	@ 0x40
 8009a4a:	d86f      	bhi.n	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
 8009a4c:	2b30      	cmp	r3, #48	@ 0x30
 8009a4e:	d064      	beq.n	8009b1a <HAL_TIM_ConfigClockSource+0x15a>
 8009a50:	2b30      	cmp	r3, #48	@ 0x30
 8009a52:	d86b      	bhi.n	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	d060      	beq.n	8009b1a <HAL_TIM_ConfigClockSource+0x15a>
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d867      	bhi.n	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d05c      	beq.n	8009b1a <HAL_TIM_ConfigClockSource+0x15a>
 8009a60:	2b10      	cmp	r3, #16
 8009a62:	d05a      	beq.n	8009b1a <HAL_TIM_ConfigClockSource+0x15a>
 8009a64:	e062      	b.n	8009b2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	6899      	ldr	r1, [r3, #8]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f000 fb43 	bl	800a100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	609a      	str	r2, [r3, #8]
      break;
 8009a92:	e04f      	b.n	8009b34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	6899      	ldr	r1, [r3, #8]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f000 fb2c 	bl	800a100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ab6:	609a      	str	r2, [r3, #8]
      break;
 8009ab8:	e03c      	b.n	8009b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	6859      	ldr	r1, [r3, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f000 faa0 	bl	800a00c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2150      	movs	r1, #80	@ 0x50
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 faf9 	bl	800a0ca <TIM_ITRx_SetConfig>
      break;
 8009ad8:	e02c      	b.n	8009b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	6859      	ldr	r1, [r3, #4]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f000 fabf 	bl	800a06a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2160      	movs	r1, #96	@ 0x60
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fae9 	bl	800a0ca <TIM_ITRx_SetConfig>
      break;
 8009af8:	e01c      	b.n	8009b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6818      	ldr	r0, [r3, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	6859      	ldr	r1, [r3, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f000 fa80 	bl	800a00c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2140      	movs	r1, #64	@ 0x40
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 fad9 	bl	800a0ca <TIM_ITRx_SetConfig>
      break;
 8009b18:	e00c      	b.n	8009b34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f000 fad0 	bl	800a0ca <TIM_ITRx_SetConfig>
      break;
 8009b2a:	e003      	b.n	8009b34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b30:	e000      	b.n	8009b34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d107      	bne.n	8009b8a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b88:	e02a      	b.n	8009be0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d107      	bne.n	8009ba4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2202      	movs	r2, #2
 8009b98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ba2:	e01d      	b.n	8009be0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d107      	bne.n	8009bbe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2204      	movs	r2, #4
 8009bb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bbc:	e010      	b.n	8009be0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d107      	bne.n	8009bd8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2208      	movs	r2, #8
 8009bcc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bd6:	e003      	b.n	8009be0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7ff ffb4 	bl	8009b4e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	771a      	strb	r2, [r3, #28]
}
 8009bec:	bf00      	nop
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a34      	ldr	r2, [pc, #208]	@ (8009cd8 <TIM_Base_SetConfig+0xe4>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00f      	beq.n	8009c2c <TIM_Base_SetConfig+0x38>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c12:	d00b      	beq.n	8009c2c <TIM_Base_SetConfig+0x38>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a31      	ldr	r2, [pc, #196]	@ (8009cdc <TIM_Base_SetConfig+0xe8>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d007      	beq.n	8009c2c <TIM_Base_SetConfig+0x38>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a30      	ldr	r2, [pc, #192]	@ (8009ce0 <TIM_Base_SetConfig+0xec>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d003      	beq.n	8009c2c <TIM_Base_SetConfig+0x38>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a2f      	ldr	r2, [pc, #188]	@ (8009ce4 <TIM_Base_SetConfig+0xf0>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d108      	bne.n	8009c3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a25      	ldr	r2, [pc, #148]	@ (8009cd8 <TIM_Base_SetConfig+0xe4>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d01b      	beq.n	8009c7e <TIM_Base_SetConfig+0x8a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c4c:	d017      	beq.n	8009c7e <TIM_Base_SetConfig+0x8a>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a22      	ldr	r2, [pc, #136]	@ (8009cdc <TIM_Base_SetConfig+0xe8>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d013      	beq.n	8009c7e <TIM_Base_SetConfig+0x8a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a21      	ldr	r2, [pc, #132]	@ (8009ce0 <TIM_Base_SetConfig+0xec>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d00f      	beq.n	8009c7e <TIM_Base_SetConfig+0x8a>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a20      	ldr	r2, [pc, #128]	@ (8009ce4 <TIM_Base_SetConfig+0xf0>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d00b      	beq.n	8009c7e <TIM_Base_SetConfig+0x8a>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce8 <TIM_Base_SetConfig+0xf4>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d007      	beq.n	8009c7e <TIM_Base_SetConfig+0x8a>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a1e      	ldr	r2, [pc, #120]	@ (8009cec <TIM_Base_SetConfig+0xf8>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <TIM_Base_SetConfig+0x8a>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a1d      	ldr	r2, [pc, #116]	@ (8009cf0 <TIM_Base_SetConfig+0xfc>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d108      	bne.n	8009c90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a08      	ldr	r2, [pc, #32]	@ (8009cd8 <TIM_Base_SetConfig+0xe4>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d103      	bne.n	8009cc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	615a      	str	r2, [r3, #20]
}
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	40000800 	.word	0x40000800
 8009ce4:	40000c00 	.word	0x40000c00
 8009ce8:	40014000 	.word	0x40014000
 8009cec:	40014400 	.word	0x40014400
 8009cf0:	40014800 	.word	0x40014800

08009cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	f023 0201 	bic.w	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0303 	bic.w	r3, r3, #3
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f023 0302 	bic.w	r3, r3, #2
 8009d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8009dbc <TIM_OC1_SetConfig+0xc8>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10c      	bne.n	8009d6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f023 0308 	bic.w	r3, r3, #8
 8009d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f023 0304 	bic.w	r3, r3, #4
 8009d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a13      	ldr	r2, [pc, #76]	@ (8009dbc <TIM_OC1_SetConfig+0xc8>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d111      	bne.n	8009d96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	621a      	str	r2, [r3, #32]
}
 8009db0:	bf00      	nop
 8009db2:	371c      	adds	r7, #28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	40010000 	.word	0x40010000

08009dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f023 0210 	bic.w	r2, r3, #16
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	021b      	lsls	r3, r3, #8
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f023 0320 	bic.w	r3, r3, #32
 8009e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009e94 <TIM_OC2_SetConfig+0xd4>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d10d      	bne.n	8009e3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a15      	ldr	r2, [pc, #84]	@ (8009e94 <TIM_OC2_SetConfig+0xd4>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d113      	bne.n	8009e6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	621a      	str	r2, [r3, #32]
}
 8009e86:	bf00      	nop
 8009e88:	371c      	adds	r7, #28
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	40010000 	.word	0x40010000

08009e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0303 	bic.w	r3, r3, #3
 8009ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	021b      	lsls	r3, r3, #8
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f68 <TIM_OC3_SetConfig+0xd0>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d10d      	bne.n	8009f12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a14      	ldr	r2, [pc, #80]	@ (8009f68 <TIM_OC3_SetConfig+0xd0>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d113      	bne.n	8009f42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	621a      	str	r2, [r3, #32]
}
 8009f5c:	bf00      	nop
 8009f5e:	371c      	adds	r7, #28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	40010000 	.word	0x40010000

08009f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	021b      	lsls	r3, r3, #8
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	031b      	lsls	r3, r3, #12
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a10      	ldr	r2, [pc, #64]	@ (800a008 <TIM_OC4_SetConfig+0x9c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d109      	bne.n	8009fe0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	019b      	lsls	r3, r3, #6
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	621a      	str	r2, [r3, #32]
}
 8009ffa:	bf00      	nop
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	40010000 	.word	0x40010000

0800a00c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	f023 0201 	bic.w	r2, r3, #1
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	4313      	orrs	r3, r2
 800a040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f023 030a 	bic.w	r3, r3, #10
 800a048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	4313      	orrs	r3, r2
 800a050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	621a      	str	r2, [r3, #32]
}
 800a05e:	bf00      	nop
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b087      	sub	sp, #28
 800a06e:	af00      	add	r7, sp, #0
 800a070:	60f8      	str	r0, [r7, #12]
 800a072:	60b9      	str	r1, [r7, #8]
 800a074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	f023 0210 	bic.w	r2, r3, #16
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	031b      	lsls	r3, r3, #12
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a0a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	621a      	str	r2, [r3, #32]
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b085      	sub	sp, #20
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	f043 0307 	orr.w	r3, r3, #7
 800a0ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	609a      	str	r2, [r3, #8]
}
 800a0f4:	bf00      	nop
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a11a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	021a      	lsls	r2, r3, #8
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	431a      	orrs	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4313      	orrs	r3, r2
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	609a      	str	r2, [r3, #8]
}
 800a134:	bf00      	nop
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f003 031f 	and.w	r3, r3, #31
 800a152:	2201      	movs	r2, #1
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a1a      	ldr	r2, [r3, #32]
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	43db      	mvns	r3, r3
 800a162:	401a      	ands	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a1a      	ldr	r2, [r3, #32]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 031f 	and.w	r3, r3, #31
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	fa01 f303 	lsl.w	r3, r1, r3
 800a178:	431a      	orrs	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	621a      	str	r2, [r3, #32]
}
 800a17e:	bf00      	nop
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e050      	b.n	800a246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d018      	beq.n	800a21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1f0:	d013      	beq.n	800a21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a18      	ldr	r2, [pc, #96]	@ (800a258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00e      	beq.n	800a21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a16      	ldr	r2, [pc, #88]	@ (800a25c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d009      	beq.n	800a21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a15      	ldr	r2, [pc, #84]	@ (800a260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d004      	beq.n	800a21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a13      	ldr	r2, [pc, #76]	@ (800a264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d10c      	bne.n	800a234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	4313      	orrs	r3, r2
 800a22a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	40010000 	.word	0x40010000
 800a258:	40000400 	.word	0x40000400
 800a25c:	40000800 	.word	0x40000800
 800a260:	40000c00 	.word	0x40000c00
 800a264:	40014000 	.word	0x40014000

0800a268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d101      	bne.n	800a284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a280:	2302      	movs	r3, #2
 800a282:	e03d      	b.n	800a300 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a30c:	b084      	sub	sp, #16
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	f107 001c 	add.w	r0, r7, #28
 800a31a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a320:	2b01      	cmp	r3, #1
 800a322:	d122      	bne.n	800a36a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a328:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a34c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d105      	bne.n	800a35e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f001 fbee 	bl	800bb40 <USB_CoreReset>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
 800a368:	e01a      	b.n	800a3a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f001 fbe2 	bl	800bb40 <USB_CoreReset>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	639a      	str	r2, [r3, #56]	@ 0x38
 800a392:	e005      	b.n	800a3a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a398:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d10b      	bne.n	800a3be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f043 0206 	orr.w	r2, r3, #6
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f043 0220 	orr.w	r2, r3, #32
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3ca:	b004      	add	sp, #16
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d165      	bne.n	800a4b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	4a41      	ldr	r2, [pc, #260]	@ (800a4ec <USB_SetTurnaroundTime+0x11c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d906      	bls.n	800a3fa <USB_SetTurnaroundTime+0x2a>
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	4a40      	ldr	r2, [pc, #256]	@ (800a4f0 <USB_SetTurnaroundTime+0x120>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d202      	bcs.n	800a3fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3f4:	230f      	movs	r3, #15
 800a3f6:	617b      	str	r3, [r7, #20]
 800a3f8:	e062      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	4a3c      	ldr	r2, [pc, #240]	@ (800a4f0 <USB_SetTurnaroundTime+0x120>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d306      	bcc.n	800a410 <USB_SetTurnaroundTime+0x40>
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	4a3b      	ldr	r2, [pc, #236]	@ (800a4f4 <USB_SetTurnaroundTime+0x124>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d202      	bcs.n	800a410 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a40a:	230e      	movs	r3, #14
 800a40c:	617b      	str	r3, [r7, #20]
 800a40e:	e057      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	4a38      	ldr	r2, [pc, #224]	@ (800a4f4 <USB_SetTurnaroundTime+0x124>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d306      	bcc.n	800a426 <USB_SetTurnaroundTime+0x56>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	4a37      	ldr	r2, [pc, #220]	@ (800a4f8 <USB_SetTurnaroundTime+0x128>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d202      	bcs.n	800a426 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a420:	230d      	movs	r3, #13
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	e04c      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4a33      	ldr	r2, [pc, #204]	@ (800a4f8 <USB_SetTurnaroundTime+0x128>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d306      	bcc.n	800a43c <USB_SetTurnaroundTime+0x6c>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	4a32      	ldr	r2, [pc, #200]	@ (800a4fc <USB_SetTurnaroundTime+0x12c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d802      	bhi.n	800a43c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a436:	230c      	movs	r3, #12
 800a438:	617b      	str	r3, [r7, #20]
 800a43a:	e041      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	4a2f      	ldr	r2, [pc, #188]	@ (800a4fc <USB_SetTurnaroundTime+0x12c>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d906      	bls.n	800a452 <USB_SetTurnaroundTime+0x82>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4a2e      	ldr	r2, [pc, #184]	@ (800a500 <USB_SetTurnaroundTime+0x130>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d802      	bhi.n	800a452 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a44c:	230b      	movs	r3, #11
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	e036      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	4a2a      	ldr	r2, [pc, #168]	@ (800a500 <USB_SetTurnaroundTime+0x130>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d906      	bls.n	800a468 <USB_SetTurnaroundTime+0x98>
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	4a29      	ldr	r2, [pc, #164]	@ (800a504 <USB_SetTurnaroundTime+0x134>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d802      	bhi.n	800a468 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a462:	230a      	movs	r3, #10
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	e02b      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4a26      	ldr	r2, [pc, #152]	@ (800a504 <USB_SetTurnaroundTime+0x134>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d906      	bls.n	800a47e <USB_SetTurnaroundTime+0xae>
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	4a25      	ldr	r2, [pc, #148]	@ (800a508 <USB_SetTurnaroundTime+0x138>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d202      	bcs.n	800a47e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a478:	2309      	movs	r3, #9
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	e020      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4a21      	ldr	r2, [pc, #132]	@ (800a508 <USB_SetTurnaroundTime+0x138>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d306      	bcc.n	800a494 <USB_SetTurnaroundTime+0xc4>
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	4a20      	ldr	r2, [pc, #128]	@ (800a50c <USB_SetTurnaroundTime+0x13c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d802      	bhi.n	800a494 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a48e:	2308      	movs	r3, #8
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	e015      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	4a1d      	ldr	r2, [pc, #116]	@ (800a50c <USB_SetTurnaroundTime+0x13c>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d906      	bls.n	800a4aa <USB_SetTurnaroundTime+0xda>
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	4a1c      	ldr	r2, [pc, #112]	@ (800a510 <USB_SetTurnaroundTime+0x140>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d202      	bcs.n	800a4aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a4a4:	2307      	movs	r3, #7
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	e00a      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a4aa:	2306      	movs	r3, #6
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	e007      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d102      	bne.n	800a4bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a4b6:	2309      	movs	r3, #9
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	e001      	b.n	800a4c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a4bc:	2309      	movs	r3, #9
 800a4be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	029b      	lsls	r3, r3, #10
 800a4d4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	371c      	adds	r7, #28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	00d8acbf 	.word	0x00d8acbf
 800a4f0:	00e4e1c0 	.word	0x00e4e1c0
 800a4f4:	00f42400 	.word	0x00f42400
 800a4f8:	01067380 	.word	0x01067380
 800a4fc:	011a499f 	.word	0x011a499f
 800a500:	01312cff 	.word	0x01312cff
 800a504:	014ca43f 	.word	0x014ca43f
 800a508:	016e3600 	.word	0x016e3600
 800a50c:	01a6ab1f 	.word	0x01a6ab1f
 800a510:	01e84800 	.word	0x01e84800

0800a514 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f043 0201 	orr.w	r2, r3, #1
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f023 0201 	bic.w	r2, r3, #1
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d115      	bne.n	800a5a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a586:	2001      	movs	r0, #1
 800a588:	f7f9 fa82 	bl	8003a90 <HAL_Delay>
      ms++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f001 fa45 	bl	800ba22 <USB_GetMode>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d01e      	beq.n	800a5dc <USB_SetCurrentMode+0x84>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b31      	cmp	r3, #49	@ 0x31
 800a5a2:	d9f0      	bls.n	800a586 <USB_SetCurrentMode+0x2e>
 800a5a4:	e01a      	b.n	800a5dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5a6:	78fb      	ldrb	r3, [r7, #3]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d115      	bne.n	800a5d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5b8:	2001      	movs	r0, #1
 800a5ba:	f7f9 fa69 	bl	8003a90 <HAL_Delay>
      ms++;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 fa2c 	bl	800ba22 <USB_GetMode>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <USB_SetCurrentMode+0x84>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b31      	cmp	r3, #49	@ 0x31
 800a5d4:	d9f0      	bls.n	800a5b8 <USB_SetCurrentMode+0x60>
 800a5d6:	e001      	b.n	800a5dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e005      	b.n	800a5e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b32      	cmp	r3, #50	@ 0x32
 800a5e0:	d101      	bne.n	800a5e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b086      	sub	sp, #24
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a5fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a60a:	2300      	movs	r3, #0
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	e009      	b.n	800a624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	3340      	adds	r3, #64	@ 0x40
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	3301      	adds	r3, #1
 800a622:	613b      	str	r3, [r7, #16]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	2b0e      	cmp	r3, #14
 800a628:	d9f2      	bls.n	800a610 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a62a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d11c      	bne.n	800a66a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a63e:	f043 0302 	orr.w	r3, r3, #2
 800a642:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a648:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a654:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a660:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	639a      	str	r2, [r3, #56]	@ 0x38
 800a668:	e00b      	b.n	800a682 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a66e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a67a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a688:	461a      	mov	r2, r3
 800a68a:	2300      	movs	r3, #0
 800a68c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a694:	4619      	mov	r1, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a69c:	461a      	mov	r2, r3
 800a69e:	680b      	ldr	r3, [r1, #0]
 800a6a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d10c      	bne.n	800a6c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d104      	bne.n	800a6b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f965 	bl	800a980 <USB_SetDevSpeed>
 800a6b6:	e008      	b.n	800a6ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f960 	bl	800a980 <USB_SetDevSpeed>
 800a6c0:	e003      	b.n	800a6ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6c2:	2103      	movs	r1, #3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f95b 	bl	800a980 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6ca:	2110      	movs	r1, #16
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f8f3 	bl	800a8b8 <USB_FlushTxFifo>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f91f 	bl	800a920 <USB_FlushRxFifo>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6fe:	461a      	mov	r2, r3
 800a700:	2300      	movs	r3, #0
 800a702:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a70a:	461a      	mov	r2, r3
 800a70c:	2300      	movs	r3, #0
 800a70e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a710:	2300      	movs	r3, #0
 800a712:	613b      	str	r3, [r7, #16]
 800a714:	e043      	b.n	800a79e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a72c:	d118      	bne.n	800a760 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a740:	461a      	mov	r2, r3
 800a742:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	e013      	b.n	800a772 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a756:	461a      	mov	r2, r3
 800a758:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	e008      	b.n	800a772 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a76c:	461a      	mov	r2, r3
 800a76e:	2300      	movs	r3, #0
 800a770:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77e:	461a      	mov	r2, r3
 800a780:	2300      	movs	r3, #0
 800a782:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a790:	461a      	mov	r2, r3
 800a792:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a796:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	3301      	adds	r3, #1
 800a79c:	613b      	str	r3, [r7, #16]
 800a79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d3b7      	bcc.n	800a716 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	e043      	b.n	800a834 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7c2:	d118      	bne.n	800a7f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10a      	bne.n	800a7e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	e013      	b.n	800a808 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	e008      	b.n	800a808 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a802:	461a      	mov	r2, r3
 800a804:	2300      	movs	r3, #0
 800a806:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a814:	461a      	mov	r2, r3
 800a816:	2300      	movs	r3, #0
 800a818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	4413      	add	r3, r2
 800a822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a826:	461a      	mov	r2, r3
 800a828:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a82c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	3301      	adds	r3, #1
 800a832:	613b      	str	r3, [r7, #16]
 800a834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d3b7      	bcc.n	800a7ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a84a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a84e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a85c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a860:	2b00      	cmp	r3, #0
 800a862:	d105      	bne.n	800a870 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	f043 0210 	orr.w	r2, r3, #16
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	699a      	ldr	r2, [r3, #24]
 800a874:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b4 <USB_DevInit+0x2c4>)
 800a876:	4313      	orrs	r3, r2
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d005      	beq.n	800a88e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	f043 0208 	orr.w	r2, r3, #8
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a88e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a890:	2b01      	cmp	r3, #1
 800a892:	d107      	bne.n	800a8a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a89c:	f043 0304 	orr.w	r3, r3, #4
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8b0:	b004      	add	sp, #16
 800a8b2:	4770      	bx	lr
 800a8b4:	803c3800 	.word	0x803c3800

0800a8b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4a13      	ldr	r2, [pc, #76]	@ (800a91c <USB_FlushTxFifo+0x64>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d901      	bls.n	800a8d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e01b      	b.n	800a910 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	daf2      	bge.n	800a8c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	019b      	lsls	r3, r3, #6
 800a8e8:	f043 0220 	orr.w	r2, r3, #32
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	4a08      	ldr	r2, [pc, #32]	@ (800a91c <USB_FlushTxFifo+0x64>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d901      	bls.n	800a902 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e006      	b.n	800a910 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b20      	cmp	r3, #32
 800a90c:	d0f0      	beq.n	800a8f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	00030d40 	.word	0x00030d40

0800a920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a928:	2300      	movs	r3, #0
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3301      	adds	r3, #1
 800a930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	4a11      	ldr	r2, [pc, #68]	@ (800a97c <USB_FlushRxFifo+0x5c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d901      	bls.n	800a93e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e018      	b.n	800a970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	daf2      	bge.n	800a92c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2210      	movs	r2, #16
 800a94e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3301      	adds	r3, #1
 800a954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4a08      	ldr	r2, [pc, #32]	@ (800a97c <USB_FlushRxFifo+0x5c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d901      	bls.n	800a962 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e006      	b.n	800a970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	f003 0310 	and.w	r3, r3, #16
 800a96a:	2b10      	cmp	r3, #16
 800a96c:	d0f0      	beq.n	800a950 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	00030d40 	.word	0x00030d40

0800a980 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	460b      	mov	r3, r1
 800a98a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	68f9      	ldr	r1, [r7, #12]
 800a99c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b087      	sub	sp, #28
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	f003 0306 	and.w	r3, r3, #6
 800a9ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d102      	bne.n	800a9d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	75fb      	strb	r3, [r7, #23]
 800a9d6:	e00a      	b.n	800a9ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d002      	beq.n	800a9e4 <USB_GetDevSpeed+0x32>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b06      	cmp	r3, #6
 800a9e2:	d102      	bne.n	800a9ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	75fb      	strb	r3, [r7, #23]
 800a9e8:	e001      	b.n	800a9ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a9ea:	230f      	movs	r3, #15
 800a9ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	371c      	adds	r7, #28
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	785b      	ldrb	r3, [r3, #1]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d13a      	bne.n	800aa8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa1e:	69da      	ldr	r2, [r3, #28]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	f003 030f 	and.w	r3, r3, #15
 800aa28:	2101      	movs	r1, #1
 800aa2a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	68f9      	ldr	r1, [r7, #12]
 800aa32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa36:	4313      	orrs	r3, r2
 800aa38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d155      	bne.n	800aafc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	015a      	lsls	r2, r3, #5
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	791b      	ldrb	r3, [r3, #4]
 800aa6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	059b      	lsls	r3, r3, #22
 800aa72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa74:	4313      	orrs	r3, r2
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	0151      	lsls	r1, r2, #5
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	440a      	add	r2, r1
 800aa7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	e036      	b.n	800aafc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa94:	69da      	ldr	r2, [r3, #28]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa4:	041b      	lsls	r3, r3, #16
 800aaa6:	68f9      	ldr	r1, [r7, #12]
 800aaa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aaac:	4313      	orrs	r3, r2
 800aaae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d11a      	bne.n	800aafc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	791b      	ldrb	r3, [r3, #4]
 800aae0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aae2:	430b      	orrs	r3, r1
 800aae4:	4313      	orrs	r3, r2
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	0151      	lsls	r1, r2, #5
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	440a      	add	r2, r1
 800aaee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aafa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
	...

0800ab0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	785b      	ldrb	r3, [r3, #1]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d161      	bne.n	800abec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab3e:	d11f      	bne.n	800ab80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	0151      	lsls	r1, r2, #5
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	440a      	add	r2, r1
 800ab76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	2101      	movs	r1, #1
 800ab92:	fa01 f303 	lsl.w	r3, r1, r3
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	43db      	mvns	r3, r3
 800ab9a:	68f9      	ldr	r1, [r7, #12]
 800ab9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aba0:	4013      	ands	r3, r2
 800aba2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abaa:	69da      	ldr	r2, [r3, #28]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	f003 030f 	and.w	r3, r3, #15
 800abb4:	2101      	movs	r1, #1
 800abb6:	fa01 f303 	lsl.w	r3, r1, r3
 800abba:	b29b      	uxth	r3, r3
 800abbc:	43db      	mvns	r3, r3
 800abbe:	68f9      	ldr	r1, [r7, #12]
 800abc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abc4:	4013      	ands	r3, r2
 800abc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	0159      	lsls	r1, r3, #5
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	440b      	add	r3, r1
 800abde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe2:	4619      	mov	r1, r3
 800abe4:	4b35      	ldr	r3, [pc, #212]	@ (800acbc <USB_DeactivateEndpoint+0x1b0>)
 800abe6:	4013      	ands	r3, r2
 800abe8:	600b      	str	r3, [r1, #0]
 800abea:	e060      	b.n	800acae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac02:	d11f      	bne.n	800ac44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ac22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	0151      	lsls	r1, r2, #5
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	440a      	add	r2, r1
 800ac3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f003 030f 	and.w	r3, r3, #15
 800ac54:	2101      	movs	r1, #1
 800ac56:	fa01 f303 	lsl.w	r3, r1, r3
 800ac5a:	041b      	lsls	r3, r3, #16
 800ac5c:	43db      	mvns	r3, r3
 800ac5e:	68f9      	ldr	r1, [r7, #12]
 800ac60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac64:	4013      	ands	r3, r2
 800ac66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac6e:	69da      	ldr	r2, [r3, #28]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 030f 	and.w	r3, r3, #15
 800ac78:	2101      	movs	r1, #1
 800ac7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7e:	041b      	lsls	r3, r3, #16
 800ac80:	43db      	mvns	r3, r3
 800ac82:	68f9      	ldr	r1, [r7, #12]
 800ac84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac88:	4013      	ands	r3, r2
 800ac8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	0159      	lsls	r1, r3, #5
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	440b      	add	r3, r1
 800aca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca6:	4619      	mov	r1, r3
 800aca8:	4b05      	ldr	r3, [pc, #20]	@ (800acc0 <USB_DeactivateEndpoint+0x1b4>)
 800acaa:	4013      	ands	r3, r2
 800acac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	ec337800 	.word	0xec337800
 800acc0:	eff37800 	.word	0xeff37800

0800acc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b08a      	sub	sp, #40	@ 0x28
 800acc8:	af02      	add	r7, sp, #8
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	4613      	mov	r3, r2
 800acd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	785b      	ldrb	r3, [r3, #1]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	f040 815c 	bne.w	800af9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d132      	bne.n	800ad54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	69ba      	ldr	r2, [r7, #24]
 800acfe:	0151      	lsls	r1, r2, #5
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	440a      	add	r2, r1
 800ad04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad08:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad0c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	015a      	lsls	r2, r3, #5
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	4413      	add	r3, r2
 800ad1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	0151      	lsls	r1, r2, #5
 800ad24:	69fa      	ldr	r2, [r7, #28]
 800ad26:	440a      	add	r2, r1
 800ad28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad4c:	0cdb      	lsrs	r3, r3, #19
 800ad4e:	04db      	lsls	r3, r3, #19
 800ad50:	6113      	str	r3, [r2, #16]
 800ad52:	e074      	b.n	800ae3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	0151      	lsls	r1, r2, #5
 800ad66:	69fa      	ldr	r2, [r7, #28]
 800ad68:	440a      	add	r2, r1
 800ad6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad6e:	0cdb      	lsrs	r3, r3, #19
 800ad70:	04db      	lsls	r3, r3, #19
 800ad72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	0151      	lsls	r1, r2, #5
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	440a      	add	r2, r1
 800ad8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad8e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad92:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ada4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	6999      	ldr	r1, [r3, #24]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	440b      	add	r3, r1
 800adb0:	1e59      	subs	r1, r3, #1
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	fbb1 f3f3 	udiv	r3, r1, r3
 800adba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800adbc:	4b9d      	ldr	r3, [pc, #628]	@ (800b034 <USB_EPStartXfer+0x370>)
 800adbe:	400b      	ands	r3, r1
 800adc0:	69b9      	ldr	r1, [r7, #24]
 800adc2:	0148      	lsls	r0, r1, #5
 800adc4:	69f9      	ldr	r1, [r7, #28]
 800adc6:	4401      	add	r1, r0
 800adc8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800adcc:	4313      	orrs	r3, r2
 800adce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	4413      	add	r3, r2
 800add8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800addc:	691a      	ldr	r2, [r3, #16]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ade6:	69b9      	ldr	r1, [r7, #24]
 800ade8:	0148      	lsls	r0, r1, #5
 800adea:	69f9      	ldr	r1, [r7, #28]
 800adec:	4401      	add	r1, r0
 800adee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800adf2:	4313      	orrs	r3, r2
 800adf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	791b      	ldrb	r3, [r3, #4]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d11f      	bne.n	800ae3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	69ba      	ldr	r2, [r7, #24]
 800ae0e:	0151      	lsls	r1, r2, #5
 800ae10:	69fa      	ldr	r2, [r7, #28]
 800ae12:	440a      	add	r2, r1
 800ae14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae18:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ae1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	015a      	lsls	r2, r3, #5
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	69ba      	ldr	r2, [r7, #24]
 800ae2e:	0151      	lsls	r1, r2, #5
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	440a      	add	r2, r1
 800ae34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d14b      	bne.n	800aedc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d009      	beq.n	800ae60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae58:	461a      	mov	r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	791b      	ldrb	r3, [r3, #4]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d128      	bne.n	800aeba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d110      	bne.n	800ae9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	0151      	lsls	r1, r2, #5
 800ae8a:	69fa      	ldr	r2, [r7, #28]
 800ae8c:	440a      	add	r2, r1
 800ae8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	e00f      	b.n	800aeba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	015a      	lsls	r2, r3, #5
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	4413      	add	r3, r2
 800aea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	69ba      	ldr	r2, [r7, #24]
 800aeaa:	0151      	lsls	r1, r2, #5
 800aeac:	69fa      	ldr	r2, [r7, #28]
 800aeae:	440a      	add	r2, r1
 800aeb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aeb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	015a      	lsls	r2, r3, #5
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	4413      	add	r3, r2
 800aec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	0151      	lsls	r1, r2, #5
 800aecc:	69fa      	ldr	r2, [r7, #28]
 800aece:	440a      	add	r2, r1
 800aed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aed4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	e133      	b.n	800b144 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	69ba      	ldr	r2, [r7, #24]
 800aeec:	0151      	lsls	r1, r2, #5
 800aeee:	69fa      	ldr	r2, [r7, #28]
 800aef0:	440a      	add	r2, r1
 800aef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aef6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aefa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	791b      	ldrb	r3, [r3, #4]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d015      	beq.n	800af30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 811b 	beq.w	800b144 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	f003 030f 	and.w	r3, r3, #15
 800af1e:	2101      	movs	r1, #1
 800af20:	fa01 f303 	lsl.w	r3, r1, r3
 800af24:	69f9      	ldr	r1, [r7, #28]
 800af26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af2a:	4313      	orrs	r3, r2
 800af2c:	634b      	str	r3, [r1, #52]	@ 0x34
 800af2e:	e109      	b.n	800b144 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d110      	bne.n	800af62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	015a      	lsls	r2, r3, #5
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	4413      	add	r3, r2
 800af48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	69ba      	ldr	r2, [r7, #24]
 800af50:	0151      	lsls	r1, r2, #5
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	440a      	add	r2, r1
 800af56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	e00f      	b.n	800af82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	015a      	lsls	r2, r3, #5
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	4413      	add	r3, r2
 800af6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	69ba      	ldr	r2, [r7, #24]
 800af72:	0151      	lsls	r1, r2, #5
 800af74:	69fa      	ldr	r2, [r7, #28]
 800af76:	440a      	add	r2, r1
 800af78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6919      	ldr	r1, [r3, #16]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	781a      	ldrb	r2, [r3, #0]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	b298      	uxth	r0, r3
 800af90:	79fb      	ldrb	r3, [r7, #7]
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	4603      	mov	r3, r0
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 fade 	bl	800b558 <USB_WritePacket>
 800af9c:	e0d2      	b.n	800b144 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	0151      	lsls	r1, r2, #5
 800afb0:	69fa      	ldr	r2, [r7, #28]
 800afb2:	440a      	add	r2, r1
 800afb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afb8:	0cdb      	lsrs	r3, r3, #19
 800afba:	04db      	lsls	r3, r3, #19
 800afbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	0151      	lsls	r1, r2, #5
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	440a      	add	r2, r1
 800afd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afd8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800afdc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800afe0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d126      	bne.n	800b038 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff6:	691a      	ldr	r2, [r3, #16]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b000:	69b9      	ldr	r1, [r7, #24]
 800b002:	0148      	lsls	r0, r1, #5
 800b004:	69f9      	ldr	r1, [r7, #28]
 800b006:	4401      	add	r1, r0
 800b008:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b00c:	4313      	orrs	r3, r2
 800b00e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	69ba      	ldr	r2, [r7, #24]
 800b020:	0151      	lsls	r1, r2, #5
 800b022:	69fa      	ldr	r2, [r7, #28]
 800b024:	440a      	add	r2, r1
 800b026:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b02a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b02e:	6113      	str	r3, [r2, #16]
 800b030:	e03a      	b.n	800b0a8 <USB_EPStartXfer+0x3e4>
 800b032:	bf00      	nop
 800b034:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	699a      	ldr	r2, [r3, #24]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	4413      	add	r3, r2
 800b042:	1e5a      	subs	r2, r3, #1
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	fbb2 f3f3 	udiv	r3, r2, r3
 800b04c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	8afa      	ldrh	r2, [r7, #22]
 800b054:	fb03 f202 	mul.w	r2, r3, r2
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b068:	691a      	ldr	r2, [r3, #16]
 800b06a:	8afb      	ldrh	r3, [r7, #22]
 800b06c:	04d9      	lsls	r1, r3, #19
 800b06e:	4b38      	ldr	r3, [pc, #224]	@ (800b150 <USB_EPStartXfer+0x48c>)
 800b070:	400b      	ands	r3, r1
 800b072:	69b9      	ldr	r1, [r7, #24]
 800b074:	0148      	lsls	r0, r1, #5
 800b076:	69f9      	ldr	r1, [r7, #28]
 800b078:	4401      	add	r1, r0
 800b07a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b07e:	4313      	orrs	r3, r2
 800b080:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	015a      	lsls	r2, r3, #5
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	4413      	add	r3, r2
 800b08a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b08e:	691a      	ldr	r2, [r3, #16]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b098:	69b9      	ldr	r1, [r7, #24]
 800b09a:	0148      	lsls	r0, r1, #5
 800b09c:	69f9      	ldr	r1, [r7, #28]
 800b09e:	4401      	add	r1, r0
 800b0a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d10d      	bne.n	800b0ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d009      	beq.n	800b0ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	6919      	ldr	r1, [r3, #16]
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0c6:	460a      	mov	r2, r1
 800b0c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d128      	bne.n	800b124 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d110      	bne.n	800b104 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	0151      	lsls	r1, r2, #5
 800b0f4:	69fa      	ldr	r2, [r7, #28]
 800b0f6:	440a      	add	r2, r1
 800b0f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	e00f      	b.n	800b124 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	0151      	lsls	r1, r2, #5
 800b116:	69fa      	ldr	r2, [r7, #28]
 800b118:	440a      	add	r2, r1
 800b11a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b11e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b122:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	0151      	lsls	r1, r2, #5
 800b136:	69fa      	ldr	r2, [r7, #28]
 800b138:	440a      	add	r2, r1
 800b13a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b13e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b142:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	1ff80000 	.word	0x1ff80000

0800b154 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	4613      	mov	r3, r2
 800b160:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	785b      	ldrb	r3, [r3, #1]
 800b170:	2b01      	cmp	r3, #1
 800b172:	f040 80ce 	bne.w	800b312 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d132      	bne.n	800b1e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	0151      	lsls	r1, r2, #5
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	440a      	add	r2, r1
 800b194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b198:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b19c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b1a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	015a      	lsls	r2, r3, #5
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	0151      	lsls	r1, r2, #5
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	440a      	add	r2, r1
 800b1b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b1c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	0151      	lsls	r1, r2, #5
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	440a      	add	r2, r1
 800b1d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1dc:	0cdb      	lsrs	r3, r3, #19
 800b1de:	04db      	lsls	r3, r3, #19
 800b1e0:	6113      	str	r3, [r2, #16]
 800b1e2:	e04e      	b.n	800b282 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1fe:	0cdb      	lsrs	r3, r3, #19
 800b200:	04db      	lsls	r3, r3, #19
 800b202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	0151      	lsls	r1, r2, #5
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	440a      	add	r2, r1
 800b21a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b21e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b222:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b226:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	699a      	ldr	r2, [r3, #24]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	429a      	cmp	r2, r3
 800b232:	d903      	bls.n	800b23c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	68da      	ldr	r2, [r3, #12]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	015a      	lsls	r2, r3, #5
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	4413      	add	r3, r2
 800b244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	0151      	lsls	r1, r2, #5
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	440a      	add	r2, r1
 800b252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b25a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	015a      	lsls	r2, r3, #5
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	4413      	add	r3, r2
 800b264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b268:	691a      	ldr	r2, [r3, #16]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b272:	6939      	ldr	r1, [r7, #16]
 800b274:	0148      	lsls	r0, r1, #5
 800b276:	6979      	ldr	r1, [r7, #20]
 800b278:	4401      	add	r1, r0
 800b27a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b27e:	4313      	orrs	r3, r2
 800b280:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b282:	79fb      	ldrb	r3, [r7, #7]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d11e      	bne.n	800b2c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d009      	beq.n	800b2a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	015a      	lsls	r2, r3, #5
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	4413      	add	r3, r2
 800b298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b29c:	461a      	mov	r2, r3
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	0151      	lsls	r1, r2, #5
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	440a      	add	r2, r1
 800b2ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	e097      	b.n	800b3f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	0151      	lsls	r1, r2, #5
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	440a      	add	r2, r1
 800b2dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b2e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 8083 	beq.w	800b3f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	f003 030f 	and.w	r3, r3, #15
 800b300:	2101      	movs	r1, #1
 800b302:	fa01 f303 	lsl.w	r3, r1, r3
 800b306:	6979      	ldr	r1, [r7, #20]
 800b308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b30c:	4313      	orrs	r3, r2
 800b30e:	634b      	str	r3, [r1, #52]	@ 0x34
 800b310:	e071      	b.n	800b3f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	0151      	lsls	r1, r2, #5
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	440a      	add	r2, r1
 800b328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b32c:	0cdb      	lsrs	r3, r3, #19
 800b32e:	04db      	lsls	r3, r3, #19
 800b330:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	015a      	lsls	r2, r3, #5
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	4413      	add	r3, r2
 800b33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	0151      	lsls	r1, r2, #5
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	440a      	add	r2, r1
 800b348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b34c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b350:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b354:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	68da      	ldr	r2, [r3, #12]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	68da      	ldr	r2, [r3, #12]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	0151      	lsls	r1, r2, #5
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	440a      	add	r2, r1
 800b384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b388:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b38c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3a4:	6939      	ldr	r1, [r7, #16]
 800b3a6:	0148      	lsls	r0, r1, #5
 800b3a8:	6979      	ldr	r1, [r7, #20]
 800b3aa:	4401      	add	r1, r0
 800b3ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d10d      	bne.n	800b3d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d009      	beq.n	800b3d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6919      	ldr	r1, [r3, #16]
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d2:	460a      	mov	r2, r1
 800b3d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	0151      	lsls	r1, r2, #5
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	440a      	add	r2, r1
 800b3ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b3f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	371c      	adds	r7, #28
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b404:	b480      	push	{r7}
 800b406:	b087      	sub	sp, #28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	785b      	ldrb	r3, [r3, #1]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d14a      	bne.n	800b4b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b43a:	f040 8086 	bne.w	800b54a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	7812      	ldrb	r2, [r2, #0]
 800b452:	0151      	lsls	r1, r2, #5
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	440a      	add	r2, r1
 800b458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b45c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b460:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	7812      	ldrb	r2, [r2, #0]
 800b476:	0151      	lsls	r1, r2, #5
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	440a      	add	r2, r1
 800b47c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b480:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b484:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3301      	adds	r3, #1
 800b48a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b492:	4293      	cmp	r3, r2
 800b494:	d902      	bls.n	800b49c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	75fb      	strb	r3, [r7, #23]
          break;
 800b49a:	e056      	b.n	800b54a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	015a      	lsls	r2, r3, #5
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4b4:	d0e7      	beq.n	800b486 <USB_EPStopXfer+0x82>
 800b4b6:	e048      	b.n	800b54a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	015a      	lsls	r2, r3, #5
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4d0:	d13b      	bne.n	800b54a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	7812      	ldrb	r2, [r2, #0]
 800b4e6:	0151      	lsls	r1, r2, #5
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	440a      	add	r2, r1
 800b4ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b4f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	7812      	ldrb	r2, [r2, #0]
 800b50a:	0151      	lsls	r1, r2, #5
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	440a      	add	r2, r1
 800b510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b514:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b518:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3301      	adds	r3, #1
 800b51e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b526:	4293      	cmp	r3, r2
 800b528:	d902      	bls.n	800b530 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	75fb      	strb	r3, [r7, #23]
          break;
 800b52e:	e00c      	b.n	800b54a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	015a      	lsls	r2, r3, #5
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	4413      	add	r3, r2
 800b53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b548:	d0e7      	beq.n	800b51a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	371c      	adds	r7, #28
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b558:	b480      	push	{r7}
 800b55a:	b089      	sub	sp, #36	@ 0x24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	4611      	mov	r1, r2
 800b564:	461a      	mov	r2, r3
 800b566:	460b      	mov	r3, r1
 800b568:	71fb      	strb	r3, [r7, #7]
 800b56a:	4613      	mov	r3, r2
 800b56c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b576:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d123      	bne.n	800b5c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b57e:	88bb      	ldrh	r3, [r7, #4]
 800b580:	3303      	adds	r3, #3
 800b582:	089b      	lsrs	r3, r3, #2
 800b584:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b586:	2300      	movs	r3, #0
 800b588:	61bb      	str	r3, [r7, #24]
 800b58a:	e018      	b.n	800b5be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	031a      	lsls	r2, r3, #12
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	4413      	add	r3, r2
 800b594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b598:	461a      	mov	r2, r3
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	61bb      	str	r3, [r7, #24]
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d3e2      	bcc.n	800b58c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3724      	adds	r7, #36	@ 0x24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b08b      	sub	sp, #44	@ 0x2c
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b5ea:	88fb      	ldrh	r3, [r7, #6]
 800b5ec:	089b      	lsrs	r3, r3, #2
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b5f2:	88fb      	ldrh	r3, [r7, #6]
 800b5f4:	f003 0303 	and.w	r3, r3, #3
 800b5f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	623b      	str	r3, [r7, #32]
 800b5fe:	e014      	b.n	800b62a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	3301      	adds	r3, #1
 800b610:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	3301      	adds	r3, #1
 800b616:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61a:	3301      	adds	r3, #1
 800b61c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	3301      	adds	r3, #1
 800b622:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	3301      	adds	r3, #1
 800b628:	623b      	str	r3, [r7, #32]
 800b62a:	6a3a      	ldr	r2, [r7, #32]
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d3e6      	bcc.n	800b600 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b632:	8bfb      	ldrh	r3, [r7, #30]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d01e      	beq.n	800b676 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b638:	2300      	movs	r3, #0
 800b63a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b642:	461a      	mov	r2, r3
 800b644:	f107 0310 	add.w	r3, r7, #16
 800b648:	6812      	ldr	r2, [r2, #0]
 800b64a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	b2db      	uxtb	r3, r3
 800b652:	00db      	lsls	r3, r3, #3
 800b654:	fa22 f303 	lsr.w	r3, r2, r3
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65c:	701a      	strb	r2, [r3, #0]
      i++;
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	3301      	adds	r3, #1
 800b662:	623b      	str	r3, [r7, #32]
      pDest++;
 800b664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b666:	3301      	adds	r3, #1
 800b668:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b66a:	8bfb      	ldrh	r3, [r7, #30]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b670:	8bfb      	ldrh	r3, [r7, #30]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1ea      	bne.n	800b64c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b678:	4618      	mov	r0, r3
 800b67a:	372c      	adds	r7, #44	@ 0x2c
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	785b      	ldrb	r3, [r3, #1]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d12c      	bne.n	800b6fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	015a      	lsls	r2, r3, #5
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	db12      	blt.n	800b6d8 <USB_EPSetStall+0x54>
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00f      	beq.n	800b6d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	015a      	lsls	r2, r3, #5
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68ba      	ldr	r2, [r7, #8]
 800b6c8:	0151      	lsls	r1, r2, #5
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	440a      	add	r2, r1
 800b6ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b6d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	015a      	lsls	r2, r3, #5
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4413      	add	r3, r2
 800b6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	0151      	lsls	r1, r2, #5
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	440a      	add	r2, r1
 800b6ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	e02b      	b.n	800b752 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	015a      	lsls	r2, r3, #5
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	4413      	add	r3, r2
 800b702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	db12      	blt.n	800b732 <USB_EPSetStall+0xae>
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00f      	beq.n	800b732 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b72c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b730:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	015a      	lsls	r2, r3, #5
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	4413      	add	r3, r2
 800b73a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	0151      	lsls	r1, r2, #5
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	440a      	add	r2, r1
 800b748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b74c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b750:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	785b      	ldrb	r3, [r3, #1]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d128      	bne.n	800b7ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	015a      	lsls	r2, r3, #5
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4413      	add	r3, r2
 800b784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	0151      	lsls	r1, r2, #5
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	440a      	add	r2, r1
 800b792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b796:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b79a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	791b      	ldrb	r3, [r3, #4]
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d003      	beq.n	800b7ac <USB_EPClearStall+0x4c>
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	791b      	ldrb	r3, [r3, #4]
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d138      	bne.n	800b81e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	015a      	lsls	r2, r3, #5
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	0151      	lsls	r1, r2, #5
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	440a      	add	r2, r1
 800b7c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7ca:	6013      	str	r3, [r2, #0]
 800b7cc:	e027      	b.n	800b81e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	0151      	lsls	r1, r2, #5
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	440a      	add	r2, r1
 800b7e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b7ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	791b      	ldrb	r3, [r3, #4]
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	d003      	beq.n	800b7fe <USB_EPClearStall+0x9e>
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	791b      	ldrb	r3, [r3, #4]
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d10f      	bne.n	800b81e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	015a      	lsls	r2, r3, #5
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	4413      	add	r3, r2
 800b806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	0151      	lsls	r1, r2, #5
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	440a      	add	r2, r1
 800b814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b81c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	460b      	mov	r3, r1
 800b836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b84a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b84e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	011b      	lsls	r3, r3, #4
 800b85c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b860:	68f9      	ldr	r1, [r7, #12]
 800b862:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b866:	4313      	orrs	r3, r2
 800b868:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b892:	f023 0303 	bic.w	r3, r3, #3
 800b896:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8a6:	f023 0302 	bic.w	r3, r3, #2
 800b8aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b085      	sub	sp, #20
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b8d4:	f023 0303 	bic.w	r3, r3, #3
 800b8d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8e8:	f043 0302 	orr.w	r3, r3, #2
 800b8ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	4013      	ands	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b914:	68fb      	ldr	r3, [r7, #12]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	4013      	ands	r3, r2
 800b944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	0c1b      	lsrs	r3, r3, #16
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b956:	b480      	push	{r7}
 800b958:	b085      	sub	sp, #20
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b972:	69db      	ldr	r3, [r3, #28]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	4013      	ands	r3, r2
 800b978:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	b29b      	uxth	r3, r3
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b98a:	b480      	push	{r7}
 800b98c:	b085      	sub	sp, #20
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	460b      	mov	r3, r1
 800b994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b99a:	78fb      	ldrb	r3, [r7, #3]
 800b99c:	015a      	lsls	r2, r3, #5
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b087      	sub	sp, #28
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b9ea:	78fb      	ldrb	r3, [r7, #3]
 800b9ec:	f003 030f 	and.w	r3, r3, #15
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f6:	01db      	lsls	r3, r3, #7
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba00:	78fb      	ldrb	r3, [r7, #3]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	4013      	ands	r3, r2
 800ba12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba14:	68bb      	ldr	r3, [r7, #8]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	371c      	adds	r7, #28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b083      	sub	sp, #12
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	f003 0301 	and.w	r3, r3, #1
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ba5c:	f023 0307 	bic.w	r3, r3, #7
 800ba60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	333c      	adds	r3, #60	@ 0x3c
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	4a26      	ldr	r2, [pc, #152]	@ (800bb3c <USB_EP0_OutStart+0xb8>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d90a      	bls.n	800babe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bab8:	d101      	bne.n	800babe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	e037      	b.n	800bb2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac4:	461a      	mov	r2, r3
 800bac6:	2300      	movs	r3, #0
 800bac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bad8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800badc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800baec:	f043 0318 	orr.w	r3, r3, #24
 800baf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb00:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bb04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb06:	7afb      	ldrb	r3, [r7, #11]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d10f      	bne.n	800bb2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb12:	461a      	mov	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb26:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bb2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	4f54300a 	.word	0x4f54300a

0800bb40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	4a13      	ldr	r2, [pc, #76]	@ (800bba4 <USB_CoreReset+0x64>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d901      	bls.n	800bb5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	e01b      	b.n	800bb96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	daf2      	bge.n	800bb4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	691b      	ldr	r3, [r3, #16]
 800bb6e:	f043 0201 	orr.w	r2, r3, #1
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4a09      	ldr	r2, [pc, #36]	@ (800bba4 <USB_CoreReset+0x64>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d901      	bls.n	800bb88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e006      	b.n	800bb96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d0f0      	beq.n	800bb76 <USB_CoreReset+0x36>

  return HAL_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	00030d40 	.word	0x00030d40

0800bba8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800bbb4:	2308      	movs	r3, #8
 800bbb6:	2203      	movs	r2, #3
 800bbb8:	2181      	movs	r1, #129	@ 0x81
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f001 ff51 	bl	800da62 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	871a      	strh	r2, [r3, #56]	@ 0x38
	
	/* Open EP OUT */
	USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	2203      	movs	r2, #3
 800bbca:	2101      	movs	r1, #1
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f001 ff48 	bl	800da62 <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800bbd2:	2010      	movs	r0, #16
 800bbd4:	f002 f856 	bl	800dc84 <USBD_static_malloc>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
	
	//set EP_OUT 1 prepared to received the data

	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, rx_buf, HID_EPOUT_SIZE);
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	4a0b      	ldr	r2, [pc, #44]	@ (800bc10 <USBD_HID_Init+0x68>)
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f002 f82a 	bl	800dc40 <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	e005      	b.n	800bc06 <USBD_HID_Init+0x5e>
  }else{
		//((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
	}

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc00:	2200      	movs	r2, #0
 800bc02:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	200008a4 	.word	0x200008a4

0800bc14 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800bc20:	2181      	movs	r1, #129	@ 0x81
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 ff43 	bl	800daae <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d009      	beq.n	800bc4c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f002 f82e 	bl	800dca0 <USBD_static_free>
    pdev->pClassData = NULL;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return USBD_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc68:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800bc72:	2300      	movs	r3, #0
 800bc74:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d045      	beq.n	800bd12 <USBD_HID_Setup+0xba>
 800bc86:	2b20      	cmp	r3, #32
 800bc88:	f040 80d6 	bne.w	800be38 <USBD_HID_Setup+0x1e0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	785b      	ldrb	r3, [r3, #1]
 800bc90:	3b02      	subs	r3, #2
 800bc92:	2b09      	cmp	r3, #9
 800bc94:	d835      	bhi.n	800bd02 <USBD_HID_Setup+0xaa>
 800bc96:	a201      	add	r2, pc, #4	@ (adr r2, 800bc9c <USBD_HID_Setup+0x44>)
 800bc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9c:	0800bcf3 	.word	0x0800bcf3
 800bca0:	0800bcd3 	.word	0x0800bcd3
 800bca4:	0800bd03 	.word	0x0800bd03
 800bca8:	0800bd03 	.word	0x0800bd03
 800bcac:	0800bd03 	.word	0x0800bd03
 800bcb0:	0800bd03 	.word	0x0800bd03
 800bcb4:	0800bd03 	.word	0x0800bd03
 800bcb8:	0800bd03 	.word	0x0800bd03
 800bcbc:	0800bce1 	.word	0x0800bce1
 800bcc0:	0800bcc5 	.word	0x0800bcc5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	885b      	ldrh	r3, [r3, #2]
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	461a      	mov	r2, r3
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	601a      	str	r2, [r3, #0]
          break;
 800bcd0:	e01e      	b.n	800bd10 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f001 fb85 	bl	800d3e8 <USBD_CtlSendData>
          break;
 800bcde:	e017      	b.n	800bd10 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	885b      	ldrh	r3, [r3, #2]
 800bce4:	0a1b      	lsrs	r3, r3, #8
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	461a      	mov	r2, r3
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	605a      	str	r2, [r3, #4]
          break;
 800bcf0:	e00e      	b.n	800bd10 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f001 fb74 	bl	800d3e8 <USBD_CtlSendData>
          break;
 800bd00:	e006      	b.n	800bd10 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 fafe 	bl	800d306 <USBD_CtlError>
          ret = USBD_FAIL;
 800bd0a:	2303      	movs	r3, #3
 800bd0c:	75fb      	strb	r3, [r7, #23]
          break;
 800bd0e:	bf00      	nop
      }
      break;
 800bd10:	e099      	b.n	800be46 <USBD_HID_Setup+0x1ee>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	785b      	ldrb	r3, [r3, #1]
 800bd16:	2b0b      	cmp	r3, #11
 800bd18:	f200 8086 	bhi.w	800be28 <USBD_HID_Setup+0x1d0>
 800bd1c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd24 <USBD_HID_Setup+0xcc>)
 800bd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd22:	bf00      	nop
 800bd24:	0800bd55 	.word	0x0800bd55
 800bd28:	0800be29 	.word	0x0800be29
 800bd2c:	0800be29 	.word	0x0800be29
 800bd30:	0800be29 	.word	0x0800be29
 800bd34:	0800be29 	.word	0x0800be29
 800bd38:	0800be29 	.word	0x0800be29
 800bd3c:	0800bd7f 	.word	0x0800bd7f
 800bd40:	0800be29 	.word	0x0800be29
 800bd44:	0800be29 	.word	0x0800be29
 800bd48:	0800be29 	.word	0x0800be29
 800bd4c:	0800bdd7 	.word	0x0800bdd7
 800bd50:	0800be01 	.word	0x0800be01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d107      	bne.n	800bd70 <USBD_HID_Setup+0x118>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bd60:	f107 030e 	add.w	r3, r7, #14
 800bd64:	2202      	movs	r2, #2
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f001 fb3d 	bl	800d3e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd6e:	e062      	b.n	800be36 <USBD_HID_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800bd70:	6839      	ldr	r1, [r7, #0]
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f001 fac7 	bl	800d306 <USBD_CtlError>
            ret = USBD_FAIL;
 800bd78:	2303      	movs	r3, #3
 800bd7a:	75fb      	strb	r3, [r7, #23]
          break;
 800bd7c:	e05b      	b.n	800be36 <USBD_HID_Setup+0x1de>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	885b      	ldrh	r3, [r3, #2]
 800bd82:	0a1b      	lsrs	r3, r3, #8
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	2b22      	cmp	r3, #34	@ 0x22
 800bd88:	d108      	bne.n	800bd9c <USBD_HID_Setup+0x144>
          {
            len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	88db      	ldrh	r3, [r3, #6]
 800bd8e:	2b5e      	cmp	r3, #94	@ 0x5e
 800bd90:	bf28      	it	cs
 800bd92:	235e      	movcs	r3, #94	@ 0x5e
 800bd94:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KEYBOARD_ReportDesc;
 800bd96:	4b2e      	ldr	r3, [pc, #184]	@ (800be50 <USBD_HID_Setup+0x1f8>)
 800bd98:	61bb      	str	r3, [r7, #24]
 800bd9a:	e015      	b.n	800bdc8 <USBD_HID_Setup+0x170>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	885b      	ldrh	r3, [r3, #2]
 800bda0:	0a1b      	lsrs	r3, r3, #8
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	2b21      	cmp	r3, #33	@ 0x21
 800bda6:	d108      	bne.n	800bdba <USBD_HID_Setup+0x162>
          {
            pbuf = USBD_HID_Desc;
 800bda8:	4b2a      	ldr	r3, [pc, #168]	@ (800be54 <USBD_HID_Setup+0x1fc>)
 800bdaa:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	88db      	ldrh	r3, [r3, #6]
 800bdb0:	2b09      	cmp	r3, #9
 800bdb2:	bf28      	it	cs
 800bdb4:	2309      	movcs	r3, #9
 800bdb6:	83fb      	strh	r3, [r7, #30]
 800bdb8:	e006      	b.n	800bdc8 <USBD_HID_Setup+0x170>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 faa2 	bl	800d306 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	75fb      	strb	r3, [r7, #23]
            break;
 800bdc6:	e036      	b.n	800be36 <USBD_HID_Setup+0x1de>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800bdc8:	8bfb      	ldrh	r3, [r7, #30]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	69b9      	ldr	r1, [r7, #24]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f001 fb0a 	bl	800d3e8 <USBD_CtlSendData>
          break;
 800bdd4:	e02f      	b.n	800be36 <USBD_HID_Setup+0x1de>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d107      	bne.n	800bdf2 <USBD_HID_Setup+0x19a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	3308      	adds	r3, #8
 800bde6:	2201      	movs	r2, #1
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f001 fafc 	bl	800d3e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdf0:	e021      	b.n	800be36 <USBD_HID_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 fa86 	bl	800d306 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	75fb      	strb	r3, [r7, #23]
          break;
 800bdfe:	e01a      	b.n	800be36 <USBD_HID_Setup+0x1de>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d106      	bne.n	800be1a <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	885b      	ldrh	r3, [r3, #2]
 800be10:	b2db      	uxtb	r3, r3
 800be12:	461a      	mov	r2, r3
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be18:	e00d      	b.n	800be36 <USBD_HID_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 fa72 	bl	800d306 <USBD_CtlError>
            ret = USBD_FAIL;
 800be22:	2303      	movs	r3, #3
 800be24:	75fb      	strb	r3, [r7, #23]
          break;
 800be26:	e006      	b.n	800be36 <USBD_HID_Setup+0x1de>

        default:
          USBD_CtlError(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 fa6b 	bl	800d306 <USBD_CtlError>
          ret = USBD_FAIL;
 800be30:	2303      	movs	r3, #3
 800be32:	75fb      	strb	r3, [r7, #23]
          break;
 800be34:	bf00      	nop
      }
      break;
 800be36:	e006      	b.n	800be46 <USBD_HID_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f001 fa63 	bl	800d306 <USBD_CtlError>
      ret = USBD_FAIL;
 800be40:	2303      	movs	r3, #3
 800be42:	75fb      	strb	r3, [r7, #23]
      break;
 800be44:	bf00      	nop
  }

  return ret;
 800be46:	7dfb      	ldrb	r3, [r7, #23]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3720      	adds	r7, #32
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	200000ec 	.word	0x200000ec
 800be54:	200000d4 	.word	0x200000d4

0800be58 <USBD_HID_SendReport>:
  *         Send HID Report
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev, uint8_t *report, uint16_t len){
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800be6c:	617b      	str	r3, [r7, #20]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b03      	cmp	r3, #3
 800be78:	d10c      	bne.n	800be94 <USBD_HID_SendReport+0x3c>
  {
    if (hhid->state == HID_IDLE)
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	7b1b      	ldrb	r3, [r3, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d108      	bne.n	800be94 <USBD_HID_SendReport+0x3c>
    {
      hhid->state = HID_BUSY;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2201      	movs	r2, #1
 800be86:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800be88:	88fb      	ldrh	r3, [r7, #6]
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	2181      	movs	r1, #129	@ 0x81
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f001 feb5 	bl	800dbfe <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3718      	adds	r7, #24
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b085      	sub	sp, #20
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	7c1b      	ldrb	r3, [r3, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d102      	bne.n	800beb8 <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 800beb2:	2308      	movs	r3, #8
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	e001      	b.n	800bebc <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 800beb8:	230a      	movs	r3, #10
 800beba:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 800bebc:	68fb      	ldr	r3, [r7, #12]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
	...

0800becc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2229      	movs	r2, #41	@ 0x29
 800bed8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800beda:	4b03      	ldr	r3, [pc, #12]	@ (800bee8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800bedc:	4618      	mov	r0, r3
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	20000050 	.word	0x20000050

0800beec <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2229      	movs	r2, #41	@ 0x29
 800bef8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800befa:	4b03      	ldr	r3, [pc, #12]	@ (800bf08 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800befc:	4618      	mov	r0, r3
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	2000007c 	.word	0x2000007c

0800bf0c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2229      	movs	r2, #41	@ 0x29
 800bf18:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800bf1a:	4b03      	ldr	r3, [pc, #12]	@ (800bf28 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	200000a8 	.word	0x200000a8

0800bf2c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bf3e:	2200      	movs	r2, #0
 800bf40:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	70fb      	strb	r3, [r7, #3]
	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, rx_buf, HID_EPOUT_SIZE);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf62:	2301      	movs	r3, #1
 800bf64:	4a04      	ldr	r2, [pc, #16]	@ (800bf78 <USBD_HID_DataOut+0x28>)
 800bf66:	2101      	movs	r1, #1
 800bf68:	f7fc faa8 	bl	80084bc <HAL_PCD_EP_Receive>
 
	return USBD_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	200008a4 	.word	0x200008a4

0800bf7c <USBD_HID_GetData>:

uint8_t * USBD_HID_GetData(void){
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
	return rx_buf;
 800bf80:	4b02      	ldr	r3, [pc, #8]	@ (800bf8c <USBD_HID_GetData+0x10>)
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	200008a4 	.word	0x200008a4

0800bf90 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	220a      	movs	r2, #10
 800bf9c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800bf9e:	4b03      	ldr	r3, [pc, #12]	@ (800bfac <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	200000e0 	.word	0x200000e0

0800bfb0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	e01f      	b.n	800c008 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	79fa      	ldrb	r2, [r7, #7]
 800bffa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f001 fcc9 	bl	800d994 <USBD_LL_Init>
 800c002:	4603      	mov	r3, r0
 800c004:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c006:	7dfb      	ldrb	r3, [r7, #23]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c01a:	2300      	movs	r3, #0
 800c01c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c024:	2303      	movs	r3, #3
 800c026:	e025      	b.n	800c074 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	32ae      	adds	r2, #174	@ 0xae
 800c03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00f      	beq.n	800c064 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	32ae      	adds	r2, #174	@ 0xae
 800c04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c054:	f107 020e 	add.w	r2, r7, #14
 800c058:	4610      	mov	r0, r2
 800c05a:	4798      	blx	r3
 800c05c:	4602      	mov	r2, r0
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 fcd1 	bl	800da2c <USBD_LL_Start>
 800c08a:	4603      	mov	r3, r0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c09c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	370c      	adds	r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b084      	sub	sp, #16
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d009      	beq.n	800c0d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	4798      	blx	r3
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	78fa      	ldrb	r2, [r7, #3]
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	4798      	blx	r3
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c108:	2303      	movs	r3, #3
 800c10a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b084      	sub	sp, #16
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	4618      	mov	r0, r3
 800c12a:	f001 f8b2 	bl	800d292 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2201      	movs	r2, #1
 800c132:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c13c:	461a      	mov	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c14a:	f003 031f 	and.w	r3, r3, #31
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d01a      	beq.n	800c188 <USBD_LL_SetupStage+0x72>
 800c152:	2b02      	cmp	r3, #2
 800c154:	d822      	bhi.n	800c19c <USBD_LL_SetupStage+0x86>
 800c156:	2b00      	cmp	r3, #0
 800c158:	d002      	beq.n	800c160 <USBD_LL_SetupStage+0x4a>
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d00a      	beq.n	800c174 <USBD_LL_SetupStage+0x5e>
 800c15e:	e01d      	b.n	800c19c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 fb09 	bl	800c780 <USBD_StdDevReq>
 800c16e:	4603      	mov	r3, r0
 800c170:	73fb      	strb	r3, [r7, #15]
      break;
 800c172:	e020      	b.n	800c1b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fb71 	bl	800c864 <USBD_StdItfReq>
 800c182:	4603      	mov	r3, r0
 800c184:	73fb      	strb	r3, [r7, #15]
      break;
 800c186:	e016      	b.n	800c1b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fbd3 	bl	800c93c <USBD_StdEPReq>
 800c196:	4603      	mov	r3, r0
 800c198:	73fb      	strb	r3, [r7, #15]
      break;
 800c19a:	e00c      	b.n	800c1b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c1a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f001 fc9e 	bl	800daec <USBD_LL_StallEP>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b4:	bf00      	nop
  }

  return ret;
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d16e      	bne.n	800c2b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c1de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c1e6:	2b03      	cmp	r3, #3
 800c1e8:	f040 8098 	bne.w	800c31c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	689a      	ldr	r2, [r3, #8]
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d913      	bls.n	800c220 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	689a      	ldr	r2, [r3, #8]
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	1ad2      	subs	r2, r2, r3
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	68da      	ldr	r2, [r3, #12]
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	4293      	cmp	r3, r2
 800c210:	bf28      	it	cs
 800c212:	4613      	movcs	r3, r2
 800c214:	461a      	mov	r2, r3
 800c216:	6879      	ldr	r1, [r7, #4]
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f001 f911 	bl	800d440 <USBD_CtlContinueRx>
 800c21e:	e07d      	b.n	800c31c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c226:	f003 031f 	and.w	r3, r3, #31
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d014      	beq.n	800c258 <USBD_LL_DataOutStage+0x98>
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d81d      	bhi.n	800c26e <USBD_LL_DataOutStage+0xae>
 800c232:	2b00      	cmp	r3, #0
 800c234:	d002      	beq.n	800c23c <USBD_LL_DataOutStage+0x7c>
 800c236:	2b01      	cmp	r3, #1
 800c238:	d003      	beq.n	800c242 <USBD_LL_DataOutStage+0x82>
 800c23a:	e018      	b.n	800c26e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c23c:	2300      	movs	r3, #0
 800c23e:	75bb      	strb	r3, [r7, #22]
            break;
 800c240:	e018      	b.n	800c274 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	4619      	mov	r1, r3
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 fa5e 	bl	800c70e <USBD_CoreFindIF>
 800c252:	4603      	mov	r3, r0
 800c254:	75bb      	strb	r3, [r7, #22]
            break;
 800c256:	e00d      	b.n	800c274 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	4619      	mov	r1, r3
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 fa60 	bl	800c728 <USBD_CoreFindEP>
 800c268:	4603      	mov	r3, r0
 800c26a:	75bb      	strb	r3, [r7, #22]
            break;
 800c26c:	e002      	b.n	800c274 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c26e:	2300      	movs	r3, #0
 800c270:	75bb      	strb	r3, [r7, #22]
            break;
 800c272:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c274:	7dbb      	ldrb	r3, [r7, #22]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d119      	bne.n	800c2ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b03      	cmp	r3, #3
 800c284:	d113      	bne.n	800c2ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c286:	7dba      	ldrb	r2, [r7, #22]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	32ae      	adds	r2, #174	@ 0xae
 800c28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00b      	beq.n	800c2ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c296:	7dba      	ldrb	r2, [r7, #22]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c29e:	7dba      	ldrb	r2, [r7, #22]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	32ae      	adds	r2, #174	@ 0xae
 800c2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f001 f8d7 	bl	800d462 <USBD_CtlSendStatus>
 800c2b4:	e032      	b.n	800c31c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c2b6:	7afb      	ldrb	r3, [r7, #11]
 800c2b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	4619      	mov	r1, r3
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 fa31 	bl	800c728 <USBD_CoreFindEP>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2ca:	7dbb      	ldrb	r3, [r7, #22]
 800c2cc:	2bff      	cmp	r3, #255	@ 0xff
 800c2ce:	d025      	beq.n	800c31c <USBD_LL_DataOutStage+0x15c>
 800c2d0:	7dbb      	ldrb	r3, [r7, #22]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d122      	bne.n	800c31c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	d117      	bne.n	800c312 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c2e2:	7dba      	ldrb	r2, [r7, #22]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	32ae      	adds	r2, #174	@ 0xae
 800c2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00f      	beq.n	800c312 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c2f2:	7dba      	ldrb	r2, [r7, #22]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c2fa:	7dba      	ldrb	r2, [r7, #22]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	32ae      	adds	r2, #174	@ 0xae
 800c300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	7afa      	ldrb	r2, [r7, #11]
 800c308:	4611      	mov	r1, r2
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	4798      	blx	r3
 800c30e:	4603      	mov	r3, r0
 800c310:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c312:	7dfb      	ldrb	r3, [r7, #23]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c318:	7dfb      	ldrb	r3, [r7, #23]
 800c31a:	e000      	b.n	800c31e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b086      	sub	sp, #24
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	460b      	mov	r3, r1
 800c330:	607a      	str	r2, [r7, #4]
 800c332:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d16f      	bne.n	800c41a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3314      	adds	r3, #20
 800c33e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c346:	2b02      	cmp	r3, #2
 800c348:	d15a      	bne.n	800c400 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	689a      	ldr	r2, [r3, #8]
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	429a      	cmp	r2, r3
 800c354:	d914      	bls.n	800c380 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	689a      	ldr	r2, [r3, #8]
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	1ad2      	subs	r2, r2, r3
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	461a      	mov	r2, r3
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f001 f856 	bl	800d41e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c372:	2300      	movs	r3, #0
 800c374:	2200      	movs	r2, #0
 800c376:	2100      	movs	r1, #0
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f001 fc61 	bl	800dc40 <USBD_LL_PrepareReceive>
 800c37e:	e03f      	b.n	800c400 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	68da      	ldr	r2, [r3, #12]
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d11c      	bne.n	800c3c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c394:	429a      	cmp	r2, r3
 800c396:	d316      	bcc.n	800c3c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d20f      	bcs.n	800c3c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f001 f837 	bl	800d41e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	2100      	movs	r1, #0
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f001 fc3e 	bl	800dc40 <USBD_LL_PrepareReceive>
 800c3c4:	e01c      	b.n	800c400 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d10f      	bne.n	800c3f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d009      	beq.n	800c3f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3f2:	2180      	movs	r1, #128	@ 0x80
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f001 fb79 	bl	800daec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f001 f844 	bl	800d488 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d03a      	beq.n	800c480 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f7ff fe42 	bl	800c094 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c418:	e032      	b.n	800c480 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c41a:	7afb      	ldrb	r3, [r7, #11]
 800c41c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c420:	b2db      	uxtb	r3, r3
 800c422:	4619      	mov	r1, r3
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 f97f 	bl	800c728 <USBD_CoreFindEP>
 800c42a:	4603      	mov	r3, r0
 800c42c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c42e:	7dfb      	ldrb	r3, [r7, #23]
 800c430:	2bff      	cmp	r3, #255	@ 0xff
 800c432:	d025      	beq.n	800c480 <USBD_LL_DataInStage+0x15a>
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d122      	bne.n	800c480 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b03      	cmp	r3, #3
 800c444:	d11c      	bne.n	800c480 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c446:	7dfa      	ldrb	r2, [r7, #23]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	32ae      	adds	r2, #174	@ 0xae
 800c44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d014      	beq.n	800c480 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c456:	7dfa      	ldrb	r2, [r7, #23]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c45e:	7dfa      	ldrb	r2, [r7, #23]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	32ae      	adds	r2, #174	@ 0xae
 800c464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	7afa      	ldrb	r2, [r7, #11]
 800c46c:	4611      	mov	r1, r2
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	4798      	blx	r3
 800c472:	4603      	mov	r3, r0
 800c474:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c476:	7dbb      	ldrb	r3, [r7, #22]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c47c:	7dbb      	ldrb	r3, [r7, #22]
 800c47e:	e000      	b.n	800c482 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3718      	adds	r7, #24
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2201      	movs	r2, #1
 800c49a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d014      	beq.n	800c4f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00e      	beq.n	800c4f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	6852      	ldr	r2, [r2, #4]
 800c4de:	b2d2      	uxtb	r2, r2
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	4798      	blx	r3
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4f0:	2340      	movs	r3, #64	@ 0x40
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f001 fab3 	bl	800da62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2240      	movs	r2, #64	@ 0x40
 800c508:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c50c:	2340      	movs	r3, #64	@ 0x40
 800c50e:	2200      	movs	r2, #0
 800c510:	2180      	movs	r1, #128	@ 0x80
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f001 faa5 	bl	800da62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2240      	movs	r2, #64	@ 0x40
 800c522:	621a      	str	r2, [r3, #32]

  return ret;
 800c524:	7bfb      	ldrb	r3, [r7, #15]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c52e:	b480      	push	{r7}
 800c530:	b083      	sub	sp, #12
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	460b      	mov	r3, r1
 800c538:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	78fa      	ldrb	r2, [r7, #3]
 800c53e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	370c      	adds	r7, #12
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c54e:	b480      	push	{r7}
 800c550:	b083      	sub	sp, #12
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2204      	movs	r2, #4
 800c568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c57a:	b480      	push	{r7}
 800c57c:	b083      	sub	sp, #12
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b04      	cmp	r3, #4
 800c58c:	d106      	bne.n	800c59c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c594:	b2da      	uxtb	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d110      	bne.n	800c5e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5ce:	69db      	ldr	r3, [r3, #28]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5da:	69db      	ldr	r3, [r3, #28]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b082      	sub	sp, #8
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	32ae      	adds	r2, #174	@ 0xae
 800c600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c608:	2303      	movs	r3, #3
 800c60a:	e01c      	b.n	800c646 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b03      	cmp	r3, #3
 800c616:	d115      	bne.n	800c644 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	32ae      	adds	r2, #174	@ 0xae
 800c622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00b      	beq.n	800c644 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	32ae      	adds	r2, #174	@ 0xae
 800c636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63a:	6a1b      	ldr	r3, [r3, #32]
 800c63c:	78fa      	ldrb	r2, [r7, #3]
 800c63e:	4611      	mov	r1, r2
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b082      	sub	sp, #8
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	460b      	mov	r3, r1
 800c658:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	32ae      	adds	r2, #174	@ 0xae
 800c664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e01c      	b.n	800c6aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b03      	cmp	r3, #3
 800c67a:	d115      	bne.n	800c6a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	32ae      	adds	r2, #174	@ 0xae
 800c686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00b      	beq.n	800c6a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	32ae      	adds	r2, #174	@ 0xae
 800c69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a0:	78fa      	ldrb	r2, [r7, #3]
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00e      	beq.n	800c704 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	6852      	ldr	r2, [r2, #4]
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	4798      	blx	r3
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c700:	2303      	movs	r3, #3
 800c702:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c704:	7bfb      	ldrb	r3, [r7, #15]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c70e:	b480      	push	{r7}
 800c710:	b083      	sub	sp, #12
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c71a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	460b      	mov	r3, r1
 800c732:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c734:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c736:	4618      	mov	r0, r3
 800c738:	370c      	adds	r7, #12
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c742:	b480      	push	{r7}
 800c744:	b087      	sub	sp, #28
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	3301      	adds	r3, #1
 800c758:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c760:	8a3b      	ldrh	r3, [r7, #16]
 800c762:	021b      	lsls	r3, r3, #8
 800c764:	b21a      	sxth	r2, r3
 800c766:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	b21b      	sxth	r3, r3
 800c76e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c770:	89fb      	ldrh	r3, [r7, #14]
}
 800c772:	4618      	mov	r0, r3
 800c774:	371c      	adds	r7, #28
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
	...

0800c780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c796:	2b40      	cmp	r3, #64	@ 0x40
 800c798:	d005      	beq.n	800c7a6 <USBD_StdDevReq+0x26>
 800c79a:	2b40      	cmp	r3, #64	@ 0x40
 800c79c:	d857      	bhi.n	800c84e <USBD_StdDevReq+0xce>
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00f      	beq.n	800c7c2 <USBD_StdDevReq+0x42>
 800c7a2:	2b20      	cmp	r3, #32
 800c7a4:	d153      	bne.n	800c84e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	32ae      	adds	r2, #174	@ 0xae
 800c7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	4798      	blx	r3
 800c7bc:	4603      	mov	r3, r0
 800c7be:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c0:	e04a      	b.n	800c858 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	785b      	ldrb	r3, [r3, #1]
 800c7c6:	2b09      	cmp	r3, #9
 800c7c8:	d83b      	bhi.n	800c842 <USBD_StdDevReq+0xc2>
 800c7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d0 <USBD_StdDevReq+0x50>)
 800c7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d0:	0800c825 	.word	0x0800c825
 800c7d4:	0800c839 	.word	0x0800c839
 800c7d8:	0800c843 	.word	0x0800c843
 800c7dc:	0800c82f 	.word	0x0800c82f
 800c7e0:	0800c843 	.word	0x0800c843
 800c7e4:	0800c803 	.word	0x0800c803
 800c7e8:	0800c7f9 	.word	0x0800c7f9
 800c7ec:	0800c843 	.word	0x0800c843
 800c7f0:	0800c81b 	.word	0x0800c81b
 800c7f4:	0800c80d 	.word	0x0800c80d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fa3c 	bl	800cc78 <USBD_GetDescriptor>
          break;
 800c800:	e024      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fba1 	bl	800cf4c <USBD_SetAddress>
          break;
 800c80a:	e01f      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fbe0 	bl	800cfd4 <USBD_SetConfig>
 800c814:	4603      	mov	r3, r0
 800c816:	73fb      	strb	r3, [r7, #15]
          break;
 800c818:	e018      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fc83 	bl	800d128 <USBD_GetConfig>
          break;
 800c822:	e013      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fcb4 	bl	800d194 <USBD_GetStatus>
          break;
 800c82c:	e00e      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fce3 	bl	800d1fc <USBD_SetFeature>
          break;
 800c836:	e009      	b.n	800c84c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c838:	6839      	ldr	r1, [r7, #0]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fd07 	bl	800d24e <USBD_ClrFeature>
          break;
 800c840:	e004      	b.n	800c84c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fd5e 	bl	800d306 <USBD_CtlError>
          break;
 800c84a:	bf00      	nop
      }
      break;
 800c84c:	e004      	b.n	800c858 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fd58 	bl	800d306 <USBD_CtlError>
      break;
 800c856:	bf00      	nop
  }

  return ret;
 800c858:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop

0800c864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c87a:	2b40      	cmp	r3, #64	@ 0x40
 800c87c:	d005      	beq.n	800c88a <USBD_StdItfReq+0x26>
 800c87e:	2b40      	cmp	r3, #64	@ 0x40
 800c880:	d852      	bhi.n	800c928 <USBD_StdItfReq+0xc4>
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <USBD_StdItfReq+0x26>
 800c886:	2b20      	cmp	r3, #32
 800c888:	d14e      	bne.n	800c928 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c890:	b2db      	uxtb	r3, r3
 800c892:	3b01      	subs	r3, #1
 800c894:	2b02      	cmp	r3, #2
 800c896:	d840      	bhi.n	800c91a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	889b      	ldrh	r3, [r3, #4]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d836      	bhi.n	800c910 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	889b      	ldrh	r3, [r3, #4]
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff ff2f 	bl	800c70e <USBD_CoreFindIF>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8b4:	7bbb      	ldrb	r3, [r7, #14]
 800c8b6:	2bff      	cmp	r3, #255	@ 0xff
 800c8b8:	d01d      	beq.n	800c8f6 <USBD_StdItfReq+0x92>
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d11a      	bne.n	800c8f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c8c0:	7bba      	ldrb	r2, [r7, #14]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	32ae      	adds	r2, #174	@ 0xae
 800c8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00f      	beq.n	800c8f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c8d0:	7bba      	ldrb	r2, [r7, #14]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c8d8:	7bba      	ldrb	r2, [r7, #14]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	32ae      	adds	r2, #174	@ 0xae
 800c8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	4798      	blx	r3
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8ee:	e004      	b.n	800c8fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8f4:	e001      	b.n	800c8fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	88db      	ldrh	r3, [r3, #6]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d110      	bne.n	800c924 <USBD_StdItfReq+0xc0>
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10d      	bne.n	800c924 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 fdaa 	bl	800d462 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c90e:	e009      	b.n	800c924 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fcf7 	bl	800d306 <USBD_CtlError>
          break;
 800c918:	e004      	b.n	800c924 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fcf2 	bl	800d306 <USBD_CtlError>
          break;
 800c922:	e000      	b.n	800c926 <USBD_StdItfReq+0xc2>
          break;
 800c924:	bf00      	nop
      }
      break;
 800c926:	e004      	b.n	800c932 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c928:	6839      	ldr	r1, [r7, #0]
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 fceb 	bl	800d306 <USBD_CtlError>
      break;
 800c930:	bf00      	nop
  }

  return ret;
 800c932:	7bfb      	ldrb	r3, [r7, #15]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	889b      	ldrh	r3, [r3, #4]
 800c94e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c958:	2b40      	cmp	r3, #64	@ 0x40
 800c95a:	d007      	beq.n	800c96c <USBD_StdEPReq+0x30>
 800c95c:	2b40      	cmp	r3, #64	@ 0x40
 800c95e:	f200 817f 	bhi.w	800cc60 <USBD_StdEPReq+0x324>
 800c962:	2b00      	cmp	r3, #0
 800c964:	d02a      	beq.n	800c9bc <USBD_StdEPReq+0x80>
 800c966:	2b20      	cmp	r3, #32
 800c968:	f040 817a 	bne.w	800cc60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
 800c96e:	4619      	mov	r1, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff fed9 	bl	800c728 <USBD_CoreFindEP>
 800c976:	4603      	mov	r3, r0
 800c978:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c97a:	7b7b      	ldrb	r3, [r7, #13]
 800c97c:	2bff      	cmp	r3, #255	@ 0xff
 800c97e:	f000 8174 	beq.w	800cc6a <USBD_StdEPReq+0x32e>
 800c982:	7b7b      	ldrb	r3, [r7, #13]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f040 8170 	bne.w	800cc6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c98a:	7b7a      	ldrb	r2, [r7, #13]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c992:	7b7a      	ldrb	r2, [r7, #13]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	32ae      	adds	r2, #174	@ 0xae
 800c998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 8163 	beq.w	800cc6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c9a4:	7b7a      	ldrb	r2, [r7, #13]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	32ae      	adds	r2, #174	@ 0xae
 800c9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	4798      	blx	r3
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c9ba:	e156      	b.n	800cc6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	d008      	beq.n	800c9d6 <USBD_StdEPReq+0x9a>
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	f300 8145 	bgt.w	800cc54 <USBD_StdEPReq+0x318>
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 809b 	beq.w	800cb06 <USBD_StdEPReq+0x1ca>
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d03c      	beq.n	800ca4e <USBD_StdEPReq+0x112>
 800c9d4:	e13e      	b.n	800cc54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d002      	beq.n	800c9e8 <USBD_StdEPReq+0xac>
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	d016      	beq.n	800ca14 <USBD_StdEPReq+0xd8>
 800c9e6:	e02c      	b.n	800ca42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00d      	beq.n	800ca0a <USBD_StdEPReq+0xce>
 800c9ee:	7bbb      	ldrb	r3, [r7, #14]
 800c9f0:	2b80      	cmp	r3, #128	@ 0x80
 800c9f2:	d00a      	beq.n	800ca0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f001 f877 	bl	800daec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9fe:	2180      	movs	r1, #128	@ 0x80
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f001 f873 	bl	800daec <USBD_LL_StallEP>
 800ca06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca08:	e020      	b.n	800ca4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fc7a 	bl	800d306 <USBD_CtlError>
              break;
 800ca12:	e01b      	b.n	800ca4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	885b      	ldrh	r3, [r3, #2]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10e      	bne.n	800ca3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00b      	beq.n	800ca3a <USBD_StdEPReq+0xfe>
 800ca22:	7bbb      	ldrb	r3, [r7, #14]
 800ca24:	2b80      	cmp	r3, #128	@ 0x80
 800ca26:	d008      	beq.n	800ca3a <USBD_StdEPReq+0xfe>
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	88db      	ldrh	r3, [r3, #6]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d104      	bne.n	800ca3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f001 f859 	bl	800daec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fd11 	bl	800d462 <USBD_CtlSendStatus>

              break;
 800ca40:	e004      	b.n	800ca4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fc5e 	bl	800d306 <USBD_CtlError>
              break;
 800ca4a:	bf00      	nop
          }
          break;
 800ca4c:	e107      	b.n	800cc5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d002      	beq.n	800ca60 <USBD_StdEPReq+0x124>
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d016      	beq.n	800ca8c <USBD_StdEPReq+0x150>
 800ca5e:	e04b      	b.n	800caf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca60:	7bbb      	ldrb	r3, [r7, #14]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00d      	beq.n	800ca82 <USBD_StdEPReq+0x146>
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
 800ca68:	2b80      	cmp	r3, #128	@ 0x80
 800ca6a:	d00a      	beq.n	800ca82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f001 f83b 	bl	800daec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca76:	2180      	movs	r1, #128	@ 0x80
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f001 f837 	bl	800daec <USBD_LL_StallEP>
 800ca7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca80:	e040      	b.n	800cb04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fc3e 	bl	800d306 <USBD_CtlError>
              break;
 800ca8a:	e03b      	b.n	800cb04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	885b      	ldrh	r3, [r3, #2]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d136      	bne.n	800cb02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
 800caa0:	4619      	mov	r1, r3
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 f841 	bl	800db2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fcda 	bl	800d462 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fe38 	bl	800c728 <USBD_CoreFindEP>
 800cab8:	4603      	mov	r3, r0
 800caba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cabc:	7b7b      	ldrb	r3, [r7, #13]
 800cabe:	2bff      	cmp	r3, #255	@ 0xff
 800cac0:	d01f      	beq.n	800cb02 <USBD_StdEPReq+0x1c6>
 800cac2:	7b7b      	ldrb	r3, [r7, #13]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d11c      	bne.n	800cb02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cac8:	7b7a      	ldrb	r2, [r7, #13]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cad0:	7b7a      	ldrb	r2, [r7, #13]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	32ae      	adds	r2, #174	@ 0xae
 800cad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d010      	beq.n	800cb02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cae0:	7b7a      	ldrb	r2, [r7, #13]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	32ae      	adds	r2, #174	@ 0xae
 800cae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	4798      	blx	r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800caf6:	e004      	b.n	800cb02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fc03 	bl	800d306 <USBD_CtlError>
              break;
 800cb00:	e000      	b.n	800cb04 <USBD_StdEPReq+0x1c8>
              break;
 800cb02:	bf00      	nop
          }
          break;
 800cb04:	e0ab      	b.n	800cc5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d002      	beq.n	800cb18 <USBD_StdEPReq+0x1dc>
 800cb12:	2b03      	cmp	r3, #3
 800cb14:	d032      	beq.n	800cb7c <USBD_StdEPReq+0x240>
 800cb16:	e097      	b.n	800cc48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb18:	7bbb      	ldrb	r3, [r7, #14]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d007      	beq.n	800cb2e <USBD_StdEPReq+0x1f2>
 800cb1e:	7bbb      	ldrb	r3, [r7, #14]
 800cb20:	2b80      	cmp	r3, #128	@ 0x80
 800cb22:	d004      	beq.n	800cb2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cb24:	6839      	ldr	r1, [r7, #0]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 fbed 	bl	800d306 <USBD_CtlError>
                break;
 800cb2c:	e091      	b.n	800cc52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	da0b      	bge.n	800cb4e <USBD_StdEPReq+0x212>
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
 800cb38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4413      	add	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	3310      	adds	r3, #16
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	4413      	add	r3, r2
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	e00b      	b.n	800cb66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb4e:	7bbb      	ldrb	r3, [r7, #14]
 800cb50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb54:	4613      	mov	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	4413      	add	r3, r2
 800cb64:	3304      	adds	r3, #4
 800cb66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2202      	movs	r2, #2
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fc37 	bl	800d3e8 <USBD_CtlSendData>
              break;
 800cb7a:	e06a      	b.n	800cc52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	da11      	bge.n	800cba8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
 800cb86:	f003 020f 	and.w	r2, r3, #15
 800cb8a:	6879      	ldr	r1, [r7, #4]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	440b      	add	r3, r1
 800cb96:	3324      	adds	r3, #36	@ 0x24
 800cb98:	881b      	ldrh	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d117      	bne.n	800cbce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fbb0 	bl	800d306 <USBD_CtlError>
                  break;
 800cba6:	e054      	b.n	800cc52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cba8:	7bbb      	ldrb	r3, [r7, #14]
 800cbaa:	f003 020f 	and.w	r2, r3, #15
 800cbae:	6879      	ldr	r1, [r7, #4]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	440b      	add	r3, r1
 800cbba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d104      	bne.n	800cbce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fb9d 	bl	800d306 <USBD_CtlError>
                  break;
 800cbcc:	e041      	b.n	800cc52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	da0b      	bge.n	800cbee <USBD_StdEPReq+0x2b2>
 800cbd6:	7bbb      	ldrb	r3, [r7, #14]
 800cbd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	3310      	adds	r3, #16
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	4413      	add	r3, r2
 800cbea:	3304      	adds	r3, #4
 800cbec:	e00b      	b.n	800cc06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	4413      	add	r3, r2
 800cc04:	3304      	adds	r3, #4
 800cc06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d002      	beq.n	800cc14 <USBD_StdEPReq+0x2d8>
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	2b80      	cmp	r3, #128	@ 0x80
 800cc12:	d103      	bne.n	800cc1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	e00e      	b.n	800cc3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 ffa1 	bl	800db68 <USBD_LL_IsStallEP>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	e002      	b.n	800cc3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2202      	movs	r2, #2
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fbd1 	bl	800d3e8 <USBD_CtlSendData>
              break;
 800cc46:	e004      	b.n	800cc52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fb5b 	bl	800d306 <USBD_CtlError>
              break;
 800cc50:	bf00      	nop
          }
          break;
 800cc52:	e004      	b.n	800cc5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fb55 	bl	800d306 <USBD_CtlError>
          break;
 800cc5c:	bf00      	nop
      }
      break;
 800cc5e:	e005      	b.n	800cc6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fb4f 	bl	800d306 <USBD_CtlError>
      break;
 800cc68:	e000      	b.n	800cc6c <USBD_StdEPReq+0x330>
      break;
 800cc6a:	bf00      	nop
  }

  return ret;
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc82:	2300      	movs	r3, #0
 800cc84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	885b      	ldrh	r3, [r3, #2]
 800cc92:	0a1b      	lsrs	r3, r3, #8
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	3b01      	subs	r3, #1
 800cc98:	2b06      	cmp	r3, #6
 800cc9a:	f200 8128 	bhi.w	800ceee <USBD_GetDescriptor+0x276>
 800cc9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cca4 <USBD_GetDescriptor+0x2c>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800ccc1 	.word	0x0800ccc1
 800cca8:	0800ccd9 	.word	0x0800ccd9
 800ccac:	0800cd19 	.word	0x0800cd19
 800ccb0:	0800ceef 	.word	0x0800ceef
 800ccb4:	0800ceef 	.word	0x0800ceef
 800ccb8:	0800ce8f 	.word	0x0800ce8f
 800ccbc:	0800cebb 	.word	0x0800cebb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	7c12      	ldrb	r2, [r2, #16]
 800cccc:	f107 0108 	add.w	r1, r7, #8
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	4798      	blx	r3
 800ccd4:	60f8      	str	r0, [r7, #12]
      break;
 800ccd6:	e112      	b.n	800cefe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	7c1b      	ldrb	r3, [r3, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10d      	bne.n	800ccfc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce8:	f107 0208 	add.w	r2, r7, #8
 800ccec:	4610      	mov	r0, r2
 800ccee:	4798      	blx	r3
 800ccf0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ccfa:	e100      	b.n	800cefe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd04:	f107 0208 	add.w	r2, r7, #8
 800cd08:	4610      	mov	r0, r2
 800cd0a:	4798      	blx	r3
 800cd0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3301      	adds	r3, #1
 800cd12:	2202      	movs	r2, #2
 800cd14:	701a      	strb	r2, [r3, #0]
      break;
 800cd16:	e0f2      	b.n	800cefe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	885b      	ldrh	r3, [r3, #2]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	2b05      	cmp	r3, #5
 800cd20:	f200 80ac 	bhi.w	800ce7c <USBD_GetDescriptor+0x204>
 800cd24:	a201      	add	r2, pc, #4	@ (adr r2, 800cd2c <USBD_GetDescriptor+0xb4>)
 800cd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2a:	bf00      	nop
 800cd2c:	0800cd45 	.word	0x0800cd45
 800cd30:	0800cd79 	.word	0x0800cd79
 800cd34:	0800cdad 	.word	0x0800cdad
 800cd38:	0800cde1 	.word	0x0800cde1
 800cd3c:	0800ce15 	.word	0x0800ce15
 800cd40:	0800ce49 	.word	0x0800ce49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	7c12      	ldrb	r2, [r2, #16]
 800cd5c:	f107 0108 	add.w	r1, r7, #8
 800cd60:	4610      	mov	r0, r2
 800cd62:	4798      	blx	r3
 800cd64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd66:	e091      	b.n	800ce8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 facb 	bl	800d306 <USBD_CtlError>
            err++;
 800cd70:	7afb      	ldrb	r3, [r7, #11]
 800cd72:	3301      	adds	r3, #1
 800cd74:	72fb      	strb	r3, [r7, #11]
          break;
 800cd76:	e089      	b.n	800ce8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00b      	beq.n	800cd9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	7c12      	ldrb	r2, [r2, #16]
 800cd90:	f107 0108 	add.w	r1, r7, #8
 800cd94:	4610      	mov	r0, r2
 800cd96:	4798      	blx	r3
 800cd98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd9a:	e077      	b.n	800ce8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 fab1 	bl	800d306 <USBD_CtlError>
            err++;
 800cda4:	7afb      	ldrb	r3, [r7, #11]
 800cda6:	3301      	adds	r3, #1
 800cda8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdaa:	e06f      	b.n	800ce8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00b      	beq.n	800cdd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	7c12      	ldrb	r2, [r2, #16]
 800cdc4:	f107 0108 	add.w	r1, r7, #8
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4798      	blx	r3
 800cdcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdce:	e05d      	b.n	800ce8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdd0:	6839      	ldr	r1, [r7, #0]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fa97 	bl	800d306 <USBD_CtlError>
            err++;
 800cdd8:	7afb      	ldrb	r3, [r7, #11]
 800cdda:	3301      	adds	r3, #1
 800cddc:	72fb      	strb	r3, [r7, #11]
          break;
 800cdde:	e055      	b.n	800ce8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00b      	beq.n	800ce04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	7c12      	ldrb	r2, [r2, #16]
 800cdf8:	f107 0108 	add.w	r1, r7, #8
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	4798      	blx	r3
 800ce00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce02:	e043      	b.n	800ce8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce04:	6839      	ldr	r1, [r7, #0]
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fa7d 	bl	800d306 <USBD_CtlError>
            err++;
 800ce0c:	7afb      	ldrb	r3, [r7, #11]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	72fb      	strb	r3, [r7, #11]
          break;
 800ce12:	e03b      	b.n	800ce8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce1a:	695b      	ldr	r3, [r3, #20]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00b      	beq.n	800ce38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	7c12      	ldrb	r2, [r2, #16]
 800ce2c:	f107 0108 	add.w	r1, r7, #8
 800ce30:	4610      	mov	r0, r2
 800ce32:	4798      	blx	r3
 800ce34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce36:	e029      	b.n	800ce8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce38:	6839      	ldr	r1, [r7, #0]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fa63 	bl	800d306 <USBD_CtlError>
            err++;
 800ce40:	7afb      	ldrb	r3, [r7, #11]
 800ce42:	3301      	adds	r3, #1
 800ce44:	72fb      	strb	r3, [r7, #11]
          break;
 800ce46:	e021      	b.n	800ce8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	7c12      	ldrb	r2, [r2, #16]
 800ce60:	f107 0108 	add.w	r1, r7, #8
 800ce64:	4610      	mov	r0, r2
 800ce66:	4798      	blx	r3
 800ce68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce6a:	e00f      	b.n	800ce8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce6c:	6839      	ldr	r1, [r7, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fa49 	bl	800d306 <USBD_CtlError>
            err++;
 800ce74:	7afb      	ldrb	r3, [r7, #11]
 800ce76:	3301      	adds	r3, #1
 800ce78:	72fb      	strb	r3, [r7, #11]
          break;
 800ce7a:	e007      	b.n	800ce8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fa41 	bl	800d306 <USBD_CtlError>
          err++;
 800ce84:	7afb      	ldrb	r3, [r7, #11]
 800ce86:	3301      	adds	r3, #1
 800ce88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ce8a:	bf00      	nop
      }
      break;
 800ce8c:	e037      	b.n	800cefe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	7c1b      	ldrb	r3, [r3, #16]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d109      	bne.n	800ceaa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce9e:	f107 0208 	add.w	r2, r7, #8
 800cea2:	4610      	mov	r0, r2
 800cea4:	4798      	blx	r3
 800cea6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cea8:	e029      	b.n	800cefe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fa2a 	bl	800d306 <USBD_CtlError>
        err++;
 800ceb2:	7afb      	ldrb	r3, [r7, #11]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	72fb      	strb	r3, [r7, #11]
      break;
 800ceb8:	e021      	b.n	800cefe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7c1b      	ldrb	r3, [r3, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10d      	bne.n	800cede <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceca:	f107 0208 	add.w	r2, r7, #8
 800cece:	4610      	mov	r0, r2
 800ced0:	4798      	blx	r3
 800ced2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	3301      	adds	r3, #1
 800ced8:	2207      	movs	r2, #7
 800ceda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cedc:	e00f      	b.n	800cefe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cede:	6839      	ldr	r1, [r7, #0]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 fa10 	bl	800d306 <USBD_CtlError>
        err++;
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	3301      	adds	r3, #1
 800ceea:	72fb      	strb	r3, [r7, #11]
      break;
 800ceec:	e007      	b.n	800cefe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 fa08 	bl	800d306 <USBD_CtlError>
      err++;
 800cef6:	7afb      	ldrb	r3, [r7, #11]
 800cef8:	3301      	adds	r3, #1
 800cefa:	72fb      	strb	r3, [r7, #11]
      break;
 800cefc:	bf00      	nop
  }

  if (err != 0U)
 800cefe:	7afb      	ldrb	r3, [r7, #11]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d11e      	bne.n	800cf42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	88db      	ldrh	r3, [r3, #6]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d016      	beq.n	800cf3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cf0c:	893b      	ldrh	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00e      	beq.n	800cf30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	88da      	ldrh	r2, [r3, #6]
 800cf16:	893b      	ldrh	r3, [r7, #8]
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	bf28      	it	cs
 800cf1c:	4613      	movcs	r3, r2
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf22:	893b      	ldrh	r3, [r7, #8]
 800cf24:	461a      	mov	r2, r3
 800cf26:	68f9      	ldr	r1, [r7, #12]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fa5d 	bl	800d3e8 <USBD_CtlSendData>
 800cf2e:	e009      	b.n	800cf44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 f9e7 	bl	800d306 <USBD_CtlError>
 800cf38:	e004      	b.n	800cf44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fa91 	bl	800d462 <USBD_CtlSendStatus>
 800cf40:	e000      	b.n	800cf44 <USBD_GetDescriptor+0x2cc>
    return;
 800cf42:	bf00      	nop
  }
}
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop

0800cf4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	889b      	ldrh	r3, [r3, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d131      	bne.n	800cfc2 <USBD_SetAddress+0x76>
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	88db      	ldrh	r3, [r3, #6]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d12d      	bne.n	800cfc2 <USBD_SetAddress+0x76>
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	885b      	ldrh	r3, [r3, #2]
 800cf6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf6c:	d829      	bhi.n	800cfc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	885b      	ldrh	r3, [r3, #2]
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d104      	bne.n	800cf90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f9bc 	bl	800d306 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf8e:	e01d      	b.n	800cfcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7bfa      	ldrb	r2, [r7, #15]
 800cf94:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fe0f 	bl	800dbc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 fa5d 	bl	800d462 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d004      	beq.n	800cfb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfb6:	e009      	b.n	800cfcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfc0:	e004      	b.n	800cfcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 f99e 	bl	800d306 <USBD_CtlError>
  }
}
 800cfca:	bf00      	nop
 800cfcc:	bf00      	nop
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	885b      	ldrh	r3, [r3, #2]
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	4b4e      	ldr	r3, [pc, #312]	@ (800d124 <USBD_SetConfig+0x150>)
 800cfea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cfec:	4b4d      	ldr	r3, [pc, #308]	@ (800d124 <USBD_SetConfig+0x150>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d905      	bls.n	800d000 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f985 	bl	800d306 <USBD_CtlError>
    return USBD_FAIL;
 800cffc:	2303      	movs	r3, #3
 800cffe:	e08c      	b.n	800d11a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b02      	cmp	r3, #2
 800d00a:	d002      	beq.n	800d012 <USBD_SetConfig+0x3e>
 800d00c:	2b03      	cmp	r3, #3
 800d00e:	d029      	beq.n	800d064 <USBD_SetConfig+0x90>
 800d010:	e075      	b.n	800d0fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d012:	4b44      	ldr	r3, [pc, #272]	@ (800d124 <USBD_SetConfig+0x150>)
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d020      	beq.n	800d05c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d01a:	4b42      	ldr	r3, [pc, #264]	@ (800d124 <USBD_SetConfig+0x150>)
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	461a      	mov	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d024:	4b3f      	ldr	r3, [pc, #252]	@ (800d124 <USBD_SetConfig+0x150>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff f83d 	bl	800c0aa <USBD_SetClassConfig>
 800d030:	4603      	mov	r3, r0
 800d032:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d008      	beq.n	800d04c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d03a:	6839      	ldr	r1, [r7, #0]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f962 	bl	800d306 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2202      	movs	r2, #2
 800d046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d04a:	e065      	b.n	800d118 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fa08 	bl	800d462 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2203      	movs	r2, #3
 800d056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d05a:	e05d      	b.n	800d118 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 fa00 	bl	800d462 <USBD_CtlSendStatus>
      break;
 800d062:	e059      	b.n	800d118 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d064:	4b2f      	ldr	r3, [pc, #188]	@ (800d124 <USBD_SetConfig+0x150>)
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d112      	bne.n	800d092 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2202      	movs	r2, #2
 800d070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d074:	4b2b      	ldr	r3, [pc, #172]	@ (800d124 <USBD_SetConfig+0x150>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	461a      	mov	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d07e:	4b29      	ldr	r3, [pc, #164]	@ (800d124 <USBD_SetConfig+0x150>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	4619      	mov	r1, r3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff f82c 	bl	800c0e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f9e9 	bl	800d462 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d090:	e042      	b.n	800d118 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d092:	4b24      	ldr	r3, [pc, #144]	@ (800d124 <USBD_SetConfig+0x150>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	461a      	mov	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d02a      	beq.n	800d0f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7ff f81a 	bl	800c0e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d0ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d124 <USBD_SetConfig+0x150>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d124 <USBD_SetConfig+0x150>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7fe fff3 	bl	800c0aa <USBD_SetClassConfig>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00f      	beq.n	800d0ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f918 	bl	800d306 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7fe ffff 	bl	800c0e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d0ec:	e014      	b.n	800d118 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f9b7 	bl	800d462 <USBD_CtlSendStatus>
      break;
 800d0f4:	e010      	b.n	800d118 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f9b3 	bl	800d462 <USBD_CtlSendStatus>
      break;
 800d0fc:	e00c      	b.n	800d118 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f900 	bl	800d306 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d106:	4b07      	ldr	r3, [pc, #28]	@ (800d124 <USBD_SetConfig+0x150>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7fe ffe8 	bl	800c0e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d112:	2303      	movs	r3, #3
 800d114:	73fb      	strb	r3, [r7, #15]
      break;
 800d116:	bf00      	nop
  }

  return ret;
 800d118:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	200008a5 	.word	0x200008a5

0800d128 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	88db      	ldrh	r3, [r3, #6]
 800d136:	2b01      	cmp	r3, #1
 800d138:	d004      	beq.n	800d144 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f8e2 	bl	800d306 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d142:	e023      	b.n	800d18c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	dc02      	bgt.n	800d156 <USBD_GetConfig+0x2e>
 800d150:	2b00      	cmp	r3, #0
 800d152:	dc03      	bgt.n	800d15c <USBD_GetConfig+0x34>
 800d154:	e015      	b.n	800d182 <USBD_GetConfig+0x5a>
 800d156:	2b03      	cmp	r3, #3
 800d158:	d00b      	beq.n	800d172 <USBD_GetConfig+0x4a>
 800d15a:	e012      	b.n	800d182 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	3308      	adds	r3, #8
 800d166:	2201      	movs	r2, #1
 800d168:	4619      	mov	r1, r3
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f93c 	bl	800d3e8 <USBD_CtlSendData>
        break;
 800d170:	e00c      	b.n	800d18c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	3304      	adds	r3, #4
 800d176:	2201      	movs	r2, #1
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f934 	bl	800d3e8 <USBD_CtlSendData>
        break;
 800d180:	e004      	b.n	800d18c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f8be 	bl	800d306 <USBD_CtlError>
        break;
 800d18a:	bf00      	nop
}
 800d18c:	bf00      	nop
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	d81e      	bhi.n	800d1ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	88db      	ldrh	r3, [r3, #6]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	d004      	beq.n	800d1be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f8a5 	bl	800d306 <USBD_CtlError>
        break;
 800d1bc:	e01a      	b.n	800d1f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d005      	beq.n	800d1da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f043 0202 	orr.w	r2, r3, #2
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	330c      	adds	r3, #12
 800d1de:	2202      	movs	r2, #2
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 f900 	bl	800d3e8 <USBD_CtlSendData>
      break;
 800d1e8:	e004      	b.n	800d1f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 f88a 	bl	800d306 <USBD_CtlError>
      break;
 800d1f2:	bf00      	nop
  }
}
 800d1f4:	bf00      	nop
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	885b      	ldrh	r3, [r3, #2]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d107      	bne.n	800d21e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f923 	bl	800d462 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d21c:	e013      	b.n	800d246 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	885b      	ldrh	r3, [r3, #2]
 800d222:	2b02      	cmp	r3, #2
 800d224:	d10b      	bne.n	800d23e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	889b      	ldrh	r3, [r3, #4]
 800d22a:	0a1b      	lsrs	r3, r3, #8
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f913 	bl	800d462 <USBD_CtlSendStatus>
}
 800d23c:	e003      	b.n	800d246 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f860 	bl	800d306 <USBD_CtlError>
}
 800d246:	bf00      	nop
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b082      	sub	sp, #8
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	3b01      	subs	r3, #1
 800d262:	2b02      	cmp	r3, #2
 800d264:	d80b      	bhi.n	800d27e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	885b      	ldrh	r3, [r3, #2]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d10c      	bne.n	800d288 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f8f3 	bl	800d462 <USBD_CtlSendStatus>
      }
      break;
 800d27c:	e004      	b.n	800d288 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 f840 	bl	800d306 <USBD_CtlError>
      break;
 800d286:	e000      	b.n	800d28a <USBD_ClrFeature+0x3c>
      break;
 800d288:	bf00      	nop
  }
}
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b084      	sub	sp, #16
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	781a      	ldrb	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	781a      	ldrb	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f7ff fa40 	bl	800c742 <SWAPBYTE>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f7ff fa33 	bl	800c742 <SWAPBYTE>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	461a      	mov	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7ff fa26 	bl	800c742 <SWAPBYTE>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	80da      	strh	r2, [r3, #6]
}
 800d2fe:	bf00      	nop
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b082      	sub	sp, #8
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d310:	2180      	movs	r1, #128	@ 0x80
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 fbea 	bl	800daec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d318:	2100      	movs	r1, #0
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fbe6 	bl	800daec <USBD_LL_StallEP>
}
 800d320:	bf00      	nop
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d334:	2300      	movs	r3, #0
 800d336:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d036      	beq.n	800d3ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d342:	6938      	ldr	r0, [r7, #16]
 800d344:	f000 f836 	bl	800d3b4 <USBD_GetLen>
 800d348:	4603      	mov	r3, r0
 800d34a:	3301      	adds	r3, #1
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	b29a      	uxth	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d356:	7dfb      	ldrb	r3, [r7, #23]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	4413      	add	r3, r2
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	7812      	ldrb	r2, [r2, #0]
 800d360:	701a      	strb	r2, [r3, #0]
  idx++;
 800d362:	7dfb      	ldrb	r3, [r7, #23]
 800d364:	3301      	adds	r3, #1
 800d366:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d368:	7dfb      	ldrb	r3, [r7, #23]
 800d36a:	68ba      	ldr	r2, [r7, #8]
 800d36c:	4413      	add	r3, r2
 800d36e:	2203      	movs	r2, #3
 800d370:	701a      	strb	r2, [r3, #0]
  idx++;
 800d372:	7dfb      	ldrb	r3, [r7, #23]
 800d374:	3301      	adds	r3, #1
 800d376:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d378:	e013      	b.n	800d3a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d37a:	7dfb      	ldrb	r3, [r7, #23]
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	4413      	add	r3, r2
 800d380:	693a      	ldr	r2, [r7, #16]
 800d382:	7812      	ldrb	r2, [r2, #0]
 800d384:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	3301      	adds	r3, #1
 800d38a:	613b      	str	r3, [r7, #16]
    idx++;
 800d38c:	7dfb      	ldrb	r3, [r7, #23]
 800d38e:	3301      	adds	r3, #1
 800d390:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d392:	7dfb      	ldrb	r3, [r7, #23]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	4413      	add	r3, r2
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d39c:	7dfb      	ldrb	r3, [r7, #23]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1e7      	bne.n	800d37a <USBD_GetString+0x52>
 800d3aa:	e000      	b.n	800d3ae <USBD_GetString+0x86>
    return;
 800d3ac:	bf00      	nop
  }
}
 800d3ae:	3718      	adds	r7, #24
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d3c4:	e005      	b.n	800d3d2 <USBD_GetLen+0x1e>
  {
    len++;
 800d3c6:	7bfb      	ldrb	r3, [r7, #15]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1f5      	bne.n	800d3c6 <USBD_GetLen+0x12>
  }

  return len;
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	2100      	movs	r1, #0
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f000 fbf5 	bl	800dbfe <USBD_LL_Transmit>

  return USBD_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b084      	sub	sp, #16
 800d422:	af00      	add	r7, sp, #0
 800d424:	60f8      	str	r0, [r7, #12]
 800d426:	60b9      	str	r1, [r7, #8]
 800d428:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	2100      	movs	r1, #0
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f000 fbe4 	bl	800dbfe <USBD_LL_Transmit>

  return USBD_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	2100      	movs	r1, #0
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f000 fbf4 	bl	800dc40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b082      	sub	sp, #8
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2204      	movs	r2, #4
 800d46e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d472:	2300      	movs	r3, #0
 800d474:	2200      	movs	r2, #0
 800d476:	2100      	movs	r1, #0
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fbc0 	bl	800dbfe <USBD_LL_Transmit>

  return USBD_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2205      	movs	r2, #5
 800d494:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d498:	2300      	movs	r3, #0
 800d49a:	2200      	movs	r2, #0
 800d49c:	2100      	movs	r1, #0
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fbce 	bl	800dc40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
	...

0800d4b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	490e      	ldr	r1, [pc, #56]	@ (800d4f0 <MX_USB_DEVICE_Init+0x40>)
 800d4b8:	480e      	ldr	r0, [pc, #56]	@ (800d4f4 <MX_USB_DEVICE_Init+0x44>)
 800d4ba:	f7fe fd79 	bl	800bfb0 <USBD_Init>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d4c4:	f7f5 fb76 	bl	8002bb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800d4c8:	490b      	ldr	r1, [pc, #44]	@ (800d4f8 <MX_USB_DEVICE_Init+0x48>)
 800d4ca:	480a      	ldr	r0, [pc, #40]	@ (800d4f4 <MX_USB_DEVICE_Init+0x44>)
 800d4cc:	f7fe fda0 	bl	800c010 <USBD_RegisterClass>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d4d6:	f7f5 fb6d 	bl	8002bb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d4da:	4806      	ldr	r0, [pc, #24]	@ (800d4f4 <MX_USB_DEVICE_Init+0x44>)
 800d4dc:	f7fe fdce 	bl	800c07c <USBD_Start>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800d4e6:	f7f5 fb65 	bl	8002bb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d4ea:	bf00      	nop
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	2000014c 	.word	0x2000014c
 800d4f4:	200008a8 	.word	0x200008a8
 800d4f8:	20000018 	.word	0x20000018

0800d4fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	4603      	mov	r3, r0
 800d504:	6039      	str	r1, [r7, #0]
 800d506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2212      	movs	r2, #18
 800d50c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d50e:	4b03      	ldr	r3, [pc, #12]	@ (800d51c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	20000168 	.word	0x20000168

0800d520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	6039      	str	r1, [r7, #0]
 800d52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2204      	movs	r2, #4
 800d530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d532:	4b03      	ldr	r3, [pc, #12]	@ (800d540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d534:	4618      	mov	r0, r3
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	2000017c 	.word	0x2000017c

0800d544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	6039      	str	r1, [r7, #0]
 800d54e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d550:	79fb      	ldrb	r3, [r7, #7]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d105      	bne.n	800d562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	4907      	ldr	r1, [pc, #28]	@ (800d578 <USBD_FS_ProductStrDescriptor+0x34>)
 800d55a:	4808      	ldr	r0, [pc, #32]	@ (800d57c <USBD_FS_ProductStrDescriptor+0x38>)
 800d55c:	f7ff fee4 	bl	800d328 <USBD_GetString>
 800d560:	e004      	b.n	800d56c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d562:	683a      	ldr	r2, [r7, #0]
 800d564:	4904      	ldr	r1, [pc, #16]	@ (800d578 <USBD_FS_ProductStrDescriptor+0x34>)
 800d566:	4805      	ldr	r0, [pc, #20]	@ (800d57c <USBD_FS_ProductStrDescriptor+0x38>)
 800d568:	f7ff fede 	bl	800d328 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d56c:	4b02      	ldr	r3, [pc, #8]	@ (800d578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	20000b84 	.word	0x20000b84
 800d57c:	0800e6e8 	.word	0x0800e6e8

0800d580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	6039      	str	r1, [r7, #0]
 800d58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d58c:	683a      	ldr	r2, [r7, #0]
 800d58e:	4904      	ldr	r1, [pc, #16]	@ (800d5a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d590:	4804      	ldr	r0, [pc, #16]	@ (800d5a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d592:	f7ff fec9 	bl	800d328 <USBD_GetString>
  return USBD_StrDesc;
 800d596:	4b02      	ldr	r3, [pc, #8]	@ (800d5a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	20000b84 	.word	0x20000b84
 800d5a4:	0800e6fc 	.word	0x0800e6fc

0800d5a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	6039      	str	r1, [r7, #0]
 800d5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	221a      	movs	r2, #26
 800d5b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d5ba:	f000 f843 	bl	800d644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d5be:	4b02      	ldr	r3, [pc, #8]	@ (800d5c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20000180 	.word	0x20000180

0800d5cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	6039      	str	r1, [r7, #0]
 800d5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5d8:	79fb      	ldrb	r3, [r7, #7]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d105      	bne.n	800d5ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	4907      	ldr	r1, [pc, #28]	@ (800d600 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5e2:	4808      	ldr	r0, [pc, #32]	@ (800d604 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5e4:	f7ff fea0 	bl	800d328 <USBD_GetString>
 800d5e8:	e004      	b.n	800d5f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5ea:	683a      	ldr	r2, [r7, #0]
 800d5ec:	4904      	ldr	r1, [pc, #16]	@ (800d600 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5ee:	4805      	ldr	r0, [pc, #20]	@ (800d604 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5f0:	f7ff fe9a 	bl	800d328 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5f4:	4b02      	ldr	r3, [pc, #8]	@ (800d600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	20000b84 	.word	0x20000b84
 800d604:	0800e708 	.word	0x0800e708

0800d608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	4603      	mov	r3, r0
 800d610:	6039      	str	r1, [r7, #0]
 800d612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d614:	79fb      	ldrb	r3, [r7, #7]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d105      	bne.n	800d626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	4907      	ldr	r1, [pc, #28]	@ (800d63c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d61e:	4808      	ldr	r0, [pc, #32]	@ (800d640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d620:	f7ff fe82 	bl	800d328 <USBD_GetString>
 800d624:	e004      	b.n	800d630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d626:	683a      	ldr	r2, [r7, #0]
 800d628:	4904      	ldr	r1, [pc, #16]	@ (800d63c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d62a:	4805      	ldr	r0, [pc, #20]	@ (800d640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d62c:	f7ff fe7c 	bl	800d328 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d630:	4b02      	ldr	r3, [pc, #8]	@ (800d63c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	20000b84 	.word	0x20000b84
 800d640:	0800e714 	.word	0x0800e714

0800d644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d64a:	4b0f      	ldr	r3, [pc, #60]	@ (800d688 <Get_SerialNum+0x44>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d650:	4b0e      	ldr	r3, [pc, #56]	@ (800d68c <Get_SerialNum+0x48>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d656:	4b0e      	ldr	r3, [pc, #56]	@ (800d690 <Get_SerialNum+0x4c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4413      	add	r3, r2
 800d662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d009      	beq.n	800d67e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d66a:	2208      	movs	r2, #8
 800d66c:	4909      	ldr	r1, [pc, #36]	@ (800d694 <Get_SerialNum+0x50>)
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f000 f814 	bl	800d69c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d674:	2204      	movs	r2, #4
 800d676:	4908      	ldr	r1, [pc, #32]	@ (800d698 <Get_SerialNum+0x54>)
 800d678:	68b8      	ldr	r0, [r7, #8]
 800d67a:	f000 f80f 	bl	800d69c <IntToUnicode>
  }
}
 800d67e:	bf00      	nop
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	1fff7a10 	.word	0x1fff7a10
 800d68c:	1fff7a14 	.word	0x1fff7a14
 800d690:	1fff7a18 	.word	0x1fff7a18
 800d694:	20000182 	.word	0x20000182
 800d698:	20000192 	.word	0x20000192

0800d69c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	75fb      	strb	r3, [r7, #23]
 800d6b2:	e027      	b.n	800d704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	0f1b      	lsrs	r3, r3, #28
 800d6b8:	2b09      	cmp	r3, #9
 800d6ba:	d80b      	bhi.n	800d6d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	0f1b      	lsrs	r3, r3, #28
 800d6c0:	b2da      	uxtb	r2, r3
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	005b      	lsls	r3, r3, #1
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	440b      	add	r3, r1
 800d6cc:	3230      	adds	r2, #48	@ 0x30
 800d6ce:	b2d2      	uxtb	r2, r2
 800d6d0:	701a      	strb	r2, [r3, #0]
 800d6d2:	e00a      	b.n	800d6ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	0f1b      	lsrs	r3, r3, #28
 800d6d8:	b2da      	uxtb	r2, r3
 800d6da:	7dfb      	ldrb	r3, [r7, #23]
 800d6dc:	005b      	lsls	r3, r3, #1
 800d6de:	4619      	mov	r1, r3
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	440b      	add	r3, r1
 800d6e4:	3237      	adds	r2, #55	@ 0x37
 800d6e6:	b2d2      	uxtb	r2, r2
 800d6e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	011b      	lsls	r3, r3, #4
 800d6ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6f0:	7dfb      	ldrb	r3, [r7, #23]
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	3301      	adds	r3, #1
 800d702:	75fb      	strb	r3, [r7, #23]
 800d704:	7dfa      	ldrb	r2, [r7, #23]
 800d706:	79fb      	ldrb	r3, [r7, #7]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d3d3      	bcc.n	800d6b4 <IntToUnicode+0x18>
  }
}
 800d70c:	bf00      	nop
 800d70e:	bf00      	nop
 800d710:	371c      	adds	r7, #28
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
	...

0800d71c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08a      	sub	sp, #40	@ 0x28
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d724:	f107 0314 	add.w	r3, r7, #20
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	605a      	str	r2, [r3, #4]
 800d72e:	609a      	str	r2, [r3, #8]
 800d730:	60da      	str	r2, [r3, #12]
 800d732:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d73c:	d13a      	bne.n	800d7b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d73e:	2300      	movs	r3, #0
 800d740:	613b      	str	r3, [r7, #16]
 800d742:	4b1e      	ldr	r3, [pc, #120]	@ (800d7bc <HAL_PCD_MspInit+0xa0>)
 800d744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d746:	4a1d      	ldr	r2, [pc, #116]	@ (800d7bc <HAL_PCD_MspInit+0xa0>)
 800d748:	f043 0301 	orr.w	r3, r3, #1
 800d74c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d74e:	4b1b      	ldr	r3, [pc, #108]	@ (800d7bc <HAL_PCD_MspInit+0xa0>)
 800d750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	613b      	str	r3, [r7, #16]
 800d758:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d75a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d75e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d760:	2302      	movs	r3, #2
 800d762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d764:	2300      	movs	r3, #0
 800d766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d768:	2303      	movs	r3, #3
 800d76a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d76c:	230a      	movs	r3, #10
 800d76e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d770:	f107 0314 	add.w	r3, r7, #20
 800d774:	4619      	mov	r1, r3
 800d776:	4812      	ldr	r0, [pc, #72]	@ (800d7c0 <HAL_PCD_MspInit+0xa4>)
 800d778:	f7f7 fd06 	bl	8005188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d77c:	4b0f      	ldr	r3, [pc, #60]	@ (800d7bc <HAL_PCD_MspInit+0xa0>)
 800d77e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d780:	4a0e      	ldr	r2, [pc, #56]	@ (800d7bc <HAL_PCD_MspInit+0xa0>)
 800d782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d786:	6353      	str	r3, [r2, #52]	@ 0x34
 800d788:	2300      	movs	r3, #0
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	4b0b      	ldr	r3, [pc, #44]	@ (800d7bc <HAL_PCD_MspInit+0xa0>)
 800d78e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d790:	4a0a      	ldr	r2, [pc, #40]	@ (800d7bc <HAL_PCD_MspInit+0xa0>)
 800d792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d796:	6453      	str	r3, [r2, #68]	@ 0x44
 800d798:	4b08      	ldr	r3, [pc, #32]	@ (800d7bc <HAL_PCD_MspInit+0xa0>)
 800d79a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d79c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7a0:	60fb      	str	r3, [r7, #12]
 800d7a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	2043      	movs	r0, #67	@ 0x43
 800d7aa:	f7f6 fe2e 	bl	800440a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7ae:	2043      	movs	r0, #67	@ 0x43
 800d7b0:	f7f6 fe47 	bl	8004442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7b4:	bf00      	nop
 800d7b6:	3728      	adds	r7, #40	@ 0x28
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	40023800 	.word	0x40023800
 800d7c0:	40020000 	.word	0x40020000

0800d7c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d7d8:	4619      	mov	r1, r3
 800d7da:	4610      	mov	r0, r2
 800d7dc:	f7fe fc9b 	bl	800c116 <USBD_LL_SetupStage>
}
 800d7e0:	bf00      	nop
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d7fa:	78fa      	ldrb	r2, [r7, #3]
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	4613      	mov	r3, r2
 800d800:	00db      	lsls	r3, r3, #3
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	440b      	add	r3, r1
 800d808:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	78fb      	ldrb	r3, [r7, #3]
 800d810:	4619      	mov	r1, r3
 800d812:	f7fe fcd5 	bl	800c1c0 <USBD_LL_DataOutStage>
}
 800d816:	bf00      	nop
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b082      	sub	sp, #8
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d830:	78fa      	ldrb	r2, [r7, #3]
 800d832:	6879      	ldr	r1, [r7, #4]
 800d834:	4613      	mov	r3, r2
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	4413      	add	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	440b      	add	r3, r1
 800d83e:	334c      	adds	r3, #76	@ 0x4c
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	78fb      	ldrb	r3, [r7, #3]
 800d844:	4619      	mov	r1, r3
 800d846:	f7fe fd6e 	bl	800c326 <USBD_LL_DataInStage>
}
 800d84a:	bf00      	nop
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b082      	sub	sp, #8
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe fea2 	bl	800c5aa <USBD_LL_SOF>
}
 800d866:	bf00      	nop
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d876:	2301      	movs	r3, #1
 800d878:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d001      	beq.n	800d886 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d882:	f7f5 f997 	bl	8002bb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d88c:	7bfa      	ldrb	r2, [r7, #15]
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fe4c 	bl	800c52e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fe fdf4 	bl	800c48a <USBD_LL_Reset>
}
 800d8a2:	bf00      	nop
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
	...

0800d8ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fe fe47 	bl	800c54e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	6812      	ldr	r2, [r2, #0]
 800d8ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8d2:	f043 0301 	orr.w	r3, r3, #1
 800d8d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a1b      	ldr	r3, [r3, #32]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d005      	beq.n	800d8ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8e0:	4b04      	ldr	r3, [pc, #16]	@ (800d8f4 <HAL_PCD_SuspendCallback+0x48>)
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	4a03      	ldr	r2, [pc, #12]	@ (800d8f4 <HAL_PCD_SuspendCallback+0x48>)
 800d8e6:	f043 0306 	orr.w	r3, r3, #6
 800d8ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8ec:	bf00      	nop
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	e000ed00 	.word	0xe000ed00

0800d8f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fe37 	bl	800c57a <USBD_LL_Resume>
}
 800d90c:	bf00      	nop
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d926:	78fa      	ldrb	r2, [r7, #3]
 800d928:	4611      	mov	r1, r2
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fe8f 	bl	800c64e <USBD_LL_IsoOUTIncomplete>
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d94a:	78fa      	ldrb	r2, [r7, #3]
 800d94c:	4611      	mov	r1, r2
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fe fe4b 	bl	800c5ea <USBD_LL_IsoINIncomplete>
}
 800d954:	bf00      	nop
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7fe fea1 	bl	800c6b2 <USBD_LL_DevConnected>
}
 800d970:	bf00      	nop
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d986:	4618      	mov	r0, r3
 800d988:	f7fe fe9e 	bl	800c6c8 <USBD_LL_DevDisconnected>
}
 800d98c:	bf00      	nop
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d13c      	bne.n	800da1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d9a4:	4a20      	ldr	r2, [pc, #128]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4a1e      	ldr	r2, [pc, #120]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d9ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9be:	2204      	movs	r2, #4
 800d9c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d9c2:	4b19      	ldr	r3, [pc, #100]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9c4:	2202      	movs	r2, #2
 800d9c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9c8:	4b17      	ldr	r3, [pc, #92]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9ce:	4b16      	ldr	r3, [pc, #88]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d9d4:	4b14      	ldr	r3, [pc, #80]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d9da:	4b13      	ldr	r3, [pc, #76]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d9e0:	4b11      	ldr	r3, [pc, #68]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d9e6:	4b10      	ldr	r3, [pc, #64]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d9ec:	4b0e      	ldr	r3, [pc, #56]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d9f2:	480d      	ldr	r0, [pc, #52]	@ (800da28 <USBD_LL_Init+0x94>)
 800d9f4:	f7f9 fe9c 	bl	8007730 <HAL_PCD_Init>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d9fe:	f7f5 f8d9 	bl	8002bb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da02:	2180      	movs	r1, #128	@ 0x80
 800da04:	4808      	ldr	r0, [pc, #32]	@ (800da28 <USBD_LL_Init+0x94>)
 800da06:	f7fb f8dc 	bl	8008bc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da0a:	2240      	movs	r2, #64	@ 0x40
 800da0c:	2100      	movs	r1, #0
 800da0e:	4806      	ldr	r0, [pc, #24]	@ (800da28 <USBD_LL_Init+0x94>)
 800da10:	f7fb f890 	bl	8008b34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da14:	2280      	movs	r2, #128	@ 0x80
 800da16:	2101      	movs	r1, #1
 800da18:	4803      	ldr	r0, [pc, #12]	@ (800da28 <USBD_LL_Init+0x94>)
 800da1a:	f7fb f88b 	bl	8008b34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	20000d84 	.word	0x20000d84

0800da2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da34:	2300      	movs	r3, #0
 800da36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da38:	2300      	movs	r3, #0
 800da3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da42:	4618      	mov	r0, r3
 800da44:	f7f9 ff91 	bl	800796a <HAL_PCD_Start>
 800da48:	4603      	mov	r3, r0
 800da4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
 800da4e:	4618      	mov	r0, r3
 800da50:	f000 f930 	bl	800dcb4 <USBD_Get_USB_Status>
 800da54:	4603      	mov	r3, r0
 800da56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da58:	7bbb      	ldrb	r3, [r7, #14]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b084      	sub	sp, #16
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
 800da6a:	4608      	mov	r0, r1
 800da6c:	4611      	mov	r1, r2
 800da6e:	461a      	mov	r2, r3
 800da70:	4603      	mov	r3, r0
 800da72:	70fb      	strb	r3, [r7, #3]
 800da74:	460b      	mov	r3, r1
 800da76:	70bb      	strb	r3, [r7, #2]
 800da78:	4613      	mov	r3, r2
 800da7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da8a:	78bb      	ldrb	r3, [r7, #2]
 800da8c:	883a      	ldrh	r2, [r7, #0]
 800da8e:	78f9      	ldrb	r1, [r7, #3]
 800da90:	f7fa fc62 	bl	8008358 <HAL_PCD_EP_Open>
 800da94:	4603      	mov	r3, r0
 800da96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 f90a 	bl	800dcb4 <USBD_Get_USB_Status>
 800daa0:	4603      	mov	r3, r0
 800daa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b084      	sub	sp, #16
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dac8:	78fa      	ldrb	r2, [r7, #3]
 800daca:	4611      	mov	r1, r2
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fa fcab 	bl	8008428 <HAL_PCD_EP_Close>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 f8eb 	bl	800dcb4 <USBD_Get_USB_Status>
 800dade:	4603      	mov	r3, r0
 800dae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dae2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db06:	78fa      	ldrb	r2, [r7, #3]
 800db08:	4611      	mov	r1, r2
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fa fd6b 	bl	80085e6 <HAL_PCD_EP_SetStall>
 800db10:	4603      	mov	r3, r0
 800db12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db14:	7bfb      	ldrb	r3, [r7, #15]
 800db16:	4618      	mov	r0, r3
 800db18:	f000 f8cc 	bl	800dcb4 <USBD_Get_USB_Status>
 800db1c:	4603      	mov	r3, r0
 800db1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db20:	7bbb      	ldrb	r3, [r7, #14]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	460b      	mov	r3, r1
 800db34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db36:	2300      	movs	r3, #0
 800db38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db44:	78fa      	ldrb	r2, [r7, #3]
 800db46:	4611      	mov	r1, r2
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fa fdb0 	bl	80086ae <HAL_PCD_EP_ClrStall>
 800db4e:	4603      	mov	r3, r0
 800db50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db52:	7bfb      	ldrb	r3, [r7, #15]
 800db54:	4618      	mov	r0, r3
 800db56:	f000 f8ad 	bl	800dcb4 <USBD_Get_USB_Status>
 800db5a:	4603      	mov	r3, r0
 800db5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	460b      	mov	r3, r1
 800db72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db80:	2b00      	cmp	r3, #0
 800db82:	da0b      	bge.n	800db9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db8a:	68f9      	ldr	r1, [r7, #12]
 800db8c:	4613      	mov	r3, r2
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	4413      	add	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	440b      	add	r3, r1
 800db96:	333e      	adds	r3, #62	@ 0x3e
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	e00b      	b.n	800dbb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db9c:	78fb      	ldrb	r3, [r7, #3]
 800db9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dba2:	68f9      	ldr	r1, [r7, #12]
 800dba4:	4613      	mov	r3, r2
 800dba6:	00db      	lsls	r3, r3, #3
 800dba8:	4413      	add	r3, r2
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	440b      	add	r3, r1
 800dbae:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800dbb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	460b      	mov	r3, r1
 800dbca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dbda:	78fa      	ldrb	r2, [r7, #3]
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fa fb95 	bl	800830e <HAL_PCD_SetAddress>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbe8:	7bfb      	ldrb	r3, [r7, #15]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f000 f862 	bl	800dcb4 <USBD_Get_USB_Status>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b086      	sub	sp, #24
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	60f8      	str	r0, [r7, #12]
 800dc06:	607a      	str	r2, [r7, #4]
 800dc08:	603b      	str	r3, [r7, #0]
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc1c:	7af9      	ldrb	r1, [r7, #11]
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	f7fa fc96 	bl	8008552 <HAL_PCD_EP_Transmit>
 800dc26:	4603      	mov	r3, r0
 800dc28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 f841 	bl	800dcb4 <USBD_Get_USB_Status>
 800dc32:	4603      	mov	r3, r0
 800dc34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc36:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3718      	adds	r7, #24
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	607a      	str	r2, [r7, #4]
 800dc4a:	603b      	str	r3, [r7, #0]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc54:	2300      	movs	r3, #0
 800dc56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc5e:	7af9      	ldrb	r1, [r7, #11]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	f7fa fc2a 	bl	80084bc <HAL_PCD_EP_Receive>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc6c:	7dfb      	ldrb	r3, [r7, #23]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 f820 	bl	800dcb4 <USBD_Get_USB_Status>
 800dc74:	4603      	mov	r3, r0
 800dc76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc78:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
	...

0800dc84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc8c:	4b03      	ldr	r3, [pc, #12]	@ (800dc9c <USBD_static_malloc+0x18>)
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	20001290 	.word	0x20001290

0800dca0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]

}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	2b03      	cmp	r3, #3
 800dcc6:	d817      	bhi.n	800dcf8 <USBD_Get_USB_Status+0x44>
 800dcc8:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd0 <USBD_Get_USB_Status+0x1c>)
 800dcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcce:	bf00      	nop
 800dcd0:	0800dce1 	.word	0x0800dce1
 800dcd4:	0800dce7 	.word	0x0800dce7
 800dcd8:	0800dced 	.word	0x0800dced
 800dcdc:	0800dcf3 	.word	0x0800dcf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	73fb      	strb	r3, [r7, #15]
    break;
 800dce4:	e00b      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dce6:	2303      	movs	r3, #3
 800dce8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcea:	e008      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcec:	2301      	movs	r3, #1
 800dcee:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf0:	e005      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf6:	e002      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	73fb      	strb	r3, [r7, #15]
    break;
 800dcfc:	bf00      	nop
  }
  return usb_status;
 800dcfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <siprintf>:
 800dd0c:	b40e      	push	{r1, r2, r3}
 800dd0e:	b500      	push	{lr}
 800dd10:	b09c      	sub	sp, #112	@ 0x70
 800dd12:	ab1d      	add	r3, sp, #116	@ 0x74
 800dd14:	9002      	str	r0, [sp, #8]
 800dd16:	9006      	str	r0, [sp, #24]
 800dd18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dd1c:	4809      	ldr	r0, [pc, #36]	@ (800dd44 <siprintf+0x38>)
 800dd1e:	9107      	str	r1, [sp, #28]
 800dd20:	9104      	str	r1, [sp, #16]
 800dd22:	4909      	ldr	r1, [pc, #36]	@ (800dd48 <siprintf+0x3c>)
 800dd24:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd28:	9105      	str	r1, [sp, #20]
 800dd2a:	6800      	ldr	r0, [r0, #0]
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	a902      	add	r1, sp, #8
 800dd30:	f000 f994 	bl	800e05c <_svfiprintf_r>
 800dd34:	9b02      	ldr	r3, [sp, #8]
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
 800dd3a:	b01c      	add	sp, #112	@ 0x70
 800dd3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd40:	b003      	add	sp, #12
 800dd42:	4770      	bx	lr
 800dd44:	2000019c 	.word	0x2000019c
 800dd48:	ffff0208 	.word	0xffff0208

0800dd4c <memset>:
 800dd4c:	4402      	add	r2, r0
 800dd4e:	4603      	mov	r3, r0
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d100      	bne.n	800dd56 <memset+0xa>
 800dd54:	4770      	bx	lr
 800dd56:	f803 1b01 	strb.w	r1, [r3], #1
 800dd5a:	e7f9      	b.n	800dd50 <memset+0x4>

0800dd5c <__errno>:
 800dd5c:	4b01      	ldr	r3, [pc, #4]	@ (800dd64 <__errno+0x8>)
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	2000019c 	.word	0x2000019c

0800dd68 <__libc_init_array>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	4d0d      	ldr	r5, [pc, #52]	@ (800dda0 <__libc_init_array+0x38>)
 800dd6c:	4c0d      	ldr	r4, [pc, #52]	@ (800dda4 <__libc_init_array+0x3c>)
 800dd6e:	1b64      	subs	r4, r4, r5
 800dd70:	10a4      	asrs	r4, r4, #2
 800dd72:	2600      	movs	r6, #0
 800dd74:	42a6      	cmp	r6, r4
 800dd76:	d109      	bne.n	800dd8c <__libc_init_array+0x24>
 800dd78:	4d0b      	ldr	r5, [pc, #44]	@ (800dda8 <__libc_init_array+0x40>)
 800dd7a:	4c0c      	ldr	r4, [pc, #48]	@ (800ddac <__libc_init_array+0x44>)
 800dd7c:	f000 fc66 	bl	800e64c <_init>
 800dd80:	1b64      	subs	r4, r4, r5
 800dd82:	10a4      	asrs	r4, r4, #2
 800dd84:	2600      	movs	r6, #0
 800dd86:	42a6      	cmp	r6, r4
 800dd88:	d105      	bne.n	800dd96 <__libc_init_array+0x2e>
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd90:	4798      	blx	r3
 800dd92:	3601      	adds	r6, #1
 800dd94:	e7ee      	b.n	800dd74 <__libc_init_array+0xc>
 800dd96:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd9a:	4798      	blx	r3
 800dd9c:	3601      	adds	r6, #1
 800dd9e:	e7f2      	b.n	800dd86 <__libc_init_array+0x1e>
 800dda0:	0800f150 	.word	0x0800f150
 800dda4:	0800f150 	.word	0x0800f150
 800dda8:	0800f150 	.word	0x0800f150
 800ddac:	0800f154 	.word	0x0800f154

0800ddb0 <__retarget_lock_acquire_recursive>:
 800ddb0:	4770      	bx	lr

0800ddb2 <__retarget_lock_release_recursive>:
 800ddb2:	4770      	bx	lr

0800ddb4 <_free_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	2900      	cmp	r1, #0
 800ddba:	d041      	beq.n	800de40 <_free_r+0x8c>
 800ddbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddc0:	1f0c      	subs	r4, r1, #4
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	bfb8      	it	lt
 800ddc6:	18e4      	addlt	r4, r4, r3
 800ddc8:	f000 f8e0 	bl	800df8c <__malloc_lock>
 800ddcc:	4a1d      	ldr	r2, [pc, #116]	@ (800de44 <_free_r+0x90>)
 800ddce:	6813      	ldr	r3, [r2, #0]
 800ddd0:	b933      	cbnz	r3, 800dde0 <_free_r+0x2c>
 800ddd2:	6063      	str	r3, [r4, #4]
 800ddd4:	6014      	str	r4, [r2, #0]
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dddc:	f000 b8dc 	b.w	800df98 <__malloc_unlock>
 800dde0:	42a3      	cmp	r3, r4
 800dde2:	d908      	bls.n	800ddf6 <_free_r+0x42>
 800dde4:	6820      	ldr	r0, [r4, #0]
 800dde6:	1821      	adds	r1, r4, r0
 800dde8:	428b      	cmp	r3, r1
 800ddea:	bf01      	itttt	eq
 800ddec:	6819      	ldreq	r1, [r3, #0]
 800ddee:	685b      	ldreq	r3, [r3, #4]
 800ddf0:	1809      	addeq	r1, r1, r0
 800ddf2:	6021      	streq	r1, [r4, #0]
 800ddf4:	e7ed      	b.n	800ddd2 <_free_r+0x1e>
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	b10b      	cbz	r3, 800de00 <_free_r+0x4c>
 800ddfc:	42a3      	cmp	r3, r4
 800ddfe:	d9fa      	bls.n	800ddf6 <_free_r+0x42>
 800de00:	6811      	ldr	r1, [r2, #0]
 800de02:	1850      	adds	r0, r2, r1
 800de04:	42a0      	cmp	r0, r4
 800de06:	d10b      	bne.n	800de20 <_free_r+0x6c>
 800de08:	6820      	ldr	r0, [r4, #0]
 800de0a:	4401      	add	r1, r0
 800de0c:	1850      	adds	r0, r2, r1
 800de0e:	4283      	cmp	r3, r0
 800de10:	6011      	str	r1, [r2, #0]
 800de12:	d1e0      	bne.n	800ddd6 <_free_r+0x22>
 800de14:	6818      	ldr	r0, [r3, #0]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	6053      	str	r3, [r2, #4]
 800de1a:	4408      	add	r0, r1
 800de1c:	6010      	str	r0, [r2, #0]
 800de1e:	e7da      	b.n	800ddd6 <_free_r+0x22>
 800de20:	d902      	bls.n	800de28 <_free_r+0x74>
 800de22:	230c      	movs	r3, #12
 800de24:	602b      	str	r3, [r5, #0]
 800de26:	e7d6      	b.n	800ddd6 <_free_r+0x22>
 800de28:	6820      	ldr	r0, [r4, #0]
 800de2a:	1821      	adds	r1, r4, r0
 800de2c:	428b      	cmp	r3, r1
 800de2e:	bf04      	itt	eq
 800de30:	6819      	ldreq	r1, [r3, #0]
 800de32:	685b      	ldreq	r3, [r3, #4]
 800de34:	6063      	str	r3, [r4, #4]
 800de36:	bf04      	itt	eq
 800de38:	1809      	addeq	r1, r1, r0
 800de3a:	6021      	streq	r1, [r4, #0]
 800de3c:	6054      	str	r4, [r2, #4]
 800de3e:	e7ca      	b.n	800ddd6 <_free_r+0x22>
 800de40:	bd38      	pop	{r3, r4, r5, pc}
 800de42:	bf00      	nop
 800de44:	200013e8 	.word	0x200013e8

0800de48 <sbrk_aligned>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	4e0f      	ldr	r6, [pc, #60]	@ (800de88 <sbrk_aligned+0x40>)
 800de4c:	460c      	mov	r4, r1
 800de4e:	6831      	ldr	r1, [r6, #0]
 800de50:	4605      	mov	r5, r0
 800de52:	b911      	cbnz	r1, 800de5a <sbrk_aligned+0x12>
 800de54:	f000 fba6 	bl	800e5a4 <_sbrk_r>
 800de58:	6030      	str	r0, [r6, #0]
 800de5a:	4621      	mov	r1, r4
 800de5c:	4628      	mov	r0, r5
 800de5e:	f000 fba1 	bl	800e5a4 <_sbrk_r>
 800de62:	1c43      	adds	r3, r0, #1
 800de64:	d103      	bne.n	800de6e <sbrk_aligned+0x26>
 800de66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800de6a:	4620      	mov	r0, r4
 800de6c:	bd70      	pop	{r4, r5, r6, pc}
 800de6e:	1cc4      	adds	r4, r0, #3
 800de70:	f024 0403 	bic.w	r4, r4, #3
 800de74:	42a0      	cmp	r0, r4
 800de76:	d0f8      	beq.n	800de6a <sbrk_aligned+0x22>
 800de78:	1a21      	subs	r1, r4, r0
 800de7a:	4628      	mov	r0, r5
 800de7c:	f000 fb92 	bl	800e5a4 <_sbrk_r>
 800de80:	3001      	adds	r0, #1
 800de82:	d1f2      	bne.n	800de6a <sbrk_aligned+0x22>
 800de84:	e7ef      	b.n	800de66 <sbrk_aligned+0x1e>
 800de86:	bf00      	nop
 800de88:	200013e4 	.word	0x200013e4

0800de8c <_malloc_r>:
 800de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de90:	1ccd      	adds	r5, r1, #3
 800de92:	f025 0503 	bic.w	r5, r5, #3
 800de96:	3508      	adds	r5, #8
 800de98:	2d0c      	cmp	r5, #12
 800de9a:	bf38      	it	cc
 800de9c:	250c      	movcc	r5, #12
 800de9e:	2d00      	cmp	r5, #0
 800dea0:	4606      	mov	r6, r0
 800dea2:	db01      	blt.n	800dea8 <_malloc_r+0x1c>
 800dea4:	42a9      	cmp	r1, r5
 800dea6:	d904      	bls.n	800deb2 <_malloc_r+0x26>
 800dea8:	230c      	movs	r3, #12
 800deaa:	6033      	str	r3, [r6, #0]
 800deac:	2000      	movs	r0, #0
 800deae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df88 <_malloc_r+0xfc>
 800deb6:	f000 f869 	bl	800df8c <__malloc_lock>
 800deba:	f8d8 3000 	ldr.w	r3, [r8]
 800debe:	461c      	mov	r4, r3
 800dec0:	bb44      	cbnz	r4, 800df14 <_malloc_r+0x88>
 800dec2:	4629      	mov	r1, r5
 800dec4:	4630      	mov	r0, r6
 800dec6:	f7ff ffbf 	bl	800de48 <sbrk_aligned>
 800deca:	1c43      	adds	r3, r0, #1
 800decc:	4604      	mov	r4, r0
 800dece:	d158      	bne.n	800df82 <_malloc_r+0xf6>
 800ded0:	f8d8 4000 	ldr.w	r4, [r8]
 800ded4:	4627      	mov	r7, r4
 800ded6:	2f00      	cmp	r7, #0
 800ded8:	d143      	bne.n	800df62 <_malloc_r+0xd6>
 800deda:	2c00      	cmp	r4, #0
 800dedc:	d04b      	beq.n	800df76 <_malloc_r+0xea>
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	4639      	mov	r1, r7
 800dee2:	4630      	mov	r0, r6
 800dee4:	eb04 0903 	add.w	r9, r4, r3
 800dee8:	f000 fb5c 	bl	800e5a4 <_sbrk_r>
 800deec:	4581      	cmp	r9, r0
 800deee:	d142      	bne.n	800df76 <_malloc_r+0xea>
 800def0:	6821      	ldr	r1, [r4, #0]
 800def2:	1a6d      	subs	r5, r5, r1
 800def4:	4629      	mov	r1, r5
 800def6:	4630      	mov	r0, r6
 800def8:	f7ff ffa6 	bl	800de48 <sbrk_aligned>
 800defc:	3001      	adds	r0, #1
 800defe:	d03a      	beq.n	800df76 <_malloc_r+0xea>
 800df00:	6823      	ldr	r3, [r4, #0]
 800df02:	442b      	add	r3, r5
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	f8d8 3000 	ldr.w	r3, [r8]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	bb62      	cbnz	r2, 800df68 <_malloc_r+0xdc>
 800df0e:	f8c8 7000 	str.w	r7, [r8]
 800df12:	e00f      	b.n	800df34 <_malloc_r+0xa8>
 800df14:	6822      	ldr	r2, [r4, #0]
 800df16:	1b52      	subs	r2, r2, r5
 800df18:	d420      	bmi.n	800df5c <_malloc_r+0xd0>
 800df1a:	2a0b      	cmp	r2, #11
 800df1c:	d917      	bls.n	800df4e <_malloc_r+0xc2>
 800df1e:	1961      	adds	r1, r4, r5
 800df20:	42a3      	cmp	r3, r4
 800df22:	6025      	str	r5, [r4, #0]
 800df24:	bf18      	it	ne
 800df26:	6059      	strne	r1, [r3, #4]
 800df28:	6863      	ldr	r3, [r4, #4]
 800df2a:	bf08      	it	eq
 800df2c:	f8c8 1000 	streq.w	r1, [r8]
 800df30:	5162      	str	r2, [r4, r5]
 800df32:	604b      	str	r3, [r1, #4]
 800df34:	4630      	mov	r0, r6
 800df36:	f000 f82f 	bl	800df98 <__malloc_unlock>
 800df3a:	f104 000b 	add.w	r0, r4, #11
 800df3e:	1d23      	adds	r3, r4, #4
 800df40:	f020 0007 	bic.w	r0, r0, #7
 800df44:	1ac2      	subs	r2, r0, r3
 800df46:	bf1c      	itt	ne
 800df48:	1a1b      	subne	r3, r3, r0
 800df4a:	50a3      	strne	r3, [r4, r2]
 800df4c:	e7af      	b.n	800deae <_malloc_r+0x22>
 800df4e:	6862      	ldr	r2, [r4, #4]
 800df50:	42a3      	cmp	r3, r4
 800df52:	bf0c      	ite	eq
 800df54:	f8c8 2000 	streq.w	r2, [r8]
 800df58:	605a      	strne	r2, [r3, #4]
 800df5a:	e7eb      	b.n	800df34 <_malloc_r+0xa8>
 800df5c:	4623      	mov	r3, r4
 800df5e:	6864      	ldr	r4, [r4, #4]
 800df60:	e7ae      	b.n	800dec0 <_malloc_r+0x34>
 800df62:	463c      	mov	r4, r7
 800df64:	687f      	ldr	r7, [r7, #4]
 800df66:	e7b6      	b.n	800ded6 <_malloc_r+0x4a>
 800df68:	461a      	mov	r2, r3
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	42a3      	cmp	r3, r4
 800df6e:	d1fb      	bne.n	800df68 <_malloc_r+0xdc>
 800df70:	2300      	movs	r3, #0
 800df72:	6053      	str	r3, [r2, #4]
 800df74:	e7de      	b.n	800df34 <_malloc_r+0xa8>
 800df76:	230c      	movs	r3, #12
 800df78:	6033      	str	r3, [r6, #0]
 800df7a:	4630      	mov	r0, r6
 800df7c:	f000 f80c 	bl	800df98 <__malloc_unlock>
 800df80:	e794      	b.n	800deac <_malloc_r+0x20>
 800df82:	6005      	str	r5, [r0, #0]
 800df84:	e7d6      	b.n	800df34 <_malloc_r+0xa8>
 800df86:	bf00      	nop
 800df88:	200013e8 	.word	0x200013e8

0800df8c <__malloc_lock>:
 800df8c:	4801      	ldr	r0, [pc, #4]	@ (800df94 <__malloc_lock+0x8>)
 800df8e:	f7ff bf0f 	b.w	800ddb0 <__retarget_lock_acquire_recursive>
 800df92:	bf00      	nop
 800df94:	200013e0 	.word	0x200013e0

0800df98 <__malloc_unlock>:
 800df98:	4801      	ldr	r0, [pc, #4]	@ (800dfa0 <__malloc_unlock+0x8>)
 800df9a:	f7ff bf0a 	b.w	800ddb2 <__retarget_lock_release_recursive>
 800df9e:	bf00      	nop
 800dfa0:	200013e0 	.word	0x200013e0

0800dfa4 <__ssputs_r>:
 800dfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa8:	688e      	ldr	r6, [r1, #8]
 800dfaa:	461f      	mov	r7, r3
 800dfac:	42be      	cmp	r6, r7
 800dfae:	680b      	ldr	r3, [r1, #0]
 800dfb0:	4682      	mov	sl, r0
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	4690      	mov	r8, r2
 800dfb6:	d82d      	bhi.n	800e014 <__ssputs_r+0x70>
 800dfb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dfbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dfc0:	d026      	beq.n	800e010 <__ssputs_r+0x6c>
 800dfc2:	6965      	ldr	r5, [r4, #20]
 800dfc4:	6909      	ldr	r1, [r1, #16]
 800dfc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfca:	eba3 0901 	sub.w	r9, r3, r1
 800dfce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfd2:	1c7b      	adds	r3, r7, #1
 800dfd4:	444b      	add	r3, r9
 800dfd6:	106d      	asrs	r5, r5, #1
 800dfd8:	429d      	cmp	r5, r3
 800dfda:	bf38      	it	cc
 800dfdc:	461d      	movcc	r5, r3
 800dfde:	0553      	lsls	r3, r2, #21
 800dfe0:	d527      	bpl.n	800e032 <__ssputs_r+0x8e>
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	f7ff ff52 	bl	800de8c <_malloc_r>
 800dfe8:	4606      	mov	r6, r0
 800dfea:	b360      	cbz	r0, 800e046 <__ssputs_r+0xa2>
 800dfec:	6921      	ldr	r1, [r4, #16]
 800dfee:	464a      	mov	r2, r9
 800dff0:	f000 fae8 	bl	800e5c4 <memcpy>
 800dff4:	89a3      	ldrh	r3, [r4, #12]
 800dff6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dffe:	81a3      	strh	r3, [r4, #12]
 800e000:	6126      	str	r6, [r4, #16]
 800e002:	6165      	str	r5, [r4, #20]
 800e004:	444e      	add	r6, r9
 800e006:	eba5 0509 	sub.w	r5, r5, r9
 800e00a:	6026      	str	r6, [r4, #0]
 800e00c:	60a5      	str	r5, [r4, #8]
 800e00e:	463e      	mov	r6, r7
 800e010:	42be      	cmp	r6, r7
 800e012:	d900      	bls.n	800e016 <__ssputs_r+0x72>
 800e014:	463e      	mov	r6, r7
 800e016:	6820      	ldr	r0, [r4, #0]
 800e018:	4632      	mov	r2, r6
 800e01a:	4641      	mov	r1, r8
 800e01c:	f000 faa8 	bl	800e570 <memmove>
 800e020:	68a3      	ldr	r3, [r4, #8]
 800e022:	1b9b      	subs	r3, r3, r6
 800e024:	60a3      	str	r3, [r4, #8]
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	4433      	add	r3, r6
 800e02a:	6023      	str	r3, [r4, #0]
 800e02c:	2000      	movs	r0, #0
 800e02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e032:	462a      	mov	r2, r5
 800e034:	f000 fad4 	bl	800e5e0 <_realloc_r>
 800e038:	4606      	mov	r6, r0
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d1e0      	bne.n	800e000 <__ssputs_r+0x5c>
 800e03e:	6921      	ldr	r1, [r4, #16]
 800e040:	4650      	mov	r0, sl
 800e042:	f7ff feb7 	bl	800ddb4 <_free_r>
 800e046:	230c      	movs	r3, #12
 800e048:	f8ca 3000 	str.w	r3, [sl]
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e052:	81a3      	strh	r3, [r4, #12]
 800e054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e058:	e7e9      	b.n	800e02e <__ssputs_r+0x8a>
	...

0800e05c <_svfiprintf_r>:
 800e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e060:	4698      	mov	r8, r3
 800e062:	898b      	ldrh	r3, [r1, #12]
 800e064:	061b      	lsls	r3, r3, #24
 800e066:	b09d      	sub	sp, #116	@ 0x74
 800e068:	4607      	mov	r7, r0
 800e06a:	460d      	mov	r5, r1
 800e06c:	4614      	mov	r4, r2
 800e06e:	d510      	bpl.n	800e092 <_svfiprintf_r+0x36>
 800e070:	690b      	ldr	r3, [r1, #16]
 800e072:	b973      	cbnz	r3, 800e092 <_svfiprintf_r+0x36>
 800e074:	2140      	movs	r1, #64	@ 0x40
 800e076:	f7ff ff09 	bl	800de8c <_malloc_r>
 800e07a:	6028      	str	r0, [r5, #0]
 800e07c:	6128      	str	r0, [r5, #16]
 800e07e:	b930      	cbnz	r0, 800e08e <_svfiprintf_r+0x32>
 800e080:	230c      	movs	r3, #12
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e088:	b01d      	add	sp, #116	@ 0x74
 800e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08e:	2340      	movs	r3, #64	@ 0x40
 800e090:	616b      	str	r3, [r5, #20]
 800e092:	2300      	movs	r3, #0
 800e094:	9309      	str	r3, [sp, #36]	@ 0x24
 800e096:	2320      	movs	r3, #32
 800e098:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0a0:	2330      	movs	r3, #48	@ 0x30
 800e0a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e240 <_svfiprintf_r+0x1e4>
 800e0a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0aa:	f04f 0901 	mov.w	r9, #1
 800e0ae:	4623      	mov	r3, r4
 800e0b0:	469a      	mov	sl, r3
 800e0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0b6:	b10a      	cbz	r2, 800e0bc <_svfiprintf_r+0x60>
 800e0b8:	2a25      	cmp	r2, #37	@ 0x25
 800e0ba:	d1f9      	bne.n	800e0b0 <_svfiprintf_r+0x54>
 800e0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e0c0:	d00b      	beq.n	800e0da <_svfiprintf_r+0x7e>
 800e0c2:	465b      	mov	r3, fp
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	4638      	mov	r0, r7
 800e0ca:	f7ff ff6b 	bl	800dfa4 <__ssputs_r>
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	f000 80a7 	beq.w	800e222 <_svfiprintf_r+0x1c6>
 800e0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0d6:	445a      	add	r2, fp
 800e0d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0da:	f89a 3000 	ldrb.w	r3, [sl]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 809f 	beq.w	800e222 <_svfiprintf_r+0x1c6>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0ee:	f10a 0a01 	add.w	sl, sl, #1
 800e0f2:	9304      	str	r3, [sp, #16]
 800e0f4:	9307      	str	r3, [sp, #28]
 800e0f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0fc:	4654      	mov	r4, sl
 800e0fe:	2205      	movs	r2, #5
 800e100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e104:	484e      	ldr	r0, [pc, #312]	@ (800e240 <_svfiprintf_r+0x1e4>)
 800e106:	f7f2 f86b 	bl	80001e0 <memchr>
 800e10a:	9a04      	ldr	r2, [sp, #16]
 800e10c:	b9d8      	cbnz	r0, 800e146 <_svfiprintf_r+0xea>
 800e10e:	06d0      	lsls	r0, r2, #27
 800e110:	bf44      	itt	mi
 800e112:	2320      	movmi	r3, #32
 800e114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e118:	0711      	lsls	r1, r2, #28
 800e11a:	bf44      	itt	mi
 800e11c:	232b      	movmi	r3, #43	@ 0x2b
 800e11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e122:	f89a 3000 	ldrb.w	r3, [sl]
 800e126:	2b2a      	cmp	r3, #42	@ 0x2a
 800e128:	d015      	beq.n	800e156 <_svfiprintf_r+0xfa>
 800e12a:	9a07      	ldr	r2, [sp, #28]
 800e12c:	4654      	mov	r4, sl
 800e12e:	2000      	movs	r0, #0
 800e130:	f04f 0c0a 	mov.w	ip, #10
 800e134:	4621      	mov	r1, r4
 800e136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e13a:	3b30      	subs	r3, #48	@ 0x30
 800e13c:	2b09      	cmp	r3, #9
 800e13e:	d94b      	bls.n	800e1d8 <_svfiprintf_r+0x17c>
 800e140:	b1b0      	cbz	r0, 800e170 <_svfiprintf_r+0x114>
 800e142:	9207      	str	r2, [sp, #28]
 800e144:	e014      	b.n	800e170 <_svfiprintf_r+0x114>
 800e146:	eba0 0308 	sub.w	r3, r0, r8
 800e14a:	fa09 f303 	lsl.w	r3, r9, r3
 800e14e:	4313      	orrs	r3, r2
 800e150:	9304      	str	r3, [sp, #16]
 800e152:	46a2      	mov	sl, r4
 800e154:	e7d2      	b.n	800e0fc <_svfiprintf_r+0xa0>
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	1d19      	adds	r1, r3, #4
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	9103      	str	r1, [sp, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	bfbb      	ittet	lt
 800e162:	425b      	neglt	r3, r3
 800e164:	f042 0202 	orrlt.w	r2, r2, #2
 800e168:	9307      	strge	r3, [sp, #28]
 800e16a:	9307      	strlt	r3, [sp, #28]
 800e16c:	bfb8      	it	lt
 800e16e:	9204      	strlt	r2, [sp, #16]
 800e170:	7823      	ldrb	r3, [r4, #0]
 800e172:	2b2e      	cmp	r3, #46	@ 0x2e
 800e174:	d10a      	bne.n	800e18c <_svfiprintf_r+0x130>
 800e176:	7863      	ldrb	r3, [r4, #1]
 800e178:	2b2a      	cmp	r3, #42	@ 0x2a
 800e17a:	d132      	bne.n	800e1e2 <_svfiprintf_r+0x186>
 800e17c:	9b03      	ldr	r3, [sp, #12]
 800e17e:	1d1a      	adds	r2, r3, #4
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	9203      	str	r2, [sp, #12]
 800e184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e188:	3402      	adds	r4, #2
 800e18a:	9305      	str	r3, [sp, #20]
 800e18c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e250 <_svfiprintf_r+0x1f4>
 800e190:	7821      	ldrb	r1, [r4, #0]
 800e192:	2203      	movs	r2, #3
 800e194:	4650      	mov	r0, sl
 800e196:	f7f2 f823 	bl	80001e0 <memchr>
 800e19a:	b138      	cbz	r0, 800e1ac <_svfiprintf_r+0x150>
 800e19c:	9b04      	ldr	r3, [sp, #16]
 800e19e:	eba0 000a 	sub.w	r0, r0, sl
 800e1a2:	2240      	movs	r2, #64	@ 0x40
 800e1a4:	4082      	lsls	r2, r0
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	3401      	adds	r4, #1
 800e1aa:	9304      	str	r3, [sp, #16]
 800e1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1b0:	4824      	ldr	r0, [pc, #144]	@ (800e244 <_svfiprintf_r+0x1e8>)
 800e1b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1b6:	2206      	movs	r2, #6
 800e1b8:	f7f2 f812 	bl	80001e0 <memchr>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d036      	beq.n	800e22e <_svfiprintf_r+0x1d2>
 800e1c0:	4b21      	ldr	r3, [pc, #132]	@ (800e248 <_svfiprintf_r+0x1ec>)
 800e1c2:	bb1b      	cbnz	r3, 800e20c <_svfiprintf_r+0x1b0>
 800e1c4:	9b03      	ldr	r3, [sp, #12]
 800e1c6:	3307      	adds	r3, #7
 800e1c8:	f023 0307 	bic.w	r3, r3, #7
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	9303      	str	r3, [sp, #12]
 800e1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1d2:	4433      	add	r3, r6
 800e1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1d6:	e76a      	b.n	800e0ae <_svfiprintf_r+0x52>
 800e1d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1dc:	460c      	mov	r4, r1
 800e1de:	2001      	movs	r0, #1
 800e1e0:	e7a8      	b.n	800e134 <_svfiprintf_r+0xd8>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	3401      	adds	r4, #1
 800e1e6:	9305      	str	r3, [sp, #20]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	f04f 0c0a 	mov.w	ip, #10
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1f4:	3a30      	subs	r2, #48	@ 0x30
 800e1f6:	2a09      	cmp	r2, #9
 800e1f8:	d903      	bls.n	800e202 <_svfiprintf_r+0x1a6>
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d0c6      	beq.n	800e18c <_svfiprintf_r+0x130>
 800e1fe:	9105      	str	r1, [sp, #20]
 800e200:	e7c4      	b.n	800e18c <_svfiprintf_r+0x130>
 800e202:	fb0c 2101 	mla	r1, ip, r1, r2
 800e206:	4604      	mov	r4, r0
 800e208:	2301      	movs	r3, #1
 800e20a:	e7f0      	b.n	800e1ee <_svfiprintf_r+0x192>
 800e20c:	ab03      	add	r3, sp, #12
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	462a      	mov	r2, r5
 800e212:	4b0e      	ldr	r3, [pc, #56]	@ (800e24c <_svfiprintf_r+0x1f0>)
 800e214:	a904      	add	r1, sp, #16
 800e216:	4638      	mov	r0, r7
 800e218:	f3af 8000 	nop.w
 800e21c:	1c42      	adds	r2, r0, #1
 800e21e:	4606      	mov	r6, r0
 800e220:	d1d6      	bne.n	800e1d0 <_svfiprintf_r+0x174>
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	065b      	lsls	r3, r3, #25
 800e226:	f53f af2d 	bmi.w	800e084 <_svfiprintf_r+0x28>
 800e22a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e22c:	e72c      	b.n	800e088 <_svfiprintf_r+0x2c>
 800e22e:	ab03      	add	r3, sp, #12
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	462a      	mov	r2, r5
 800e234:	4b05      	ldr	r3, [pc, #20]	@ (800e24c <_svfiprintf_r+0x1f0>)
 800e236:	a904      	add	r1, sp, #16
 800e238:	4638      	mov	r0, r7
 800e23a:	f000 f879 	bl	800e330 <_printf_i>
 800e23e:	e7ed      	b.n	800e21c <_svfiprintf_r+0x1c0>
 800e240:	0800f114 	.word	0x0800f114
 800e244:	0800f11e 	.word	0x0800f11e
 800e248:	00000000 	.word	0x00000000
 800e24c:	0800dfa5 	.word	0x0800dfa5
 800e250:	0800f11a 	.word	0x0800f11a

0800e254 <_printf_common>:
 800e254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e258:	4616      	mov	r6, r2
 800e25a:	4698      	mov	r8, r3
 800e25c:	688a      	ldr	r2, [r1, #8]
 800e25e:	690b      	ldr	r3, [r1, #16]
 800e260:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e264:	4293      	cmp	r3, r2
 800e266:	bfb8      	it	lt
 800e268:	4613      	movlt	r3, r2
 800e26a:	6033      	str	r3, [r6, #0]
 800e26c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e270:	4607      	mov	r7, r0
 800e272:	460c      	mov	r4, r1
 800e274:	b10a      	cbz	r2, 800e27a <_printf_common+0x26>
 800e276:	3301      	adds	r3, #1
 800e278:	6033      	str	r3, [r6, #0]
 800e27a:	6823      	ldr	r3, [r4, #0]
 800e27c:	0699      	lsls	r1, r3, #26
 800e27e:	bf42      	ittt	mi
 800e280:	6833      	ldrmi	r3, [r6, #0]
 800e282:	3302      	addmi	r3, #2
 800e284:	6033      	strmi	r3, [r6, #0]
 800e286:	6825      	ldr	r5, [r4, #0]
 800e288:	f015 0506 	ands.w	r5, r5, #6
 800e28c:	d106      	bne.n	800e29c <_printf_common+0x48>
 800e28e:	f104 0a19 	add.w	sl, r4, #25
 800e292:	68e3      	ldr	r3, [r4, #12]
 800e294:	6832      	ldr	r2, [r6, #0]
 800e296:	1a9b      	subs	r3, r3, r2
 800e298:	42ab      	cmp	r3, r5
 800e29a:	dc26      	bgt.n	800e2ea <_printf_common+0x96>
 800e29c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2a0:	6822      	ldr	r2, [r4, #0]
 800e2a2:	3b00      	subs	r3, #0
 800e2a4:	bf18      	it	ne
 800e2a6:	2301      	movne	r3, #1
 800e2a8:	0692      	lsls	r2, r2, #26
 800e2aa:	d42b      	bmi.n	800e304 <_printf_common+0xb0>
 800e2ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e2b0:	4641      	mov	r1, r8
 800e2b2:	4638      	mov	r0, r7
 800e2b4:	47c8      	blx	r9
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	d01e      	beq.n	800e2f8 <_printf_common+0xa4>
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	6922      	ldr	r2, [r4, #16]
 800e2be:	f003 0306 	and.w	r3, r3, #6
 800e2c2:	2b04      	cmp	r3, #4
 800e2c4:	bf02      	ittt	eq
 800e2c6:	68e5      	ldreq	r5, [r4, #12]
 800e2c8:	6833      	ldreq	r3, [r6, #0]
 800e2ca:	1aed      	subeq	r5, r5, r3
 800e2cc:	68a3      	ldr	r3, [r4, #8]
 800e2ce:	bf0c      	ite	eq
 800e2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2d4:	2500      	movne	r5, #0
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	bfc4      	itt	gt
 800e2da:	1a9b      	subgt	r3, r3, r2
 800e2dc:	18ed      	addgt	r5, r5, r3
 800e2de:	2600      	movs	r6, #0
 800e2e0:	341a      	adds	r4, #26
 800e2e2:	42b5      	cmp	r5, r6
 800e2e4:	d11a      	bne.n	800e31c <_printf_common+0xc8>
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	e008      	b.n	800e2fc <_printf_common+0xa8>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	4652      	mov	r2, sl
 800e2ee:	4641      	mov	r1, r8
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	47c8      	blx	r9
 800e2f4:	3001      	adds	r0, #1
 800e2f6:	d103      	bne.n	800e300 <_printf_common+0xac>
 800e2f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e300:	3501      	adds	r5, #1
 800e302:	e7c6      	b.n	800e292 <_printf_common+0x3e>
 800e304:	18e1      	adds	r1, r4, r3
 800e306:	1c5a      	adds	r2, r3, #1
 800e308:	2030      	movs	r0, #48	@ 0x30
 800e30a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e30e:	4422      	add	r2, r4
 800e310:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e314:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e318:	3302      	adds	r3, #2
 800e31a:	e7c7      	b.n	800e2ac <_printf_common+0x58>
 800e31c:	2301      	movs	r3, #1
 800e31e:	4622      	mov	r2, r4
 800e320:	4641      	mov	r1, r8
 800e322:	4638      	mov	r0, r7
 800e324:	47c8      	blx	r9
 800e326:	3001      	adds	r0, #1
 800e328:	d0e6      	beq.n	800e2f8 <_printf_common+0xa4>
 800e32a:	3601      	adds	r6, #1
 800e32c:	e7d9      	b.n	800e2e2 <_printf_common+0x8e>
	...

0800e330 <_printf_i>:
 800e330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e334:	7e0f      	ldrb	r7, [r1, #24]
 800e336:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e338:	2f78      	cmp	r7, #120	@ 0x78
 800e33a:	4691      	mov	r9, r2
 800e33c:	4680      	mov	r8, r0
 800e33e:	460c      	mov	r4, r1
 800e340:	469a      	mov	sl, r3
 800e342:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e346:	d807      	bhi.n	800e358 <_printf_i+0x28>
 800e348:	2f62      	cmp	r7, #98	@ 0x62
 800e34a:	d80a      	bhi.n	800e362 <_printf_i+0x32>
 800e34c:	2f00      	cmp	r7, #0
 800e34e:	f000 80d2 	beq.w	800e4f6 <_printf_i+0x1c6>
 800e352:	2f58      	cmp	r7, #88	@ 0x58
 800e354:	f000 80b9 	beq.w	800e4ca <_printf_i+0x19a>
 800e358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e35c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e360:	e03a      	b.n	800e3d8 <_printf_i+0xa8>
 800e362:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e366:	2b15      	cmp	r3, #21
 800e368:	d8f6      	bhi.n	800e358 <_printf_i+0x28>
 800e36a:	a101      	add	r1, pc, #4	@ (adr r1, 800e370 <_printf_i+0x40>)
 800e36c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e370:	0800e3c9 	.word	0x0800e3c9
 800e374:	0800e3dd 	.word	0x0800e3dd
 800e378:	0800e359 	.word	0x0800e359
 800e37c:	0800e359 	.word	0x0800e359
 800e380:	0800e359 	.word	0x0800e359
 800e384:	0800e359 	.word	0x0800e359
 800e388:	0800e3dd 	.word	0x0800e3dd
 800e38c:	0800e359 	.word	0x0800e359
 800e390:	0800e359 	.word	0x0800e359
 800e394:	0800e359 	.word	0x0800e359
 800e398:	0800e359 	.word	0x0800e359
 800e39c:	0800e4dd 	.word	0x0800e4dd
 800e3a0:	0800e407 	.word	0x0800e407
 800e3a4:	0800e497 	.word	0x0800e497
 800e3a8:	0800e359 	.word	0x0800e359
 800e3ac:	0800e359 	.word	0x0800e359
 800e3b0:	0800e4ff 	.word	0x0800e4ff
 800e3b4:	0800e359 	.word	0x0800e359
 800e3b8:	0800e407 	.word	0x0800e407
 800e3bc:	0800e359 	.word	0x0800e359
 800e3c0:	0800e359 	.word	0x0800e359
 800e3c4:	0800e49f 	.word	0x0800e49f
 800e3c8:	6833      	ldr	r3, [r6, #0]
 800e3ca:	1d1a      	adds	r2, r3, #4
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	6032      	str	r2, [r6, #0]
 800e3d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e09d      	b.n	800e518 <_printf_i+0x1e8>
 800e3dc:	6833      	ldr	r3, [r6, #0]
 800e3de:	6820      	ldr	r0, [r4, #0]
 800e3e0:	1d19      	adds	r1, r3, #4
 800e3e2:	6031      	str	r1, [r6, #0]
 800e3e4:	0606      	lsls	r6, r0, #24
 800e3e6:	d501      	bpl.n	800e3ec <_printf_i+0xbc>
 800e3e8:	681d      	ldr	r5, [r3, #0]
 800e3ea:	e003      	b.n	800e3f4 <_printf_i+0xc4>
 800e3ec:	0645      	lsls	r5, r0, #25
 800e3ee:	d5fb      	bpl.n	800e3e8 <_printf_i+0xb8>
 800e3f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e3f4:	2d00      	cmp	r5, #0
 800e3f6:	da03      	bge.n	800e400 <_printf_i+0xd0>
 800e3f8:	232d      	movs	r3, #45	@ 0x2d
 800e3fa:	426d      	negs	r5, r5
 800e3fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e400:	4859      	ldr	r0, [pc, #356]	@ (800e568 <_printf_i+0x238>)
 800e402:	230a      	movs	r3, #10
 800e404:	e011      	b.n	800e42a <_printf_i+0xfa>
 800e406:	6821      	ldr	r1, [r4, #0]
 800e408:	6833      	ldr	r3, [r6, #0]
 800e40a:	0608      	lsls	r0, r1, #24
 800e40c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e410:	d402      	bmi.n	800e418 <_printf_i+0xe8>
 800e412:	0649      	lsls	r1, r1, #25
 800e414:	bf48      	it	mi
 800e416:	b2ad      	uxthmi	r5, r5
 800e418:	2f6f      	cmp	r7, #111	@ 0x6f
 800e41a:	4853      	ldr	r0, [pc, #332]	@ (800e568 <_printf_i+0x238>)
 800e41c:	6033      	str	r3, [r6, #0]
 800e41e:	bf14      	ite	ne
 800e420:	230a      	movne	r3, #10
 800e422:	2308      	moveq	r3, #8
 800e424:	2100      	movs	r1, #0
 800e426:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e42a:	6866      	ldr	r6, [r4, #4]
 800e42c:	60a6      	str	r6, [r4, #8]
 800e42e:	2e00      	cmp	r6, #0
 800e430:	bfa2      	ittt	ge
 800e432:	6821      	ldrge	r1, [r4, #0]
 800e434:	f021 0104 	bicge.w	r1, r1, #4
 800e438:	6021      	strge	r1, [r4, #0]
 800e43a:	b90d      	cbnz	r5, 800e440 <_printf_i+0x110>
 800e43c:	2e00      	cmp	r6, #0
 800e43e:	d04b      	beq.n	800e4d8 <_printf_i+0x1a8>
 800e440:	4616      	mov	r6, r2
 800e442:	fbb5 f1f3 	udiv	r1, r5, r3
 800e446:	fb03 5711 	mls	r7, r3, r1, r5
 800e44a:	5dc7      	ldrb	r7, [r0, r7]
 800e44c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e450:	462f      	mov	r7, r5
 800e452:	42bb      	cmp	r3, r7
 800e454:	460d      	mov	r5, r1
 800e456:	d9f4      	bls.n	800e442 <_printf_i+0x112>
 800e458:	2b08      	cmp	r3, #8
 800e45a:	d10b      	bne.n	800e474 <_printf_i+0x144>
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	07df      	lsls	r7, r3, #31
 800e460:	d508      	bpl.n	800e474 <_printf_i+0x144>
 800e462:	6923      	ldr	r3, [r4, #16]
 800e464:	6861      	ldr	r1, [r4, #4]
 800e466:	4299      	cmp	r1, r3
 800e468:	bfde      	ittt	le
 800e46a:	2330      	movle	r3, #48	@ 0x30
 800e46c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e470:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e474:	1b92      	subs	r2, r2, r6
 800e476:	6122      	str	r2, [r4, #16]
 800e478:	f8cd a000 	str.w	sl, [sp]
 800e47c:	464b      	mov	r3, r9
 800e47e:	aa03      	add	r2, sp, #12
 800e480:	4621      	mov	r1, r4
 800e482:	4640      	mov	r0, r8
 800e484:	f7ff fee6 	bl	800e254 <_printf_common>
 800e488:	3001      	adds	r0, #1
 800e48a:	d14a      	bne.n	800e522 <_printf_i+0x1f2>
 800e48c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e490:	b004      	add	sp, #16
 800e492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	f043 0320 	orr.w	r3, r3, #32
 800e49c:	6023      	str	r3, [r4, #0]
 800e49e:	4833      	ldr	r0, [pc, #204]	@ (800e56c <_printf_i+0x23c>)
 800e4a0:	2778      	movs	r7, #120	@ 0x78
 800e4a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	6831      	ldr	r1, [r6, #0]
 800e4aa:	061f      	lsls	r7, r3, #24
 800e4ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800e4b0:	d402      	bmi.n	800e4b8 <_printf_i+0x188>
 800e4b2:	065f      	lsls	r7, r3, #25
 800e4b4:	bf48      	it	mi
 800e4b6:	b2ad      	uxthmi	r5, r5
 800e4b8:	6031      	str	r1, [r6, #0]
 800e4ba:	07d9      	lsls	r1, r3, #31
 800e4bc:	bf44      	itt	mi
 800e4be:	f043 0320 	orrmi.w	r3, r3, #32
 800e4c2:	6023      	strmi	r3, [r4, #0]
 800e4c4:	b11d      	cbz	r5, 800e4ce <_printf_i+0x19e>
 800e4c6:	2310      	movs	r3, #16
 800e4c8:	e7ac      	b.n	800e424 <_printf_i+0xf4>
 800e4ca:	4827      	ldr	r0, [pc, #156]	@ (800e568 <_printf_i+0x238>)
 800e4cc:	e7e9      	b.n	800e4a2 <_printf_i+0x172>
 800e4ce:	6823      	ldr	r3, [r4, #0]
 800e4d0:	f023 0320 	bic.w	r3, r3, #32
 800e4d4:	6023      	str	r3, [r4, #0]
 800e4d6:	e7f6      	b.n	800e4c6 <_printf_i+0x196>
 800e4d8:	4616      	mov	r6, r2
 800e4da:	e7bd      	b.n	800e458 <_printf_i+0x128>
 800e4dc:	6833      	ldr	r3, [r6, #0]
 800e4de:	6825      	ldr	r5, [r4, #0]
 800e4e0:	6961      	ldr	r1, [r4, #20]
 800e4e2:	1d18      	adds	r0, r3, #4
 800e4e4:	6030      	str	r0, [r6, #0]
 800e4e6:	062e      	lsls	r6, r5, #24
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	d501      	bpl.n	800e4f0 <_printf_i+0x1c0>
 800e4ec:	6019      	str	r1, [r3, #0]
 800e4ee:	e002      	b.n	800e4f6 <_printf_i+0x1c6>
 800e4f0:	0668      	lsls	r0, r5, #25
 800e4f2:	d5fb      	bpl.n	800e4ec <_printf_i+0x1bc>
 800e4f4:	8019      	strh	r1, [r3, #0]
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	6123      	str	r3, [r4, #16]
 800e4fa:	4616      	mov	r6, r2
 800e4fc:	e7bc      	b.n	800e478 <_printf_i+0x148>
 800e4fe:	6833      	ldr	r3, [r6, #0]
 800e500:	1d1a      	adds	r2, r3, #4
 800e502:	6032      	str	r2, [r6, #0]
 800e504:	681e      	ldr	r6, [r3, #0]
 800e506:	6862      	ldr	r2, [r4, #4]
 800e508:	2100      	movs	r1, #0
 800e50a:	4630      	mov	r0, r6
 800e50c:	f7f1 fe68 	bl	80001e0 <memchr>
 800e510:	b108      	cbz	r0, 800e516 <_printf_i+0x1e6>
 800e512:	1b80      	subs	r0, r0, r6
 800e514:	6060      	str	r0, [r4, #4]
 800e516:	6863      	ldr	r3, [r4, #4]
 800e518:	6123      	str	r3, [r4, #16]
 800e51a:	2300      	movs	r3, #0
 800e51c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e520:	e7aa      	b.n	800e478 <_printf_i+0x148>
 800e522:	6923      	ldr	r3, [r4, #16]
 800e524:	4632      	mov	r2, r6
 800e526:	4649      	mov	r1, r9
 800e528:	4640      	mov	r0, r8
 800e52a:	47d0      	blx	sl
 800e52c:	3001      	adds	r0, #1
 800e52e:	d0ad      	beq.n	800e48c <_printf_i+0x15c>
 800e530:	6823      	ldr	r3, [r4, #0]
 800e532:	079b      	lsls	r3, r3, #30
 800e534:	d413      	bmi.n	800e55e <_printf_i+0x22e>
 800e536:	68e0      	ldr	r0, [r4, #12]
 800e538:	9b03      	ldr	r3, [sp, #12]
 800e53a:	4298      	cmp	r0, r3
 800e53c:	bfb8      	it	lt
 800e53e:	4618      	movlt	r0, r3
 800e540:	e7a6      	b.n	800e490 <_printf_i+0x160>
 800e542:	2301      	movs	r3, #1
 800e544:	4632      	mov	r2, r6
 800e546:	4649      	mov	r1, r9
 800e548:	4640      	mov	r0, r8
 800e54a:	47d0      	blx	sl
 800e54c:	3001      	adds	r0, #1
 800e54e:	d09d      	beq.n	800e48c <_printf_i+0x15c>
 800e550:	3501      	adds	r5, #1
 800e552:	68e3      	ldr	r3, [r4, #12]
 800e554:	9903      	ldr	r1, [sp, #12]
 800e556:	1a5b      	subs	r3, r3, r1
 800e558:	42ab      	cmp	r3, r5
 800e55a:	dcf2      	bgt.n	800e542 <_printf_i+0x212>
 800e55c:	e7eb      	b.n	800e536 <_printf_i+0x206>
 800e55e:	2500      	movs	r5, #0
 800e560:	f104 0619 	add.w	r6, r4, #25
 800e564:	e7f5      	b.n	800e552 <_printf_i+0x222>
 800e566:	bf00      	nop
 800e568:	0800f125 	.word	0x0800f125
 800e56c:	0800f136 	.word	0x0800f136

0800e570 <memmove>:
 800e570:	4288      	cmp	r0, r1
 800e572:	b510      	push	{r4, lr}
 800e574:	eb01 0402 	add.w	r4, r1, r2
 800e578:	d902      	bls.n	800e580 <memmove+0x10>
 800e57a:	4284      	cmp	r4, r0
 800e57c:	4623      	mov	r3, r4
 800e57e:	d807      	bhi.n	800e590 <memmove+0x20>
 800e580:	1e43      	subs	r3, r0, #1
 800e582:	42a1      	cmp	r1, r4
 800e584:	d008      	beq.n	800e598 <memmove+0x28>
 800e586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e58a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e58e:	e7f8      	b.n	800e582 <memmove+0x12>
 800e590:	4402      	add	r2, r0
 800e592:	4601      	mov	r1, r0
 800e594:	428a      	cmp	r2, r1
 800e596:	d100      	bne.n	800e59a <memmove+0x2a>
 800e598:	bd10      	pop	{r4, pc}
 800e59a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e59e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5a2:	e7f7      	b.n	800e594 <memmove+0x24>

0800e5a4 <_sbrk_r>:
 800e5a4:	b538      	push	{r3, r4, r5, lr}
 800e5a6:	4d06      	ldr	r5, [pc, #24]	@ (800e5c0 <_sbrk_r+0x1c>)
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	4608      	mov	r0, r1
 800e5ae:	602b      	str	r3, [r5, #0]
 800e5b0:	f7f5 f98a 	bl	80038c8 <_sbrk>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d102      	bne.n	800e5be <_sbrk_r+0x1a>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	b103      	cbz	r3, 800e5be <_sbrk_r+0x1a>
 800e5bc:	6023      	str	r3, [r4, #0]
 800e5be:	bd38      	pop	{r3, r4, r5, pc}
 800e5c0:	200013dc 	.word	0x200013dc

0800e5c4 <memcpy>:
 800e5c4:	440a      	add	r2, r1
 800e5c6:	4291      	cmp	r1, r2
 800e5c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e5cc:	d100      	bne.n	800e5d0 <memcpy+0xc>
 800e5ce:	4770      	bx	lr
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5da:	4291      	cmp	r1, r2
 800e5dc:	d1f9      	bne.n	800e5d2 <memcpy+0xe>
 800e5de:	bd10      	pop	{r4, pc}

0800e5e0 <_realloc_r>:
 800e5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e4:	4680      	mov	r8, r0
 800e5e6:	4615      	mov	r5, r2
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	b921      	cbnz	r1, 800e5f6 <_realloc_r+0x16>
 800e5ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	f7ff bc4b 	b.w	800de8c <_malloc_r>
 800e5f6:	b92a      	cbnz	r2, 800e604 <_realloc_r+0x24>
 800e5f8:	f7ff fbdc 	bl	800ddb4 <_free_r>
 800e5fc:	2400      	movs	r4, #0
 800e5fe:	4620      	mov	r0, r4
 800e600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e604:	f000 f81a 	bl	800e63c <_malloc_usable_size_r>
 800e608:	4285      	cmp	r5, r0
 800e60a:	4606      	mov	r6, r0
 800e60c:	d802      	bhi.n	800e614 <_realloc_r+0x34>
 800e60e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e612:	d8f4      	bhi.n	800e5fe <_realloc_r+0x1e>
 800e614:	4629      	mov	r1, r5
 800e616:	4640      	mov	r0, r8
 800e618:	f7ff fc38 	bl	800de8c <_malloc_r>
 800e61c:	4607      	mov	r7, r0
 800e61e:	2800      	cmp	r0, #0
 800e620:	d0ec      	beq.n	800e5fc <_realloc_r+0x1c>
 800e622:	42b5      	cmp	r5, r6
 800e624:	462a      	mov	r2, r5
 800e626:	4621      	mov	r1, r4
 800e628:	bf28      	it	cs
 800e62a:	4632      	movcs	r2, r6
 800e62c:	f7ff ffca 	bl	800e5c4 <memcpy>
 800e630:	4621      	mov	r1, r4
 800e632:	4640      	mov	r0, r8
 800e634:	f7ff fbbe 	bl	800ddb4 <_free_r>
 800e638:	463c      	mov	r4, r7
 800e63a:	e7e0      	b.n	800e5fe <_realloc_r+0x1e>

0800e63c <_malloc_usable_size_r>:
 800e63c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e640:	1f18      	subs	r0, r3, #4
 800e642:	2b00      	cmp	r3, #0
 800e644:	bfbc      	itt	lt
 800e646:	580b      	ldrlt	r3, [r1, r0]
 800e648:	18c0      	addlt	r0, r0, r3
 800e64a:	4770      	bx	lr

0800e64c <_init>:
 800e64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64e:	bf00      	nop
 800e650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e652:	bc08      	pop	{r3}
 800e654:	469e      	mov	lr, r3
 800e656:	4770      	bx	lr

0800e658 <_fini>:
 800e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65a:	bf00      	nop
 800e65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e65e:	bc08      	pop	{r3}
 800e660:	469e      	mov	lr, r3
 800e662:	4770      	bx	lr

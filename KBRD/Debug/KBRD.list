
KBRD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  0800e670  0800e670  0001e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f154  0800f154  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f154  0800f154  0001f154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f15c  0800f15c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f15c  0800f15c  0001f15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f160  0800f160  0001f160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001200  200001ec  0800f350  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ec  0800f350  000213ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a409  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004476  00000000  00000000  0003a668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  0003eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012aa  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba70  00000000  00000000  000415b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f440  00000000  00000000  0005d022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f72f  00000000  00000000  0007c462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bdc  00000000  00000000  0011bb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00122770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e658 	.word	0x0800e658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800e658 	.word	0x0800e658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000b8e:	f008 fc67 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 8000b92:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <ARGB_Init+0xc8>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d101      	bne.n	8000ba4 <ARGB_Init+0x1c>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <ARGB_Init+0x1e>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	fb02 f303 	mul.w	r3, r2, r3
 8000bae:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <ARGB_Init+0xcc>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	091b      	lsrs	r3, r3, #4
 8000bbc:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <ARGB_Init+0xd0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <ARGB_Init+0xd0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <ARGB_Init+0xd0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.5/*0.56*/) - 1;     // Log.1 - 56% - 0.70us
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fdbb 	bl	8000758 <__aeabi_ui2d>
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <ARGB_Init+0xd4>)
 8000be8:	f7ff fb4a 	bl	8000280 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f7ff fe2a 	bl	800084c <__aeabi_d2uiz>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <ARGB_Init+0xd8>)
 8000c02:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.25/*0.28*/) - 1;     // Log.0 - 28% - 0.35us
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fda7 	bl	8000758 <__aeabi_ui2d>
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <ARGB_Init+0xdc>)
 8000c10:	f7ff fb36 	bl	8000280 <__aeabi_dmul>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4610      	mov	r0, r2
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f7ff fe16 	bl	800084c <__aeabi_d2uiz>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3b01      	subs	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <ARGB_Init+0xe0>)
 8000c2a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <ARGB_Init+0xe4>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <ARGB_Init+0xd0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2201      	movs	r2, #1
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f009 fa82 	bl	800a144 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c40:	2001      	movs	r0, #1
 8000c42:	f002 ff27 	bl	8003a94 <HAL_Delay>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	014f8b59 	.word	0x014f8b59
 8000c58:	20000558 	.word	0x20000558
 8000c5c:	3fe00000 	.word	0x3fe00000
 8000c60:	20000208 	.word	0x20000208
 8000c64:	3fd00000 	.word	0x3fd00000
 8000c68:	20000209 	.word	0x20000209
 8000c6c:	200003fa 	.word	0x200003fa

08000c70 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 f891 	bl	8000da0 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <ARGB_SetBrightness+0x1c>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	7013      	strb	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	80fb      	strh	r3, [r7, #6]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	717b      	strb	r3, [r7, #5]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	713b      	strb	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b63      	cmp	r3, #99	; 0x63
 8000cc6:	d912      	bls.n	8000cee <ARGB_SetRGB+0x4a>
        u16_t _i = i / NUM_PIXELS;
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4a32      	ldr	r2, [pc, #200]	; (8000d94 <ARGB_SetRGB+0xf0>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	095b      	lsrs	r3, r3, #5
 8000cd2:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	0252      	lsls	r2, r2, #9
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	441a      	add	r2, r3
 8000ce0:	00d2      	lsls	r2, r2, #3
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4413      	add	r3, r2
 8000cec:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <ARGB_SetRGB+0xf4>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cfe:	797a      	ldrb	r2, [r7, #5]
 8000d00:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d04:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <ARGB_SetRGB+0xf4>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d16:	793a      	ldrb	r2, [r7, #4]
 8000d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d1c:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <ARGB_SetRGB+0xf4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	3301      	adds	r3, #1
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2e:	78fa      	ldrb	r2, [r7, #3]
 8000d30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d34:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d36:	793b      	ldrb	r3, [r7, #4]
 8000d38:	21b0      	movs	r1, #176	; 0xb0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f9cc 	bl	80010d8 <scale8>
 8000d40:	4603      	mov	r3, r0
 8000d42:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	21f0      	movs	r1, #240	; 0xf0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f9c5 	bl	80010d8 <scale8>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d52:	793b      	ldrb	r3, [r7, #4]
 8000d54:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d56:	797b      	ldrb	r3, [r7, #5]
 8000d58:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d5e:	88fa      	ldrh	r2, [r7, #6]
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	490d      	ldr	r1, [pc, #52]	; (8000d9c <ARGB_SetRGB+0xf8>)
 8000d68:	7b7a      	ldrb	r2, [r7, #13]
 8000d6a:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	3301      	adds	r3, #1
 8000d76:	4909      	ldr	r1, [pc, #36]	; (8000d9c <ARGB_SetRGB+0xf8>)
 8000d78:	7b3a      	ldrb	r2, [r7, #12]
 8000d7a:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d7c:	88fa      	ldrh	r2, [r7, #6]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	3302      	adds	r3, #2
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <ARGB_SetRGB+0xf8>)
 8000d88:	7afa      	ldrb	r2, [r7, #11]
 8000d8a:	54ca      	strb	r2, [r1, r3]
#endif
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	51eb851f 	.word	0x51eb851f
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	2000020c 	.word	0x2000020c

08000da0 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	460b      	mov	r3, r1
 8000dac:	71bb      	strb	r3, [r7, #6]
 8000dae:	4613      	mov	r3, r2
 8000db0:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	81fb      	strh	r3, [r7, #14]
 8000db6:	e00b      	b.n	8000dd0 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000db8:	89fb      	ldrh	r3, [r7, #14]
 8000dba:	b298      	uxth	r0, r3
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	79ba      	ldrb	r2, [r7, #6]
 8000dc0:	79f9      	ldrb	r1, [r7, #7]
 8000dc2:	f7ff ff6f 	bl	8000ca4 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	81fb      	strh	r3, [r7, #14]
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	2b63      	cmp	r3, #99	; 0x63
 8000dd6:	d9ef      	bls.n	8000db8 <ARGB_FillRGB+0x18>
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000dea:	4b9d      	ldr	r3, [pc, #628]	; (8001060 <ARGB_Show+0x27c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000df0:	4b9c      	ldr	r3, [pc, #624]	; (8001064 <ARGB_Show+0x280>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d105      	bne.n	8000e06 <ARGB_Show+0x22>
 8000dfa:	4b9b      	ldr	r3, [pc, #620]	; (8001068 <ARGB_Show+0x284>)
 8000dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d001      	beq.n	8000e0a <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e15e      	b.n	80010c8 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e0a6      	b.n	8000f5e <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e10:	4b96      	ldr	r3, [pc, #600]	; (800106c <ARGB_Show+0x288>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	dd04      	ble.n	8000e32 <ARGB_Show+0x4e>
 8000e28:	4b91      	ldr	r3, [pc, #580]	; (8001070 <ARGB_Show+0x28c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	e003      	b.n	8000e3a <ARGB_Show+0x56>
 8000e32:	4b90      	ldr	r3, [pc, #576]	; (8001074 <ARGB_Show+0x290>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4b8d      	ldr	r3, [pc, #564]	; (8001078 <ARGB_Show+0x294>)
 8000e42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e46:	4b89      	ldr	r3, [pc, #548]	; (800106c <ARGB_Show+0x288>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dd04      	ble.n	8000e68 <ARGB_Show+0x84>
 8000e5e:	4b84      	ldr	r3, [pc, #528]	; (8001070 <ARGB_Show+0x28c>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4619      	mov	r1, r3
 8000e66:	e003      	b.n	8000e70 <ARGB_Show+0x8c>
 8000e68:	4b82      	ldr	r3, [pc, #520]	; (8001074 <ARGB_Show+0x290>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3308      	adds	r3, #8
 8000e76:	4a80      	ldr	r2, [pc, #512]	; (8001078 <ARGB_Show+0x294>)
 8000e78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e7c:	4b7b      	ldr	r3, [pc, #492]	; (800106c <ARGB_Show+0x288>)
 8000e7e:	789b      	ldrb	r3, [r3, #2]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dd04      	ble.n	8000e9e <ARGB_Show+0xba>
 8000e94:	4b76      	ldr	r3, [pc, #472]	; (8001070 <ARGB_Show+0x28c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	e003      	b.n	8000ea6 <ARGB_Show+0xc2>
 8000e9e:	4b75      	ldr	r3, [pc, #468]	; (8001074 <ARGB_Show+0x290>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	3310      	adds	r3, #16
 8000eac:	4a72      	ldr	r2, [pc, #456]	; (8001078 <ARGB_Show+0x294>)
 8000eae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000eb2:	4b6e      	ldr	r3, [pc, #440]	; (800106c <ARGB_Show+0x288>)
 8000eb4:	78db      	ldrb	r3, [r3, #3]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	dd04      	ble.n	8000ed4 <ARGB_Show+0xf0>
 8000eca:	4b69      	ldr	r3, [pc, #420]	; (8001070 <ARGB_Show+0x28c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	e003      	b.n	8000edc <ARGB_Show+0xf8>
 8000ed4:	4b67      	ldr	r3, [pc, #412]	; (8001074 <ARGB_Show+0x290>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4619      	mov	r1, r3
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	3318      	adds	r3, #24
 8000ee2:	4a65      	ldr	r2, [pc, #404]	; (8001078 <ARGB_Show+0x294>)
 8000ee4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ee8:	4b60      	ldr	r3, [pc, #384]	; (800106c <ARGB_Show+0x288>)
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dd04      	ble.n	8000f0a <ARGB_Show+0x126>
 8000f00:	4b5b      	ldr	r3, [pc, #364]	; (8001070 <ARGB_Show+0x28c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	e003      	b.n	8000f12 <ARGB_Show+0x12e>
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <ARGB_Show+0x290>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	3320      	adds	r3, #32
 8000f18:	4a57      	ldr	r2, [pc, #348]	; (8001078 <ARGB_Show+0x294>)
 8000f1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f1e:	4b53      	ldr	r3, [pc, #332]	; (800106c <ARGB_Show+0x288>)
 8000f20:	795b      	ldrb	r3, [r3, #5]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	dd04      	ble.n	8000f40 <ARGB_Show+0x15c>
 8000f36:	4b4e      	ldr	r3, [pc, #312]	; (8001070 <ARGB_Show+0x28c>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	e003      	b.n	8000f48 <ARGB_Show+0x164>
 8000f40:	4b4c      	ldr	r3, [pc, #304]	; (8001074 <ARGB_Show+0x290>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4619      	mov	r1, r3
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3328      	adds	r3, #40	; 0x28
 8000f4e:	4a4a      	ldr	r2, [pc, #296]	; (8001078 <ARGB_Show+0x294>)
 8000f50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	f67f af54 	bls.w	8000e10 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f6c:	e0a4      	b.n	80010b8 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f6e:	4b43      	ldr	r3, [pc, #268]	; (800107c <ARGB_Show+0x298>)
 8000f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d102      	bne.n	8000f80 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f7e:	e09b      	b.n	80010b8 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f80:	4b3e      	ldr	r3, [pc, #248]	; (800107c <ARGB_Show+0x298>)
 8000f82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d11d      	bne.n	8000fc8 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <ARGB_Show+0x298>)
 8000f8e:	2202      	movs	r2, #2
 8000f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <ARGB_Show+0x298>)
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	4a39      	ldr	r2, [pc, #228]	; (8001080 <ARGB_Show+0x29c>)
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <ARGB_Show+0x298>)
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	4a38      	ldr	r2, [pc, #224]	; (8001084 <ARGB_Show+0x2a0>)
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000fa4:	4b35      	ldr	r3, [pc, #212]	; (800107c <ARGB_Show+0x298>)
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa8:	4a37      	ldr	r2, [pc, #220]	; (8001088 <ARGB_Show+0x2a4>)
 8000faa:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <ARGB_Show+0x298>)
 8000fae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fb0:	4931      	ldr	r1, [pc, #196]	; (8001078 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <ARGB_Show+0x298>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2330      	movs	r3, #48	; 0x30
 8000fbc:	f003 fb0c 	bl	80045d8 <HAL_DMA_Start_IT>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <ARGB_Show+0x1f0>
 8000fc6:	e002      	b.n	8000fce <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fcc:	e074      	b.n	80010b8 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fd2:	e071      	b.n	80010b8 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <ARGB_Show+0x298>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <ARGB_Show+0x298>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fe2:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <ARGB_Show+0x298>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a28      	ldr	r2, [pc, #160]	; (800108c <ARGB_Show+0x2a8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d107      	bne.n	8000ffe <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <ARGB_Show+0x298>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <ARGB_Show+0x298>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ffc:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <ARGB_Show+0x298>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <ARGB_Show+0x2a8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d018      	beq.n	800103a <ARGB_Show+0x256>
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <ARGB_Show+0x298>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001010:	d013      	beq.n	800103a <ARGB_Show+0x256>
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <ARGB_Show+0x298>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <ARGB_Show+0x2ac>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00e      	beq.n	800103a <ARGB_Show+0x256>
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <ARGB_Show+0x298>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <ARGB_Show+0x2b0>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d009      	beq.n	800103a <ARGB_Show+0x256>
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <ARGB_Show+0x298>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <ARGB_Show+0x2b4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d004      	beq.n	800103a <ARGB_Show+0x256>
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <ARGB_Show+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <ARGB_Show+0x2b8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d132      	bne.n	80010a0 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <ARGB_Show+0x298>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b06      	cmp	r3, #6
 800104a:	d032      	beq.n	80010b2 <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <ARGB_Show+0x298>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <ARGB_Show+0x298>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800105c:	e029      	b.n	80010b2 <ARGB_Show+0x2ce>
 800105e:	bf00      	nop
 8001060:	200003fa 	.word	0x200003fa
 8001064:	200003f8 	.word	0x200003f8
 8001068:	200005e8 	.word	0x200005e8
 800106c:	2000020c 	.word	0x2000020c
 8001070:	20000208 	.word	0x20000208
 8001074:	20000209 	.word	0x20000209
 8001078:	20000338 	.word	0x20000338
 800107c:	20000558 	.word	0x20000558
 8001080:	08001101 	.word	0x08001101
 8001084:	080013b1 	.word	0x080013b1
 8001088:	08009b67 	.word	0x08009b67
 800108c:	40010000 	.word	0x40010000
 8001090:	40000400 	.word	0x40000400
 8001094:	40000800 	.word	0x40000800
 8001098:	40000c00 	.word	0x40000c00
 800109c:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <ARGB_Show+0x2ec>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <ARGB_Show+0x2ec>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e000      	b.n	80010b4 <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80010b2:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f47f af57 	bne.w	8000f6e <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <ARGB_Show+0x2f0>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80010c6:	2302      	movs	r3, #2
    }
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000558 	.word	0x20000558
 80010d4:	200003f8 	.word	0x200003f8

080010d8 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	121b      	asrs	r3, r3, #8
 80010f2:	b2db      	uxtb	r3, r3
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a9d      	ldr	r2, [pc, #628]	; (8001388 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001112:	4293      	cmp	r3, r2
 8001114:	f040 8131 	bne.w	800137a <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4a9c      	ldr	r2, [pc, #624]	; (800138c <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	f040 812c 	bne.w	800137a <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001122:	4b9b      	ldr	r3, [pc, #620]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 8128 	beq.w	800137e <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	d10b      	bne.n	8001150 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2201      	movs	r2, #1
 800113c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d136      	bne.n	80011b4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800114e:	e031      	b.n	80011b4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d10b      	bne.n	8001172 <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2202      	movs	r2, #2
 800115e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d125      	bne.n	80011b4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001170:	e020      	b.n	80011b4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	d10b      	bne.n	8001194 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2204      	movs	r2, #4
 8001180:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d114      	bne.n	80011b4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001192:	e00f      	b.n	80011b4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d10a      	bne.n	80011b4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2208      	movs	r2, #8
 80011a2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80011b4:	4b76      	ldr	r3, [pc, #472]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	2b63      	cmp	r3, #99	; 0x63
 80011bc:	d87b      	bhi.n	80012b6 <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	72fb      	strb	r3, [r7, #11]
 80011c2:	e06c      	b.n	800129e <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011c4:	4b72      	ldr	r3, [pc, #456]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	4a70      	ldr	r2, [pc, #448]	; (8001394 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dd04      	ble.n	80011f4 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 80011ea:	4b6b      	ldr	r3, [pc, #428]	; (8001398 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	e003      	b.n	80011fc <ARGB_TIM_DMADelayPulseCplt+0xfc>
 80011f4:	4b69      	ldr	r3, [pc, #420]	; (800139c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3318      	adds	r3, #24
 8001202:	4a67      	ldr	r2, [pc, #412]	; (80013a0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001208:	4b61      	ldr	r3, [pc, #388]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	3301      	adds	r3, #1
 8001218:	4a5e      	ldr	r2, [pc, #376]	; (8001394 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd04      	ble.n	800123a <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001230:	4b59      	ldr	r3, [pc, #356]	; (8001398 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	e003      	b.n	8001242 <ARGB_TIM_DMADelayPulseCplt+0x142>
 800123a:	4b58      	ldr	r3, [pc, #352]	; (800139c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3320      	adds	r3, #32
 8001248:	4a55      	ldr	r2, [pc, #340]	; (80013a0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 800124a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800124e:	4b50      	ldr	r3, [pc, #320]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	3302      	adds	r3, #2
 800125e:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	2b00      	cmp	r3, #0
 8001274:	dd04      	ble.n	8001280 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001276:	4b48      	ldr	r3, [pc, #288]	; (8001398 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4619      	mov	r1, r3
 800127e:	e003      	b.n	8001288 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3328      	adds	r3, #40	; 0x28
 800128e:	4a44      	ldr	r2, [pc, #272]	; (80013a0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	3301      	adds	r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	72fb      	strb	r3, [r7, #11]
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d98e      	bls.n	80011c4 <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b37      	ldr	r3, [pc, #220]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012b2:	801a      	strh	r2, [r3, #0]
 80012b4:	e05d      	b.n	8001372 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	2b65      	cmp	r3, #101	; 0x65
 80012be:	d80c      	bhi.n	80012da <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 80012c0:	2260      	movs	r2, #96	; 0x60
 80012c2:	2100      	movs	r1, #0
 80012c4:	4837      	ldr	r0, [pc, #220]	; (80013a4 <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 80012c6:	f00c fd43 	bl	800dd50 <memset>
        BUF_COUNTER++;
 80012ca:	4b31      	ldr	r3, [pc, #196]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012d6:	801a      	strh	r2, [r3, #0]
 80012d8:	e04b      	b.n	8001372 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80012dc:	2200      	movs	r2, #0
 80012de:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ee:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 f9c7 	bl	8004688 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d117      	bne.n	8001334 <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	f241 1311 	movw	r3, #4369	; 0x1111
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10f      	bne.n	8001334 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	f240 4344 	movw	r3, #1092	; 0x444
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d107      	bne.n	8001334 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	f241 1311 	movw	r3, #4369	; 0x1111
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10f      	bne.n	8001364 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	f240 4344 	movw	r3, #1092	; 0x444
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d107      	bne.n	8001364 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	771a      	strb	r2, [r3, #28]
 8001378:	e002      	b.n	8001380 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800137a:	bf00      	nop
 800137c:	e000      	b.n	8001380 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 800137e:	bf00      	nop
}
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200005e8 	.word	0x200005e8
 800138c:	20000558 	.word	0x20000558
 8001390:	200003f8 	.word	0x200003f8
 8001394:	2000020c 	.word	0x2000020c
 8001398:	20000208 	.word	0x20000208
 800139c:	20000209 	.word	0x20000209
 80013a0:	20000338 	.word	0x20000338
 80013a4:	20000398 	.word	0x20000398
 80013a8:	40010000 	.word	0x40010000
 80013ac:	200003fa 	.word	0x200003fa

080013b0 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a53      	ldr	r2, [pc, #332]	; (8001510 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	f040 809e 	bne.w	8001504 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4a52      	ldr	r2, [pc, #328]	; (8001514 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f040 8099 	bne.w	8001504 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8095 	beq.w	8001508 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80013de:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	2b63      	cmp	r3, #99	; 0x63
 80013e6:	d87b      	bhi.n	80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	72fb      	strb	r3, [r7, #11]
 80013ec:	e06c      	b.n	80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013ee:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	4a47      	ldr	r2, [pc, #284]	; (800151c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	7afb      	ldrb	r3, [r7, #11]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001410:	2b00      	cmp	r3, #0
 8001412:	dd04      	ble.n	800141e <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001414:	4b42      	ldr	r3, [pc, #264]	; (8001520 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	e003      	b.n	8001426 <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800142e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001432:	4b39      	ldr	r3, [pc, #228]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	3301      	adds	r3, #1
 8001442:	4a36      	ldr	r2, [pc, #216]	; (800151c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	2b00      	cmp	r3, #0
 8001458:	dd04      	ble.n	8001464 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4619      	mov	r1, r3
 8001462:	e003      	b.n	800146c <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	7afb      	ldrb	r3, [r7, #11]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3308      	adds	r3, #8
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	3302      	adds	r3, #2
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	2b00      	cmp	r3, #0
 800149e:	dd04      	ble.n	80014aa <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	e003      	b.n	80014b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	3310      	adds	r3, #16
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80014ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	72fb      	strb	r3, [r7, #11]
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	d98e      	bls.n	80013ee <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014dc:	801a      	strh	r2, [r3, #0]
 80014de:	e014      	b.n	800150a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	2b65      	cmp	r3, #101	; 0x65
 80014e8:	d80f      	bhi.n	800150a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80014ea:	2260      	movs	r2, #96	; 0x60
 80014ec:	2100      	movs	r1, #0
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80014f0:	f00c fc2e 	bl	800dd50 <memset>
        BUF_COUNTER++;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001500:	801a      	strh	r2, [r3, #0]
 8001502:	e002      	b.n	800150a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001504:	bf00      	nop
 8001506:	e000      	b.n	800150a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001508:	bf00      	nop
    }
}
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200005e8 	.word	0x200005e8
 8001514:	20000558 	.word	0x20000558
 8001518:	200003f8 	.word	0x200003f8
 800151c:	2000020c 	.word	0x2000020c
 8001520:	20000208 	.word	0x20000208
 8001524:	20000209 	.word	0x20000209
 8001528:	20000338 	.word	0x20000338

0800152c <READ_FLASH>:
}

/*
 * Simple FLASH read
*/
uint8_t READ_FLASH(uint32_t address) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    return (*(__IO uint8_t*)address);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <WRITE_FLASH>:

/*
 * FLASH memory write func for 1 sector
*/
void WRITE_FLASH(uint32_t address, uint8_t data) {
 8001548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800154c:	b092      	sub	sp, #72	; 0x48
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	70fb      	strb	r3, [r7, #3]

    uint8_t OldData[20];
    for (uint32_t addr = 0x0807FFF0, i = 0; addr <= 0x0807FFFF; addr++, i++) {
 8001556:	4b36      	ldr	r3, [pc, #216]	; (8001630 <WRITE_FLASH+0xe8>)
 8001558:	647b      	str	r3, [r7, #68]	; 0x44
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
 800155e:	e010      	b.n	8001582 <WRITE_FLASH+0x3a>
    	OldData[i] = READ_FLASH(addr);
 8001560:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001562:	f7ff ffe3 	bl	800152c <READ_FLASH>
 8001566:	4603      	mov	r3, r0
 8001568:	4619      	mov	r1, r3
 800156a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800156e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
    for (uint32_t addr = 0x0807FFF0, i = 0; addr <= 0x0807FFFF; addr++, i++) {
 8001576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001578:	3301      	adds	r3, #1
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
 800157c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800157e:	3301      	adds	r3, #1
 8001580:	643b      	str	r3, [r7, #64]	; 0x40
 8001582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001584:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <WRITE_FLASH+0xec>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d9ea      	bls.n	8001560 <WRITE_FLASH+0x18>
	}

	HAL_FLASH_Unlock();                                                             		// Unlock Flash
 800158a:	f003 fb6b 	bl	8004c64 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInitStruct;
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001592:	2302      	movs	r3, #2
 8001594:	623b      	str	r3, [r7, #32]
    eraseInitStruct.Sector = FLASH_SECTOR_7;
 8001596:	2307      	movs	r3, #7
 8001598:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.NbSectors = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
    uint32_t sectorError = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) != HAL_OK) {
 80015a2:	f107 020c 	add.w	r2, r7, #12
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fccb 	bl	8004f48 <HAL_FLASHEx_Erase>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <WRITE_FLASH+0x74>
        Error_Handler();
 80015b8:	f001 fb02 	bl	8002bc0 <Error_Handler>
    }

    for (uint32_t addr = 0x0807FFF0, i = 0; addr <= 0x0807FFFF; addr++, i++) {
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <WRITE_FLASH+0xe8>)
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015c4:	e019      	b.n	80015fa <WRITE_FLASH+0xb2>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr, OldData[i]) != HAL_OK) {		// Write old values in FLASH cells
 80015c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015cc:	4413      	add	r3, r2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	4698      	mov	r8, r3
 80015d6:	4691      	mov	r9, r2
 80015d8:	4642      	mov	r2, r8
 80015da:	464b      	mov	r3, r9
 80015dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015de:	2000      	movs	r0, #0
 80015e0:	f003 faec 	bl	8004bbc <HAL_FLASH_Program>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <WRITE_FLASH+0xa6>
        	Error_Handler();
 80015ea:	f001 fae9 	bl	8002bc0 <Error_Handler>
    for (uint32_t addr = 0x0807FFF0, i = 0; addr <= 0x0807FFFF; addr++, i++) {
 80015ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f0:	3301      	adds	r3, #1
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f6:	3301      	adds	r3, #1
 80015f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80015fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <WRITE_FLASH+0xec>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d9e1      	bls.n	80015c6 <WRITE_FLASH+0x7e>
        }
	}

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, data) != HAL_OK) {				// Write new value in FLASH cell
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	2200      	movs	r2, #0
 8001606:	461c      	mov	r4, r3
 8001608:	4615      	mov	r5, r2
 800160a:	4622      	mov	r2, r4
 800160c:	462b      	mov	r3, r5
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	2000      	movs	r0, #0
 8001612:	f003 fad3 	bl	8004bbc <HAL_FLASH_Program>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <WRITE_FLASH+0xd8>
    	Error_Handler();
 800161c:	f001 fad0 	bl	8002bc0 <Error_Handler>
    }

    HAL_FLASH_Lock();
 8001620:	f003 fb42 	bl	8004ca8 <HAL_FLASH_Lock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, data) != HAL_OK) {		// Write new value in FLASH cell
    	Error_Handler();
    }
    HAL_FLASH_Lock();																// Lock FLASH for sure
*/
}
 8001624:	bf00      	nop
 8001626:	3748      	adds	r7, #72	; 0x48
 8001628:	46bd      	mov	sp, r7
 800162a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800162e:	bf00      	nop
 8001630:	0807fff0 	.word	0x0807fff0
 8001634:	0807ffff 	.word	0x0807ffff

08001638 <ADC_SELECTOR>:

/*
 * Selecting input pin of MUX output for ADC processing
*/
void ADC_SELECTOR(uint8_t Channel){
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef cConfig = {0};
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
	cConfig.Channel = Channel;
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	60bb      	str	r3, [r7, #8]
	cConfig.Rank = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
	cConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &cConfig) != HAL_OK)
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4619      	mov	r1, r3
 8001662:	4806      	ldr	r0, [pc, #24]	; (800167c <ADC_SELECTOR+0x44>)
 8001664:	f002 fbca 	bl	8003dfc <HAL_ADC_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <ADC_SELECTOR+0x3a>
	{
		Error_Handler();
 800166e:	f001 faa7 	bl	8002bc0 <Error_Handler>
	}
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200003fc 	.word	0x200003fc

08001680 <ADC_GET_VALUE>:

/*
 * Receiving ADC values
*/
uint32_t ADC_GET_VALUE(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001684:	4806      	ldr	r0, [pc, #24]	; (80016a0 <ADC_GET_VALUE+0x20>)
 8001686:	f002 fa6d 	bl	8003b64 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 800168a:	2101      	movs	r1, #1
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <ADC_GET_VALUE+0x20>)
 800168e:	f002 fb1d 	bl	8003ccc <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <ADC_GET_VALUE+0x20>)
 8001694:	f002 fba5 	bl	8003de2 <HAL_ADC_GetValue>
 8001698:	4603      	mov	r3, r0
	HAL_ADC_Stop(&hadc1);
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200003fc 	.word	0x200003fc

080016a4 <SELECT_MUX_CH>:

/*
 * Selecting 0-15 channel of MUX
*/
void SELECT_MUX_CH(uint8_t MUX_CH) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SELECT0_Pin, (GPIO_PinState)((MUX_CH >> 0) & 0x01));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016bc:	4815      	ldr	r0, [pc, #84]	; (8001714 <SELECT_MUX_CH+0x70>)
 80016be:	f003 ff01 	bl	80054c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SELECT1_Pin, (GPIO_PinState)((MUX_CH >> 1) & 0x01));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d4:	480f      	ldr	r0, [pc, #60]	; (8001714 <SELECT_MUX_CH+0x70>)
 80016d6:	f003 fef5 	bl	80054c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SELECT2_Pin, (GPIO_PinState)((MUX_CH >> 2) & 0x01));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <SELECT_MUX_CH+0x70>)
 80016ee:	f003 fee9 	bl	80054c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SELECT3_Pin, (GPIO_PinState)((MUX_CH >> 3) & 0x01));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <SELECT_MUX_CH+0x70>)
 8001706:	f003 fedd 	bl	80054c4 <HAL_GPIO_WritePin>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40020400 	.word	0x40020400

08001718 <KEY_PRESS>:
 * 0-ID;
 * 1-MODIFIER;
 * 2-RESERVED;
 * 3-8KEYCODE[6]
*/
void KEY_PRESS(uint32_t ADC_Value, uint8_t Key_Identifier, uint8_t IsMod, uint8_t SwMod){
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	70fb      	strb	r3, [r7, #3]
 800172a:	460b      	mov	r3, r1
 800172c:	70bb      	strb	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	707b      	strb	r3, [r7, #1]
		}

	}
	else{*/
		//if (ADC_Value <= 1200 || ADC_Value >= 4000) {									// If switch have different magnet polarity also led power changes less dependent
		if (ADC_Value >= 3500){
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001738:	4293      	cmp	r3, r2
 800173a:	d921      	bls.n	8001780 <KEY_PRESS+0x68>
			keycodes[0] = 0x01;															// ID(1)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <KEY_PRESS+0x74>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
			if(IsMod) {																	// If pressed modifier keys
 8001742:	78bb      	ldrb	r3, [r7, #2]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d007      	beq.n	8001758 <KEY_PRESS+0x40>
				keycodes[1] ^= Key_Identifier;											// Accumulating Modifiers values in bits for first byte
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <KEY_PRESS+0x74>)
 800174a:	785a      	ldrb	r2, [r3, #1]
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	4053      	eors	r3, r2
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <KEY_PRESS+0x74>)
 8001754:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	//}
	//AdcPrev = ADC_Value;
}
 8001756:	e013      	b.n	8001780 <KEY_PRESS+0x68>
				for (uint8_t ByteCounter = 3; ByteCounter <= 9; ByteCounter++) {		// (MAX pressed keys == not enough)
 8001758:	2303      	movs	r3, #3
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e00d      	b.n	800177a <KEY_PRESS+0x62>
					if (keycodes[ByteCounter] == 0) {
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <KEY_PRESS+0x74>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <KEY_PRESS+0x5c>
						keycodes[ByteCounter] = Key_Identifier;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <KEY_PRESS+0x74>)
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	54ca      	strb	r2, [r1, r3]
						break;
 8001770:	bf00      	nop
}
 8001772:	e005      	b.n	8001780 <KEY_PRESS+0x68>
				for (uint8_t ByteCounter = 3; ByteCounter <= 9; ByteCounter++) {		// (MAX pressed keys == not enough)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3301      	adds	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b09      	cmp	r3, #9
 800177e:	d9ee      	bls.n	800175e <KEY_PRESS+0x46>
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	2000064c 	.word	0x2000064c

08001790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001796:	f002 f90b 	bl	80039b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179a:	f000 ffa5 	bl	80026e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179e:	f001 f9ad 	bl	8002afc <MX_GPIO_Init>
  MX_DMA_Init();
 80017a2:	f001 f96d 	bl	8002a80 <MX_DMA_Init>
  MX_ADC1_Init();
 80017a6:	f001 f807 	bl	80027b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017aa:	f001 f847 	bl	800283c <MX_I2C1_Init>
  MX_TIM1_Init();
 80017ae:	f001 f873 	bl	8002898 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80017b2:	f00b fe7f 	bl	800d4b4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80017b6:	f001 f90f 	bl	80029d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();														// OLED 128*32
 80017ba:	f001 fa6f 	bl	8002c9c <SSD1306_Init>
  ARGB_Init();															// SK6812
 80017be:	f7ff f9e3 	bl	8000b88 <ARGB_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);						// Encoder mode start
 80017c2:	213c      	movs	r1, #60	; 0x3c
 80017c4:	48a9      	ldr	r0, [pc, #676]	; (8001a6c <main+0x2dc>)
 80017c6:	f007 ffad 	bl	8009724 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
  //Menu_SetGenericWriteCallback(Generic_Write);
/*
* Starting Up Logo Astrolate
*/
  SSD1306_DrawBitmap(0, 0, StartLogo, 128, 32, SSD1306_COLOR_WHITE);	// Display logo
 80017ca:	2301      	movs	r3, #1
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2320      	movs	r3, #32
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	4aa6      	ldr	r2, [pc, #664]	; (8001a70 <main+0x2e0>)
 80017d6:	2100      	movs	r1, #0
 80017d8:	2000      	movs	r0, #0
 80017da:	f001 f9f6 	bl	8002bca <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();												// Show image
 80017de:	f001 fb21 	bl	8002e24 <SSD1306_UpdateScreen>
  HAL_Delay(1000);														// Wait
 80017e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e6:	f002 f955 	bl	8003a94 <HAL_Delay>
  SSD1306_Fill(SSD1306_COLOR_BLACK);									// Clear for next info
 80017ea:	2000      	movs	r0, #0
 80017ec:	f001 fb48 	bl	8002e80 <SSD1306_Fill>


  ARGB_Clear();															// Pre clearing of ARGB
 80017f0:	f7ff fa3e 	bl	8000c70 <ARGB_Clear>

/*
 * Read data from previous set-up
*/
  Red = READ_FLASH(0x0807FFF0);
 80017f4:	489f      	ldr	r0, [pc, #636]	; (8001a74 <main+0x2e4>)
 80017f6:	f7ff fe99 	bl	800152c <READ_FLASH>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b9e      	ldr	r3, [pc, #632]	; (8001a78 <main+0x2e8>)
 8001800:	701a      	strb	r2, [r3, #0]
  Green = READ_FLASH(0x0807FFF1);
 8001802:	489e      	ldr	r0, [pc, #632]	; (8001a7c <main+0x2ec>)
 8001804:	f7ff fe92 	bl	800152c <READ_FLASH>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b9c      	ldr	r3, [pc, #624]	; (8001a80 <main+0x2f0>)
 800180e:	701a      	strb	r2, [r3, #0]
  Blue = READ_FLASH(0x0807FFF2);
 8001810:	489c      	ldr	r0, [pc, #624]	; (8001a84 <main+0x2f4>)
 8001812:	f7ff fe8b 	bl	800152c <READ_FLASH>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b9b      	ldr	r3, [pc, #620]	; (8001a88 <main+0x2f8>)
 800181c:	701a      	strb	r2, [r3, #0]
  LedBrightness = READ_FLASH(0x0807FFF3);
 800181e:	489b      	ldr	r0, [pc, #620]	; (8001a8c <main+0x2fc>)
 8001820:	f7ff fe84 	bl	800152c <READ_FLASH>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	4b99      	ldr	r3, [pc, #612]	; (8001a90 <main+0x300>)
 800182a:	701a      	strb	r2, [r3, #0]
  ArgbMode = READ_FLASH(0x0807FFF4);
 800182c:	4899      	ldr	r0, [pc, #612]	; (8001a94 <main+0x304>)
 800182e:	f7ff fe7d 	bl	800152c <READ_FLASH>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b98      	ldr	r3, [pc, #608]	; (8001a98 <main+0x308>)
 8001838:	701a      	strb	r2, [r3, #0]
  SwitchMode = READ_FLASH(0x0807FFF5);
 800183a:	4898      	ldr	r0, [pc, #608]	; (8001a9c <main+0x30c>)
 800183c:	f7ff fe76 	bl	800152c <READ_FLASH>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	4b96      	ldr	r3, [pc, #600]	; (8001aa0 <main+0x310>)
 8001846:	701a      	strb	r2, [r3, #0]

  uint16_t PositionLast = (int16_t)__HAL_TIM_GET_COUNTER(&htim3) / 4;
 8001848:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <main+0x2dc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	b21b      	sxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	da00      	bge.n	8001856 <main+0xc6>
 8001854:	3303      	adds	r3, #3
 8001856:	109b      	asrs	r3, r3, #2
 8001858:	b21b      	sxth	r3, r3
 800185a:	82fb      	strh	r3, [r7, #22]
  while (1)
  {
/*
* Encoder Handler Section
*/
	uint32_t Counter = __HAL_TIM_GET_COUNTER(&htim3);
 800185c:	4b83      	ldr	r3, [pc, #524]	; (8001a6c <main+0x2dc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	60bb      	str	r3, [r7, #8]
	uint16_t Position = (int16_t)Counter / 4;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	b21b      	sxth	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	da00      	bge.n	800186e <main+0xde>
 800186c:	3303      	adds	r3, #3
 800186e:	109b      	asrs	r3, r3, #2
 8001870:	b21b      	sxth	r3, r3
 8001872:	80fb      	strh	r3, [r7, #6]
	if(Position == PositionLast){										// No change, (reset & screensaver)
 8001874:	88fa      	ldrh	r2, [r7, #6]
 8001876:	8afb      	ldrh	r3, [r7, #22]
 8001878:	429a      	cmp	r2, r3
 800187a:	d105      	bne.n	8001888 <main+0xf8>
		EncRotRig = 0;
 800187c:	4b89      	ldr	r3, [pc, #548]	; (8001aa4 <main+0x314>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
		EncRotLft = 0;
 8001882:	4b89      	ldr	r3, [pc, #548]	; (8001aa8 <main+0x318>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	}
	if(Position > PositionLast){										// Counter has increased, diff is positive
 8001888:	88fa      	ldrh	r2, [r7, #6]
 800188a:	8afb      	ldrh	r3, [r7, #22]
 800188c:	429a      	cmp	r2, r3
 800188e:	d902      	bls.n	8001896 <main+0x106>
		EncRotRig = 1;
 8001890:	4b84      	ldr	r3, [pc, #528]	; (8001aa4 <main+0x314>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
	}
	if(PositionLast > Position){										// Counter has decreased, diff is negative
 8001896:	8afa      	ldrh	r2, [r7, #22]
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	429a      	cmp	r2, r3
 800189c:	d902      	bls.n	80018a4 <main+0x114>
		EncRotLft = 1;
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <main+0x318>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
	}
	// Exceptions for logic issue
	if (Position == 0 && PositionLast == 65535) {
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10a      	bne.n	80018c0 <main+0x130>
 80018aa:	8afb      	ldrh	r3, [r7, #22]
 80018ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d105      	bne.n	80018c0 <main+0x130>
		EncRotRig = 1;
 80018b4:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <main+0x314>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
		EncRotLft = 0;
 80018ba:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <main+0x318>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
	}
	if (PositionLast == 0 && Position == 65535) {
 80018c0:	8afb      	ldrh	r3, [r7, #22]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <main+0x14c>
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d105      	bne.n	80018dc <main+0x14c>
		EncRotRig = 0;
 80018d0:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <main+0x314>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
		EncRotLft = 1;
 80018d6:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <main+0x318>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
	}
	PositionLast = Position;
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	82fb      	strh	r3, [r7, #22]
/*
* MUXs-ADC Section
*/
	for(uint8_t MUX = 0; MUX < 6; MUX++){																			// Selecting MUX
 80018e0:	2300      	movs	r3, #0
 80018e2:	757b      	strb	r3, [r7, #21]
 80018e4:	e156      	b.n	8001b94 <main+0x404>
	  switch(MUX){
 80018e6:	7d7b      	ldrb	r3, [r7, #21]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	f200 8150 	bhi.w	8001b8e <main+0x3fe>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <main+0x164>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	0800190d 	.word	0x0800190d
 80018f8:	08001943 	.word	0x08001943
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	080019b3 	.word	0x080019b3
 8001904:	080019eb 	.word	0x080019eb
 8001908:	08001a5f 	.word	0x08001a5f
		  case(0):																									// MUX_0
			  ADC_SELECTOR(5);
 800190c:	2005      	movs	r0, #5
 800190e:	f7ff fe93 	bl	8001638 <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001912:	2300      	movs	r3, #0
 8001914:	753b      	strb	r3, [r7, #20]
 8001916:	e010      	b.n	800193a <main+0x1aa>
				  SELECT_MUX_CH(MuxChannel);
 8001918:	7d3b      	ldrb	r3, [r7, #20]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fec2 	bl	80016a4 <SELECT_MUX_CH>
				  KEY_PRESS(ADC_GET_VALUE(), HEX_Map[MuxChannel], 0, SwitchMode);
 8001920:	f7ff feae 	bl	8001680 <ADC_GET_VALUE>
 8001924:	7d3b      	ldrb	r3, [r7, #20]
 8001926:	4a61      	ldr	r2, [pc, #388]	; (8001aac <main+0x31c>)
 8001928:	5cd1      	ldrb	r1, [r2, r3]
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <main+0x310>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	f7ff fef2 	bl	8001718 <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001934:	7d3b      	ldrb	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	753b      	strb	r3, [r7, #20]
 800193a:	7d3b      	ldrb	r3, [r7, #20]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d9eb      	bls.n	8001918 <main+0x188>
			  }
		  break;
 8001940:	e125      	b.n	8001b8e <main+0x3fe>
		  case(1):																									// MUX_1
			  ADC_SELECTOR(4);
 8001942:	2004      	movs	r0, #4
 8001944:	f7ff fe78 	bl	8001638 <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001948:	2300      	movs	r3, #0
 800194a:	74fb      	strb	r3, [r7, #19]
 800194c:	e011      	b.n	8001972 <main+0x1e2>
				  SELECT_MUX_CH(MuxChannel);
 800194e:	7cfb      	ldrb	r3, [r7, #19]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fea7 	bl	80016a4 <SELECT_MUX_CH>
				  KEY_PRESS(ADC_GET_VALUE(), HEX_Map[16 + MuxChannel], 0, SwitchMode);
 8001956:	f7ff fe93 	bl	8001680 <ADC_GET_VALUE>
 800195a:	7cfb      	ldrb	r3, [r7, #19]
 800195c:	3310      	adds	r3, #16
 800195e:	4a53      	ldr	r2, [pc, #332]	; (8001aac <main+0x31c>)
 8001960:	5cd1      	ldrb	r1, [r2, r3]
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <main+0x310>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	f7ff fed6 	bl	8001718 <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 800196c:	7cfb      	ldrb	r3, [r7, #19]
 800196e:	3301      	adds	r3, #1
 8001970:	74fb      	strb	r3, [r7, #19]
 8001972:	7cfb      	ldrb	r3, [r7, #19]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d9ea      	bls.n	800194e <main+0x1be>
			  }
		  break;
 8001978:	e109      	b.n	8001b8e <main+0x3fe>
		  case(2):																									// MUX_2
			  ADC_SELECTOR(3);
 800197a:	2003      	movs	r0, #3
 800197c:	f7ff fe5c 	bl	8001638 <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001980:	2300      	movs	r3, #0
 8001982:	74bb      	strb	r3, [r7, #18]
 8001984:	e011      	b.n	80019aa <main+0x21a>
				  SELECT_MUX_CH(MuxChannel);
 8001986:	7cbb      	ldrb	r3, [r7, #18]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe8b 	bl	80016a4 <SELECT_MUX_CH>
				  KEY_PRESS(ADC_GET_VALUE(), HEX_Map[32 + MuxChannel], 0, SwitchMode);
 800198e:	f7ff fe77 	bl	8001680 <ADC_GET_VALUE>
 8001992:	7cbb      	ldrb	r3, [r7, #18]
 8001994:	3320      	adds	r3, #32
 8001996:	4a45      	ldr	r2, [pc, #276]	; (8001aac <main+0x31c>)
 8001998:	5cd1      	ldrb	r1, [r2, r3]
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <main+0x310>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	f7ff feba 	bl	8001718 <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 80019a4:	7cbb      	ldrb	r3, [r7, #18]
 80019a6:	3301      	adds	r3, #1
 80019a8:	74bb      	strb	r3, [r7, #18]
 80019aa:	7cbb      	ldrb	r3, [r7, #18]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d9ea      	bls.n	8001986 <main+0x1f6>
			  }
		  break;
 80019b0:	e0ed      	b.n	8001b8e <main+0x3fe>
		  case(3):																									// MUX_3
			  ADC_SELECTOR(2);
 80019b2:	2002      	movs	r0, #2
 80019b4:	f7ff fe40 	bl	8001638 <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 80019b8:	2300      	movs	r3, #0
 80019ba:	747b      	strb	r3, [r7, #17]
 80019bc:	e011      	b.n	80019e2 <main+0x252>
				  SELECT_MUX_CH(MuxChannel);
 80019be:	7c7b      	ldrb	r3, [r7, #17]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe6f 	bl	80016a4 <SELECT_MUX_CH>
				  KEY_PRESS(ADC_GET_VALUE(), HEX_Map[48 + MuxChannel], 0, SwitchMode);
 80019c6:	f7ff fe5b 	bl	8001680 <ADC_GET_VALUE>
 80019ca:	7c7b      	ldrb	r3, [r7, #17]
 80019cc:	3330      	adds	r3, #48	; 0x30
 80019ce:	4a37      	ldr	r2, [pc, #220]	; (8001aac <main+0x31c>)
 80019d0:	5cd1      	ldrb	r1, [r2, r3]
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <main+0x310>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f7ff fe9e 	bl	8001718 <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 80019dc:	7c7b      	ldrb	r3, [r7, #17]
 80019de:	3301      	adds	r3, #1
 80019e0:	747b      	strb	r3, [r7, #17]
 80019e2:	7c7b      	ldrb	r3, [r7, #17]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d9ea      	bls.n	80019be <main+0x22e>
			  }
		  break;
 80019e8:	e0d1      	b.n	8001b8e <main+0x3fe>
		  case(4):																									// MUX_4
			  ADC_SELECTOR(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff fe24 	bl	8001638 <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 80019f0:	2300      	movs	r3, #0
 80019f2:	743b      	strb	r3, [r7, #16]
 80019f4:	e02f      	b.n	8001a56 <main+0x2c6>
				  SELECT_MUX_CH(MuxChannel);
 80019f6:	7c3b      	ldrb	r3, [r7, #16]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe53 	bl	80016a4 <SELECT_MUX_CH>
				  if(MuxChannel == 0) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[64 + MuxChannel], 1, SwitchMode);			// Exception for Left Shift
 80019fe:	7c3b      	ldrb	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10b      	bne.n	8001a1c <main+0x28c>
 8001a04:	f7ff fe3c 	bl	8001680 <ADC_GET_VALUE>
 8001a08:	7c3b      	ldrb	r3, [r7, #16]
 8001a0a:	3340      	adds	r3, #64	; 0x40
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <main+0x31c>)
 8001a0e:	5cd1      	ldrb	r1, [r2, r3]
 8001a10:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <main+0x310>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f7ff fe7f 	bl	8001718 <KEY_PRESS>
 8001a1a:	e019      	b.n	8001a50 <main+0x2c0>
				  else if(MuxChannel == 11) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[64 + MuxChannel], 1, SwitchMode);	// Exception for Right Shift
 8001a1c:	7c3b      	ldrb	r3, [r7, #16]
 8001a1e:	2b0b      	cmp	r3, #11
 8001a20:	d10b      	bne.n	8001a3a <main+0x2aa>
 8001a22:	f7ff fe2d 	bl	8001680 <ADC_GET_VALUE>
 8001a26:	7c3b      	ldrb	r3, [r7, #16]
 8001a28:	3340      	adds	r3, #64	; 0x40
 8001a2a:	4a20      	ldr	r2, [pc, #128]	; (8001aac <main+0x31c>)
 8001a2c:	5cd1      	ldrb	r1, [r2, r3]
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <main+0x310>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f7ff fe70 	bl	8001718 <KEY_PRESS>
 8001a38:	e00a      	b.n	8001a50 <main+0x2c0>
				  else KEY_PRESS(ADC_GET_VALUE(), HEX_Map[64 + MuxChannel], 0, SwitchMode);
 8001a3a:	f7ff fe21 	bl	8001680 <ADC_GET_VALUE>
 8001a3e:	7c3b      	ldrb	r3, [r7, #16]
 8001a40:	3340      	adds	r3, #64	; 0x40
 8001a42:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <main+0x31c>)
 8001a44:	5cd1      	ldrb	r1, [r2, r3]
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <main+0x310>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f7ff fe64 	bl	8001718 <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001a50:	7c3b      	ldrb	r3, [r7, #16]
 8001a52:	3301      	adds	r3, #1
 8001a54:	743b      	strb	r3, [r7, #16]
 8001a56:	7c3b      	ldrb	r3, [r7, #16]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d9cc      	bls.n	80019f6 <main+0x266>
			  }
		  break;
 8001a5c:	e097      	b.n	8001b8e <main+0x3fe>
		  case(5):																									// MUX_5
			  ADC_SELECTOR(0);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fdea 	bl	8001638 <ADC_SELECTOR>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e08d      	b.n	8001b86 <main+0x3f6>
 8001a6a:	bf00      	nop
 8001a6c:	200005a0 	.word	0x200005a0
 8001a70:	0800ee9c 	.word	0x0800ee9c
 8001a74:	0807fff0 	.word	0x0807fff0
 8001a78:	20000664 	.word	0x20000664
 8001a7c:	0807fff1 	.word	0x0807fff1
 8001a80:	20000665 	.word	0x20000665
 8001a84:	0807fff2 	.word	0x0807fff2
 8001a88:	20000666 	.word	0x20000666
 8001a8c:	0807fff3 	.word	0x0807fff3
 8001a90:	20000667 	.word	0x20000667
 8001a94:	0807fff4 	.word	0x0807fff4
 8001a98:	20000668 	.word	0x20000668
 8001a9c:	0807fff5 	.word	0x0807fff5
 8001aa0:	20000669 	.word	0x20000669
 8001aa4:	20000648 	.word	0x20000648
 8001aa8:	20000649 	.word	0x20000649
 8001aac:	0800f09c 	.word	0x0800f09c
				  SELECT_MUX_CH(MuxChannel);
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fdf6 	bl	80016a4 <SELECT_MUX_CH>
				  if(MuxChannel == 0) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);			// Exception for Left Ctrl
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <main+0x346>
 8001abe:	f7ff fddf 	bl	8001680 <ADC_GET_VALUE>
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3350      	adds	r3, #80	; 0x50
 8001ac6:	4aa4      	ldr	r2, [pc, #656]	; (8001d58 <main+0x5c8>)
 8001ac8:	5cd1      	ldrb	r1, [r2, r3]
 8001aca:	4ba4      	ldr	r3, [pc, #656]	; (8001d5c <main+0x5cc>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f7ff fe22 	bl	8001718 <KEY_PRESS>
 8001ad4:	e054      	b.n	8001b80 <main+0x3f0>
				  else if(MuxChannel == 1) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);		// Exception for Left Win
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10b      	bne.n	8001af4 <main+0x364>
 8001adc:	f7ff fdd0 	bl	8001680 <ADC_GET_VALUE>
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	3350      	adds	r3, #80	; 0x50
 8001ae4:	4a9c      	ldr	r2, [pc, #624]	; (8001d58 <main+0x5c8>)
 8001ae6:	5cd1      	ldrb	r1, [r2, r3]
 8001ae8:	4b9c      	ldr	r3, [pc, #624]	; (8001d5c <main+0x5cc>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f7ff fe13 	bl	8001718 <KEY_PRESS>
 8001af2:	e045      	b.n	8001b80 <main+0x3f0>
				  else if(MuxChannel == 2) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);		// Exception for Left Alt
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d10b      	bne.n	8001b12 <main+0x382>
 8001afa:	f7ff fdc1 	bl	8001680 <ADC_GET_VALUE>
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3350      	adds	r3, #80	; 0x50
 8001b02:	4a95      	ldr	r2, [pc, #596]	; (8001d58 <main+0x5c8>)
 8001b04:	5cd1      	ldrb	r1, [r2, r3]
 8001b06:	4b95      	ldr	r3, [pc, #596]	; (8001d5c <main+0x5cc>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f7ff fe04 	bl	8001718 <KEY_PRESS>
 8001b10:	e036      	b.n	8001b80 <main+0x3f0>
				  else if(MuxChannel == 4) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);		// Exception for Right Alt
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d10b      	bne.n	8001b30 <main+0x3a0>
 8001b18:	f7ff fdb2 	bl	8001680 <ADC_GET_VALUE>
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	3350      	adds	r3, #80	; 0x50
 8001b20:	4a8d      	ldr	r2, [pc, #564]	; (8001d58 <main+0x5c8>)
 8001b22:	5cd1      	ldrb	r1, [r2, r3]
 8001b24:	4b8d      	ldr	r3, [pc, #564]	; (8001d5c <main+0x5cc>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f7ff fdf5 	bl	8001718 <KEY_PRESS>
 8001b2e:	e027      	b.n	8001b80 <main+0x3f0>
				  else if(MuxChannel == 5){
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d10a      	bne.n	8001b4c <main+0x3bc>
					  if(ADC_GET_VALUE() >= 3500) FnBtnState = 1;													// Fn key press
 8001b36:	f7ff fda3 	bl	8001680 <ADC_GET_VALUE>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d91d      	bls.n	8001b80 <main+0x3f0>
 8001b44:	4b86      	ldr	r3, [pc, #536]	; (8001d60 <main+0x5d0>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e019      	b.n	8001b80 <main+0x3f0>
					  /*SSD1306_GotoXY(0, 10);
					  sprintf(DisplayText, "%d", ADC_GET_VALUE());													// temporary info
					  SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);*/
				  }
				  else if(MuxChannel == 6) KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 1, SwitchMode);		// Exception for Right Ctrl
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d10b      	bne.n	8001b6a <main+0x3da>
 8001b52:	f7ff fd95 	bl	8001680 <ADC_GET_VALUE>
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	3350      	adds	r3, #80	; 0x50
 8001b5a:	4a7f      	ldr	r2, [pc, #508]	; (8001d58 <main+0x5c8>)
 8001b5c:	5cd1      	ldrb	r1, [r2, r3]
 8001b5e:	4b7f      	ldr	r3, [pc, #508]	; (8001d5c <main+0x5cc>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f7ff fdd8 	bl	8001718 <KEY_PRESS>
 8001b68:	e00a      	b.n	8001b80 <main+0x3f0>
				  else KEY_PRESS(ADC_GET_VALUE(), HEX_Map[80 + MuxChannel], 0, SwitchMode);
 8001b6a:	f7ff fd89 	bl	8001680 <ADC_GET_VALUE>
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	3350      	adds	r3, #80	; 0x50
 8001b72:	4a79      	ldr	r2, [pc, #484]	; (8001d58 <main+0x5c8>)
 8001b74:	5cd1      	ldrb	r1, [r2, r3]
 8001b76:	4b79      	ldr	r3, [pc, #484]	; (8001d5c <main+0x5cc>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f7ff fdcc 	bl	8001718 <KEY_PRESS>
			  for(uint8_t MuxChannel = 0; MuxChannel <16; MuxChannel++){
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	3301      	adds	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d991      	bls.n	8001ab0 <main+0x320>
			  }
		  break;
 8001b8c:	bf00      	nop
	for(uint8_t MUX = 0; MUX < 6; MUX++){																			// Selecting MUX
 8001b8e:	7d7b      	ldrb	r3, [r7, #21]
 8001b90:	3301      	adds	r3, #1
 8001b92:	757b      	strb	r3, [r7, #21]
 8001b94:	7d7b      	ldrb	r3, [r7, #21]
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	f67f aea5 	bls.w	80018e6 <main+0x156>
	  }
	}
/*
 * Send Key Report
*/
	USBD_HID_SendReport(&hUsbDeviceFS, &keycodes, 9);							// Send keys report
 8001b9c:	2209      	movs	r2, #9
 8001b9e:	4971      	ldr	r1, [pc, #452]	; (8001d64 <main+0x5d4>)
 8001ba0:	4871      	ldr	r0, [pc, #452]	; (8001d68 <main+0x5d8>)
 8001ba2:	f00a f95b 	bl	800be5c <USBD_HID_SendReport>
	//if (SwitchMode == 1) {
		for (uint8_t ByteCounter = 1; ByteCounter <= 9; ByteCounter++) {
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	73bb      	strb	r3, [r7, #14]
 8001baa:	e00b      	b.n	8001bc4 <main+0x434>
			if (keycodes[ByteCounter] != 0){
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	4a6d      	ldr	r2, [pc, #436]	; (8001d64 <main+0x5d4>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <main+0x42e>
				keycodes[ByteCounter] = 0x00;										// Clear every byte
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	4a6a      	ldr	r2, [pc, #424]	; (8001d64 <main+0x5d4>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	54d1      	strb	r1, [r2, r3]
		for (uint8_t ByteCounter = 1; ByteCounter <= 9; ByteCounter++) {
 8001bbe:	7bbb      	ldrb	r3, [r7, #14]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	73bb      	strb	r3, [r7, #14]
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	2b09      	cmp	r3, #9
 8001bc8:	d9f0      	bls.n	8001bac <main+0x41c>
	//else if(SwitchMode == 0){}

/*
 * Main Menu
*/
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && MenuOpenFlag == 0){
 8001bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bce:	4867      	ldr	r0, [pc, #412]	; (8001d6c <main+0x5dc>)
 8001bd0:	f003 fc60 	bl	8005494 <HAL_GPIO_ReadPin>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10f      	bne.n	8001bfa <main+0x46a>
 8001bda:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <main+0x5e0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <main+0x46a>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8001be2:	bf00      	nop
 8001be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be8:	4860      	ldr	r0, [pc, #384]	; (8001d6c <main+0x5dc>)
 8001bea:	f003 fc53 	bl	8005494 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f7      	beq.n	8001be4 <main+0x454>
		MenuOpenFlag = 1;
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <main+0x5e0>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
	}
	if(MenuOpenFlag){
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <main+0x5e0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 848f 	beq.w	8002522 <main+0xd92>
		SSD1306_GotoXY(0, 0);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f001 f9b2 	bl	8002f70 <SSD1306_GotoXY>
		SSD1306_Puts("SETTINGS:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4959      	ldr	r1, [pc, #356]	; (8001d74 <main+0x5e4>)
 8001c10:	4859      	ldr	r0, [pc, #356]	; (8001d78 <main+0x5e8>)
 8001c12:	f001 fa43 	bl	800309c <SSD1306_Puts>

		SSD1306_GotoXY(90, 0);
 8001c16:	2100      	movs	r1, #0
 8001c18:	205a      	movs	r0, #90	; 0x5a
 8001c1a:	f001 f9a9 	bl	8002f70 <SSD1306_GotoXY>
		SSD1306_Puts("EXIT", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4954      	ldr	r1, [pc, #336]	; (8001d74 <main+0x5e4>)
 8001c22:	4856      	ldr	r0, [pc, #344]	; (8001d7c <main+0x5ec>)
 8001c24:	f001 fa3a 	bl	800309c <SSD1306_Puts>
		//---------------------
		SSD1306_GotoXY(0, 10);
 8001c28:	210a      	movs	r1, #10
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f001 f9a0 	bl	8002f70 <SSD1306_GotoXY>
		SSD1306_Puts("ARGB:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c30:	2201      	movs	r2, #1
 8001c32:	4950      	ldr	r1, [pc, #320]	; (8001d74 <main+0x5e4>)
 8001c34:	4852      	ldr	r0, [pc, #328]	; (8001d80 <main+0x5f0>)
 8001c36:	f001 fa31 	bl	800309c <SSD1306_Puts>

		SSD1306_GotoXY(45, 10);
 8001c3a:	210a      	movs	r1, #10
 8001c3c:	202d      	movs	r0, #45	; 0x2d
 8001c3e:	f001 f997 	bl	8002f70 <SSD1306_GotoXY>
		SSD1306_Puts("Solid", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c42:	2201      	movs	r2, #1
 8001c44:	494b      	ldr	r1, [pc, #300]	; (8001d74 <main+0x5e4>)
 8001c46:	484f      	ldr	r0, [pc, #316]	; (8001d84 <main+0x5f4>)
 8001c48:	f001 fa28 	bl	800309c <SSD1306_Puts>
		SSD1306_GotoXY(90, 10);
 8001c4c:	210a      	movs	r1, #10
 8001c4e:	205a      	movs	r0, #90	; 0x5a
 8001c50:	f001 f98e 	bl	8002f70 <SSD1306_GotoXY>
		SSD1306_Puts("Efct", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c54:	2201      	movs	r2, #1
 8001c56:	4947      	ldr	r1, [pc, #284]	; (8001d74 <main+0x5e4>)
 8001c58:	484b      	ldr	r0, [pc, #300]	; (8001d88 <main+0x5f8>)
 8001c5a:	f001 fa1f 	bl	800309c <SSD1306_Puts>
		//---------------------
		SSD1306_GotoXY(0, 20);
 8001c5e:	2114      	movs	r1, #20
 8001c60:	2000      	movs	r0, #0
 8001c62:	f001 f985 	bl	8002f70 <SSD1306_GotoXY>
		SSD1306_Puts("Btns:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c66:	2201      	movs	r2, #1
 8001c68:	4942      	ldr	r1, [pc, #264]	; (8001d74 <main+0x5e4>)
 8001c6a:	4848      	ldr	r0, [pc, #288]	; (8001d8c <main+0x5fc>)
 8001c6c:	f001 fa16 	bl	800309c <SSD1306_Puts>

		SSD1306_GotoXY(45, 20);
 8001c70:	2114      	movs	r1, #20
 8001c72:	202d      	movs	r0, #45	; 0x2d
 8001c74:	f001 f97c 	bl	8002f70 <SSD1306_GotoXY>
		SSD1306_Puts("Norm", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	493e      	ldr	r1, [pc, #248]	; (8001d74 <main+0x5e4>)
 8001c7c:	4844      	ldr	r0, [pc, #272]	; (8001d90 <main+0x600>)
 8001c7e:	f001 fa0d 	bl	800309c <SSD1306_Puts>

		SSD1306_GotoXY(90, 20);
 8001c82:	2114      	movs	r1, #20
 8001c84:	205a      	movs	r0, #90	; 0x5a
 8001c86:	f001 f973 	bl	8002f70 <SSD1306_GotoXY>
		SSD1306_Puts("Rapid", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4939      	ldr	r1, [pc, #228]	; (8001d74 <main+0x5e4>)
 8001c8e:	4841      	ldr	r0, [pc, #260]	; (8001d94 <main+0x604>)
 8001c90:	f001 fa04 	bl	800309c <SSD1306_Puts>
		//---------------------
		SSD1306_DrawLine(0, 9, 128, 9, SSD1306_COLOR_WHITE);
 8001c94:	2301      	movs	r3, #1
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2309      	movs	r3, #9
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	2109      	movs	r1, #9
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f001 fa21 	bl	80030e6 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 19, 128, 19, SSD1306_COLOR_WHITE);
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2313      	movs	r3, #19
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	2113      	movs	r1, #19
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f001 fa19 	bl	80030e6 <SSD1306_DrawLine>
		SSD1306_DrawLine(85, 0, 85, 32, SSD1306_COLOR_WHITE);
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2320      	movs	r3, #32
 8001cba:	2255      	movs	r2, #85	; 0x55
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2055      	movs	r0, #85	; 0x55
 8001cc0:	f001 fa11 	bl	80030e6 <SSD1306_DrawLine>
		SSD1306_DrawLine(40, 9, 40, 32, SSD1306_COLOR_WHITE);
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2320      	movs	r3, #32
 8001cca:	2228      	movs	r2, #40	; 0x28
 8001ccc:	2109      	movs	r1, #9
 8001cce:	2028      	movs	r0, #40	; 0x28
 8001cd0:	f001 fa09 	bl	80030e6 <SSD1306_DrawLine>

		if(!MenuDeniedFlag){
 8001cd4:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <main+0x608>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d129      	bne.n	8001d30 <main+0x5a0>
			if(EncRotRig == 1)MenuEncCounter++;
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <main+0x60c>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d108      	bne.n	8001cf6 <main+0x566>
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <main+0x610>)
 8001ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	b25a      	sxtb	r2, r3
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <main+0x610>)
 8001cf4:	701a      	strb	r2, [r3, #0]
			if(EncRotLft == 1)MenuEncCounter--;
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <main+0x614>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d108      	bne.n	8001d10 <main+0x580>
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <main+0x610>)
 8001d00:	f993 3000 	ldrsb.w	r3, [r3]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	b25a      	sxtb	r2, r3
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <main+0x610>)
 8001d0e:	701a      	strb	r2, [r3, #0]
			if(MenuEncCounter > 4)MenuEncCounter = 0;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <main+0x610>)
 8001d12:	f993 3000 	ldrsb.w	r3, [r3]
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	dd02      	ble.n	8001d20 <main+0x590>
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <main+0x610>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
			if(MenuEncCounter < 0)MenuEncCounter = 4;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <main+0x610>)
 8001d22:	f993 3000 	ldrsb.w	r3, [r3]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da02      	bge.n	8001d30 <main+0x5a0>
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <main+0x610>)
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	701a      	strb	r2, [r3, #0]
		}
		switch(MenuEncCounter){
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <main+0x610>)
 8001d32:	f993 3000 	ldrsb.w	r3, [r3]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	f200 8491 	bhi.w	800265e <main+0xece>
 8001d3c:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <main+0x5b4>)
 8001d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d42:	bf00      	nop
 8001d44:	08001da9 	.word	0x08001da9
 8001d48:	08001e01 	.word	0x08001e01
 8001d4c:	08002445 	.word	0x08002445
 8001d50:	0800248f 	.word	0x0800248f
 8001d54:	080024d9 	.word	0x080024d9
 8001d58:	0800f09c 	.word	0x0800f09c
 8001d5c:	20000669 	.word	0x20000669
 8001d60:	2000064a 	.word	0x2000064a
 8001d64:	2000064c 	.word	0x2000064c
 8001d68:	200008a8 	.word	0x200008a8
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	2000066a 	.word	0x2000066a
 8001d74:	20000004 	.word	0x20000004
 8001d78:	0800e670 	.word	0x0800e670
 8001d7c:	0800e67c 	.word	0x0800e67c
 8001d80:	0800e684 	.word	0x0800e684
 8001d84:	0800e68c 	.word	0x0800e68c
 8001d88:	0800e694 	.word	0x0800e694
 8001d8c:	0800e69c 	.word	0x0800e69c
 8001d90:	0800e6a4 	.word	0x0800e6a4
 8001d94:	0800e6ac 	.word	0x0800e6ac
 8001d98:	2000066b 	.word	0x2000066b
 8001d9c:	20000648 	.word	0x20000648
 8001da0:	20000672 	.word	0x20000672
 8001da4:	20000649 	.word	0x20000649
		  case(0):
			SSD1306_GotoXY(90, 0);
 8001da8:	2100      	movs	r1, #0
 8001daa:	205a      	movs	r0, #90	; 0x5a
 8001dac:	f001 f8e0 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("EXIT", &Font_7x10, SSD1306_COLOR_BLACK);
 8001db0:	2200      	movs	r2, #0
 8001db2:	4990      	ldr	r1, [pc, #576]	; (8001ff4 <main+0x864>)
 8001db4:	4890      	ldr	r0, [pc, #576]	; (8001ff8 <main+0x868>)
 8001db6:	f001 f971 	bl	800309c <SSD1306_Puts>

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && MenuOpenFlag == 1){
 8001dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dbe:	488f      	ldr	r0, [pc, #572]	; (8001ffc <main+0x86c>)
 8001dc0:	f003 fb68 	bl	8005494 <HAL_GPIO_ReadPin>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 8440 	bne.w	800264c <main+0xebc>
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <main+0x870>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f040 843b 	bne.w	800264c <main+0xebc>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8001dd6:	bf00      	nop
 8001dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ddc:	4887      	ldr	r0, [pc, #540]	; (8001ffc <main+0x86c>)
 8001dde:	f003 fb59 	bl	8005494 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f7      	beq.n	8001dd8 <main+0x648>
				MenuOpenFlag = !MenuOpenFlag;
 8001de8:	4b85      	ldr	r3, [pc, #532]	; (8002000 <main+0x870>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b81      	ldr	r3, [pc, #516]	; (8002000 <main+0x870>)
 8001dfa:	701a      	strb	r2, [r3, #0]
			}
		  break;
 8001dfc:	f000 bc26 	b.w	800264c <main+0xebc>
		  case(1):
			SSD1306_GotoXY(45, 10);
 8001e00:	210a      	movs	r1, #10
 8001e02:	202d      	movs	r0, #45	; 0x2d
 8001e04:	f001 f8b4 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("Solid", &Font_7x10, SSD1306_COLOR_BLACK);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	497a      	ldr	r1, [pc, #488]	; (8001ff4 <main+0x864>)
 8001e0c:	487d      	ldr	r0, [pc, #500]	; (8002004 <main+0x874>)
 8001e0e:	f001 f945 	bl	800309c <SSD1306_Puts>

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && SubMenu == 0){
 8001e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e16:	4879      	ldr	r0, [pc, #484]	; (8001ffc <main+0x86c>)
 8001e18:	f003 fb3c 	bl	8005494 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10f      	bne.n	8001e42 <main+0x6b2>
 8001e22:	4b79      	ldr	r3, [pc, #484]	; (8002008 <main+0x878>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10b      	bne.n	8001e42 <main+0x6b2>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8001e2a:	bf00      	nop
 8001e2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e30:	4872      	ldr	r0, [pc, #456]	; (8001ffc <main+0x86c>)
 8001e32:	f003 fb2f 	bl	8005494 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f7      	beq.n	8001e2c <main+0x69c>
				SubMenu = 1;
 8001e3c:	4b72      	ldr	r3, [pc, #456]	; (8002008 <main+0x878>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
			}
			if(SubMenu){
 8001e42:	4b71      	ldr	r3, [pc, #452]	; (8002008 <main+0x878>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8402 	beq.w	8002650 <main+0xec0>
				MenuDeniedFlag = 1;
 8001e4c:	4b6f      	ldr	r3, [pc, #444]	; (800200c <main+0x87c>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
				SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f001 f814 	bl	8002e80 <SSD1306_Fill>

			    SSD1306_GotoXY(8, 0);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2008      	movs	r0, #8
 8001e5c:	f001 f888 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts("R", &Font_7x10, SSD1306_COLOR_WHITE);
 8001e60:	2201      	movs	r2, #1
 8001e62:	4964      	ldr	r1, [pc, #400]	; (8001ff4 <main+0x864>)
 8001e64:	486a      	ldr	r0, [pc, #424]	; (8002010 <main+0x880>)
 8001e66:	f001 f919 	bl	800309c <SSD1306_Puts>
				sprintf(DisplayText, "%d", Red);
 8001e6a:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <main+0x884>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4969      	ldr	r1, [pc, #420]	; (8002018 <main+0x888>)
 8001e72:	486a      	ldr	r0, [pc, #424]	; (800201c <main+0x88c>)
 8001e74:	f00b ff4c 	bl	800dd10 <siprintf>
				SSD1306_GotoXY(0, 10);
 8001e78:	210a      	movs	r1, #10
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f001 f878 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);
 8001e80:	2201      	movs	r2, #1
 8001e82:	495c      	ldr	r1, [pc, #368]	; (8001ff4 <main+0x864>)
 8001e84:	4865      	ldr	r0, [pc, #404]	; (800201c <main+0x88c>)
 8001e86:	f001 f909 	bl	800309c <SSD1306_Puts>

				SSD1306_GotoXY(32, 0);
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2020      	movs	r0, #32
 8001e8e:	f001 f86f 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts("G", &Font_7x10, SSD1306_COLOR_WHITE);
 8001e92:	2201      	movs	r2, #1
 8001e94:	4957      	ldr	r1, [pc, #348]	; (8001ff4 <main+0x864>)
 8001e96:	4862      	ldr	r0, [pc, #392]	; (8002020 <main+0x890>)
 8001e98:	f001 f900 	bl	800309c <SSD1306_Puts>
				sprintf(DisplayText, "%d", Green);
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <main+0x894>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	495d      	ldr	r1, [pc, #372]	; (8002018 <main+0x888>)
 8001ea4:	485d      	ldr	r0, [pc, #372]	; (800201c <main+0x88c>)
 8001ea6:	f00b ff33 	bl	800dd10 <siprintf>
				SSD1306_GotoXY(25, 10);
 8001eaa:	210a      	movs	r1, #10
 8001eac:	2019      	movs	r0, #25
 8001eae:	f001 f85f 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	494f      	ldr	r1, [pc, #316]	; (8001ff4 <main+0x864>)
 8001eb6:	4859      	ldr	r0, [pc, #356]	; (800201c <main+0x88c>)
 8001eb8:	f001 f8f0 	bl	800309c <SSD1306_Puts>

				SSD1306_GotoXY(64, 0);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2040      	movs	r0, #64	; 0x40
 8001ec0:	f001 f856 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts("B", &Font_7x10, SSD1306_COLOR_WHITE);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	494b      	ldr	r1, [pc, #300]	; (8001ff4 <main+0x864>)
 8001ec8:	4857      	ldr	r0, [pc, #348]	; (8002028 <main+0x898>)
 8001eca:	f001 f8e7 	bl	800309c <SSD1306_Puts>
				sprintf(DisplayText, "%d", Blue);
 8001ece:	4b57      	ldr	r3, [pc, #348]	; (800202c <main+0x89c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4950      	ldr	r1, [pc, #320]	; (8002018 <main+0x888>)
 8001ed6:	4851      	ldr	r0, [pc, #324]	; (800201c <main+0x88c>)
 8001ed8:	f00b ff1a 	bl	800dd10 <siprintf>
				SSD1306_GotoXY(56, 10);
 8001edc:	210a      	movs	r1, #10
 8001ede:	2038      	movs	r0, #56	; 0x38
 8001ee0:	f001 f846 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4943      	ldr	r1, [pc, #268]	; (8001ff4 <main+0x864>)
 8001ee8:	484c      	ldr	r0, [pc, #304]	; (800201c <main+0x88c>)
 8001eea:	f001 f8d7 	bl	800309c <SSD1306_Puts>

				SSD1306_GotoXY(96, 0);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2060      	movs	r0, #96	; 0x60
 8001ef2:	f001 f83d 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts("BR", &Font_7x10, SSD1306_COLOR_WHITE);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	493e      	ldr	r1, [pc, #248]	; (8001ff4 <main+0x864>)
 8001efa:	484d      	ldr	r0, [pc, #308]	; (8002030 <main+0x8a0>)
 8001efc:	f001 f8ce 	bl	800309c <SSD1306_Puts>
				sprintf(DisplayText, "%d", LedBrightness);
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <main+0x8a4>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4944      	ldr	r1, [pc, #272]	; (8002018 <main+0x888>)
 8001f08:	4844      	ldr	r0, [pc, #272]	; (800201c <main+0x88c>)
 8001f0a:	f00b ff01 	bl	800dd10 <siprintf>
				SSD1306_GotoXY(92, 10);
 8001f0e:	210a      	movs	r1, #10
 8001f10:	205c      	movs	r0, #92	; 0x5c
 8001f12:	f001 f82d 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f16:	2201      	movs	r2, #1
 8001f18:	4936      	ldr	r1, [pc, #216]	; (8001ff4 <main+0x864>)
 8001f1a:	4840      	ldr	r0, [pc, #256]	; (800201c <main+0x88c>)
 8001f1c:	f001 f8be 	bl	800309c <SSD1306_Puts>

				SSD1306_GotoXY(90, 20);
 8001f20:	2114      	movs	r1, #20
 8001f22:	205a      	movs	r0, #90	; 0x5a
 8001f24:	f001 f824 	bl	8002f70 <SSD1306_GotoXY>
				SSD1306_Puts("BACK", &Font_7x10, SSD1306_COLOR_WHITE);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4932      	ldr	r1, [pc, #200]	; (8001ff4 <main+0x864>)
 8001f2c:	4842      	ldr	r0, [pc, #264]	; (8002038 <main+0x8a8>)
 8001f2e:	f001 f8b5 	bl	800309c <SSD1306_Puts>
				//---------------------
				SSD1306_DrawLine(0, 9, 128, 9, SSD1306_COLOR_WHITE);
 8001f32:	2301      	movs	r3, #1
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2309      	movs	r3, #9
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	2109      	movs	r1, #9
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f001 f8d2 	bl	80030e6 <SSD1306_DrawLine>
				SSD1306_DrawLine(22, 0, 22, 20, SSD1306_COLOR_WHITE);
 8001f42:	2301      	movs	r3, #1
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2314      	movs	r3, #20
 8001f48:	2216      	movs	r2, #22
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2016      	movs	r0, #22
 8001f4e:	f001 f8ca 	bl	80030e6 <SSD1306_DrawLine>
				SSD1306_DrawLine(50, 0, 50, 20, SSD1306_COLOR_WHITE);
 8001f52:	2301      	movs	r3, #1
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2314      	movs	r3, #20
 8001f58:	2232      	movs	r2, #50	; 0x32
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2032      	movs	r0, #50	; 0x32
 8001f5e:	f001 f8c2 	bl	80030e6 <SSD1306_DrawLine>
				SSD1306_DrawLine(85, 0, 85, 20, SSD1306_COLOR_WHITE);
 8001f62:	2301      	movs	r3, #1
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2314      	movs	r3, #20
 8001f68:	2255      	movs	r2, #85	; 0x55
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2055      	movs	r0, #85	; 0x55
 8001f6e:	f001 f8ba 	bl	80030e6 <SSD1306_DrawLine>

				if(!SubMenuDeniedFlag){
 8001f72:	4b32      	ldr	r3, [pc, #200]	; (800203c <main+0x8ac>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d129      	bne.n	8001fce <main+0x83e>
					if(EncRotRig == 1)SubMenuEncCounter++;
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <main+0x8b0>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d108      	bne.n	8001f94 <main+0x804>
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <main+0x8b4>)
 8001f84:	f993 3000 	ldrsb.w	r3, [r3]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <main+0x8b4>)
 8001f92:	701a      	strb	r2, [r3, #0]
					if(EncRotLft == 1)SubMenuEncCounter--;
 8001f94:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <main+0x8b8>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d108      	bne.n	8001fae <main+0x81e>
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <main+0x8b4>)
 8001f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	b25a      	sxtb	r2, r3
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <main+0x8b4>)
 8001fac:	701a      	strb	r2, [r3, #0]
					if(SubMenuEncCounter > 4)SubMenuEncCounter = 0;
 8001fae:	4b25      	ldr	r3, [pc, #148]	; (8002044 <main+0x8b4>)
 8001fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	dd02      	ble.n	8001fbe <main+0x82e>
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <main+0x8b4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
					if(SubMenuEncCounter < 0)SubMenuEncCounter = 4;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <main+0x8b4>)
 8001fc0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da02      	bge.n	8001fce <main+0x83e>
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <main+0x8b4>)
 8001fca:	2204      	movs	r2, #4
 8001fcc:	701a      	strb	r2, [r3, #0]
				}
				switch(SubMenuEncCounter){
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <main+0x8b4>)
 8001fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	f200 833b 	bhi.w	8002650 <main+0xec0>
 8001fda:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <main+0x850>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	0800204d 	.word	0x0800204d
 8001fe4:	0800211d 	.word	0x0800211d
 8001fe8:	080021ed 	.word	0x080021ed
 8001fec:	080022fd 	.word	0x080022fd
 8001ff0:	080023c7 	.word	0x080023c7
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	0800e67c 	.word	0x0800e67c
 8001ffc:	40020000 	.word	0x40020000
 8002000:	2000066a 	.word	0x2000066a
 8002004:	0800e68c 	.word	0x0800e68c
 8002008:	20000670 	.word	0x20000670
 800200c:	2000066b 	.word	0x2000066b
 8002010:	0800e6b4 	.word	0x0800e6b4
 8002014:	20000664 	.word	0x20000664
 8002018:	0800e6b8 	.word	0x0800e6b8
 800201c:	2000065c 	.word	0x2000065c
 8002020:	0800e6bc 	.word	0x0800e6bc
 8002024:	20000665 	.word	0x20000665
 8002028:	0800e6c0 	.word	0x0800e6c0
 800202c:	20000666 	.word	0x20000666
 8002030:	0800e6c4 	.word	0x0800e6c4
 8002034:	20000667 	.word	0x20000667
 8002038:	0800e6c8 	.word	0x0800e6c8
 800203c:	20000671 	.word	0x20000671
 8002040:	20000648 	.word	0x20000648
 8002044:	20000673 	.word	0x20000673
 8002048:	20000649 	.word	0x20000649
				  case(0):
					sprintf(DisplayText, "%d", Red);
 800204c:	4b9b      	ldr	r3, [pc, #620]	; (80022bc <main+0xb2c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	499b      	ldr	r1, [pc, #620]	; (80022c0 <main+0xb30>)
 8002054:	489b      	ldr	r0, [pc, #620]	; (80022c4 <main+0xb34>)
 8002056:	f00b fe5b 	bl	800dd10 <siprintf>
					SSD1306_GotoXY(0, 10);
 800205a:	210a      	movs	r1, #10
 800205c:	2000      	movs	r0, #0
 800205e:	f000 ff87 	bl	8002f70 <SSD1306_GotoXY>
					SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_BLACK);
 8002062:	2200      	movs	r2, #0
 8002064:	4998      	ldr	r1, [pc, #608]	; (80022c8 <main+0xb38>)
 8002066:	4897      	ldr	r0, [pc, #604]	; (80022c4 <main+0xb34>)
 8002068:	f001 f818 	bl	800309c <SSD1306_Puts>

					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && RedMenu == 0){
 800206c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002070:	4896      	ldr	r0, [pc, #600]	; (80022cc <main+0xb3c>)
 8002072:	f003 fa0f 	bl	8005494 <HAL_GPIO_ReadPin>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10f      	bne.n	800209c <main+0x90c>
 800207c:	4b94      	ldr	r3, [pc, #592]	; (80022d0 <main+0xb40>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10b      	bne.n	800209c <main+0x90c>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002084:	bf00      	nop
 8002086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208a:	4890      	ldr	r0, [pc, #576]	; (80022cc <main+0xb3c>)
 800208c:	f003 fa02 	bl	8005494 <HAL_GPIO_ReadPin>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f7      	beq.n	8002086 <main+0x8f6>
						RedMenu = 1;
 8002096:	4b8e      	ldr	r3, [pc, #568]	; (80022d0 <main+0xb40>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
					}
					if(RedMenu){
 800209c:	4b8c      	ldr	r3, [pc, #560]	; (80022d0 <main+0xb40>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 81c5 	beq.w	8002430 <main+0xca0>
						SubMenuDeniedFlag = 1;
 80020a6:	4b8b      	ldr	r3, [pc, #556]	; (80022d4 <main+0xb44>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
						if(EncRotRig == 1)Red++;
 80020ac:	4b8a      	ldr	r3, [pc, #552]	; (80022d8 <main+0xb48>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <main+0x930>
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <main+0xb2c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <main+0xb2c>)
 80020be:	701a      	strb	r2, [r3, #0]
						if(EncRotLft == 1)Red--;
 80020c0:	4b86      	ldr	r3, [pc, #536]	; (80022dc <main+0xb4c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <main+0x944>
 80020c8:	4b7c      	ldr	r3, [pc, #496]	; (80022bc <main+0xb2c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <main+0xb2c>)
 80020d2:	701a      	strb	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && RedMenu == 1){
 80020d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d8:	487c      	ldr	r0, [pc, #496]	; (80022cc <main+0xb3c>)
 80020da:	f003 f9db 	bl	8005494 <HAL_GPIO_ReadPin>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 81a5 	bne.w	8002430 <main+0xca0>
 80020e6:	4b7a      	ldr	r3, [pc, #488]	; (80022d0 <main+0xb40>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	f040 81a0 	bne.w	8002430 <main+0xca0>
							while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80020f0:	bf00      	nop
 80020f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f6:	4875      	ldr	r0, [pc, #468]	; (80022cc <main+0xb3c>)
 80020f8:	f003 f9cc 	bl	8005494 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f7      	beq.n	80020f2 <main+0x962>
							//WRITE_FLASH(0x0807FFF0, 0xFF);
							WRITE_FLASH(0x0807FFF0, Red);
 8002102:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <main+0xb2c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	4875      	ldr	r0, [pc, #468]	; (80022e0 <main+0xb50>)
 800210a:	f7ff fa1d 	bl	8001548 <WRITE_FLASH>
							RedMenu = 0;
 800210e:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <main+0xb40>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
							SubMenuDeniedFlag = 0;
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <main+0xb44>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
						}
					}
				  break;
 800211a:	e189      	b.n	8002430 <main+0xca0>
				  case(1):
						sprintf(DisplayText, "%d", Green);
 800211c:	4b71      	ldr	r3, [pc, #452]	; (80022e4 <main+0xb54>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4967      	ldr	r1, [pc, #412]	; (80022c0 <main+0xb30>)
 8002124:	4867      	ldr	r0, [pc, #412]	; (80022c4 <main+0xb34>)
 8002126:	f00b fdf3 	bl	800dd10 <siprintf>
						SSD1306_GotoXY(25, 10);
 800212a:	210a      	movs	r1, #10
 800212c:	2019      	movs	r0, #25
 800212e:	f000 ff1f 	bl	8002f70 <SSD1306_GotoXY>
						SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_BLACK);
 8002132:	2200      	movs	r2, #0
 8002134:	4964      	ldr	r1, [pc, #400]	; (80022c8 <main+0xb38>)
 8002136:	4863      	ldr	r0, [pc, #396]	; (80022c4 <main+0xb34>)
 8002138:	f000 ffb0 	bl	800309c <SSD1306_Puts>

					  //uint8_t GreenMenu = 0;
					  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && GreenMenu == 0){
 800213c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002140:	4862      	ldr	r0, [pc, #392]	; (80022cc <main+0xb3c>)
 8002142:	f003 f9a7 	bl	8005494 <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10f      	bne.n	800216c <main+0x9dc>
 800214c:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <main+0xb58>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <main+0x9dc>
						while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002154:	bf00      	nop
 8002156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800215a:	485c      	ldr	r0, [pc, #368]	; (80022cc <main+0xb3c>)
 800215c:	f003 f99a 	bl	8005494 <HAL_GPIO_ReadPin>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f7      	beq.n	8002156 <main+0x9c6>
						GreenMenu = 1;
 8002166:	4b60      	ldr	r3, [pc, #384]	; (80022e8 <main+0xb58>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
					  }
					  if(GreenMenu){
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <main+0xb58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 815f 	beq.w	8002434 <main+0xca4>
						SubMenuDeniedFlag = 1;
 8002176:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <main+0xb44>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
						if(EncRotRig == 1)Green++;
 800217c:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <main+0xb48>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <main+0xa00>
 8002184:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <main+0xb54>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b55      	ldr	r3, [pc, #340]	; (80022e4 <main+0xb54>)
 800218e:	701a      	strb	r2, [r3, #0]
						if(EncRotLft == 1)Green--;
 8002190:	4b52      	ldr	r3, [pc, #328]	; (80022dc <main+0xb4c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <main+0xa14>
 8002198:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <main+0xb54>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <main+0xb54>)
 80021a2:	701a      	strb	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && GreenMenu == 1){
 80021a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a8:	4848      	ldr	r0, [pc, #288]	; (80022cc <main+0xb3c>)
 80021aa:	f003 f973 	bl	8005494 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 813f 	bne.w	8002434 <main+0xca4>
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <main+0xb58>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 813a 	bne.w	8002434 <main+0xca4>
						  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80021c0:	bf00      	nop
 80021c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c6:	4841      	ldr	r0, [pc, #260]	; (80022cc <main+0xb3c>)
 80021c8:	f003 f964 	bl	8005494 <HAL_GPIO_ReadPin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f7      	beq.n	80021c2 <main+0xa32>
						  //WRITE_FLASH(0x0807FFF1, 0xFF);
						  WRITE_FLASH(0x0807FFF1, Green);
 80021d2:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <main+0xb54>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4844      	ldr	r0, [pc, #272]	; (80022ec <main+0xb5c>)
 80021da:	f7ff f9b5 	bl	8001548 <WRITE_FLASH>
						  GreenMenu = 0;
 80021de:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <main+0xb58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
						  SubMenuDeniedFlag = 0;
 80021e4:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <main+0xb44>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
						}
					  }

				  break;
 80021ea:	e123      	b.n	8002434 <main+0xca4>
				  case(2):
						sprintf(DisplayText, "%d", Blue);
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <main+0xb60>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4933      	ldr	r1, [pc, #204]	; (80022c0 <main+0xb30>)
 80021f4:	4833      	ldr	r0, [pc, #204]	; (80022c4 <main+0xb34>)
 80021f6:	f00b fd8b 	bl	800dd10 <siprintf>
						SSD1306_GotoXY(56, 10);
 80021fa:	210a      	movs	r1, #10
 80021fc:	2038      	movs	r0, #56	; 0x38
 80021fe:	f000 feb7 	bl	8002f70 <SSD1306_GotoXY>
						SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_BLACK);
 8002202:	2200      	movs	r2, #0
 8002204:	4930      	ldr	r1, [pc, #192]	; (80022c8 <main+0xb38>)
 8002206:	482f      	ldr	r0, [pc, #188]	; (80022c4 <main+0xb34>)
 8002208:	f000 ff48 	bl	800309c <SSD1306_Puts>

					  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && BlueMenu == 0){
 800220c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002210:	482e      	ldr	r0, [pc, #184]	; (80022cc <main+0xb3c>)
 8002212:	f003 f93f 	bl	8005494 <HAL_GPIO_ReadPin>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <main+0xaac>
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <main+0xb64>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <main+0xaac>
						while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002224:	bf00      	nop
 8002226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800222a:	4828      	ldr	r0, [pc, #160]	; (80022cc <main+0xb3c>)
 800222c:	f003 f932 	bl	8005494 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f7      	beq.n	8002226 <main+0xa96>
						BlueMenu = 1;
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <main+0xb64>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
					  }
					  if(BlueMenu){
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <main+0xb64>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80f9 	beq.w	8002438 <main+0xca8>
						SubMenuDeniedFlag = 1;
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <main+0xb44>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
						if(EncRotRig == 1)Blue++;
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <main+0xb48>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <main+0xad0>
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <main+0xb60>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <main+0xb60>)
 800225e:	701a      	strb	r2, [r3, #0]
						if(EncRotLft == 1)Blue--;
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <main+0xb4c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <main+0xae4>
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <main+0xb60>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <main+0xb60>)
 8002272:	701a      	strb	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && BlueMenu == 1){
 8002274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002278:	4814      	ldr	r0, [pc, #80]	; (80022cc <main+0xb3c>)
 800227a:	f003 f90b 	bl	8005494 <HAL_GPIO_ReadPin>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 80d9 	bne.w	8002438 <main+0xca8>
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <main+0xb64>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	f040 80d4 	bne.w	8002438 <main+0xca8>
						  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002290:	bf00      	nop
 8002292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002296:	480d      	ldr	r0, [pc, #52]	; (80022cc <main+0xb3c>)
 8002298:	f003 f8fc 	bl	8005494 <HAL_GPIO_ReadPin>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f7      	beq.n	8002292 <main+0xb02>
						  //WRITE_FLASH(0x0807FFF2, 0xFF);
						  WRITE_FLASH(0x0807FFF2, Blue);
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <main+0xb60>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	4813      	ldr	r0, [pc, #76]	; (80022f8 <main+0xb68>)
 80022aa:	f7ff f94d 	bl	8001548 <WRITE_FLASH>
						  BlueMenu = 0;
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <main+0xb64>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
						  SubMenuDeniedFlag = 0;
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <main+0xb44>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
						}
					  }

				  break;
 80022ba:	e0bd      	b.n	8002438 <main+0xca8>
 80022bc:	20000664 	.word	0x20000664
 80022c0:	0800e6b8 	.word	0x0800e6b8
 80022c4:	2000065c 	.word	0x2000065c
 80022c8:	20000004 	.word	0x20000004
 80022cc:	40020000 	.word	0x40020000
 80022d0:	2000066c 	.word	0x2000066c
 80022d4:	20000671 	.word	0x20000671
 80022d8:	20000648 	.word	0x20000648
 80022dc:	20000649 	.word	0x20000649
 80022e0:	0807fff0 	.word	0x0807fff0
 80022e4:	20000665 	.word	0x20000665
 80022e8:	2000066d 	.word	0x2000066d
 80022ec:	0807fff1 	.word	0x0807fff1
 80022f0:	20000666 	.word	0x20000666
 80022f4:	2000066e 	.word	0x2000066e
 80022f8:	0807fff2 	.word	0x0807fff2
				  case(3):
						sprintf(DisplayText, "%d", LedBrightness);
 80022fc:	4b9f      	ldr	r3, [pc, #636]	; (800257c <main+0xdec>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	499f      	ldr	r1, [pc, #636]	; (8002580 <main+0xdf0>)
 8002304:	489f      	ldr	r0, [pc, #636]	; (8002584 <main+0xdf4>)
 8002306:	f00b fd03 	bl	800dd10 <siprintf>
						SSD1306_GotoXY(92, 10);
 800230a:	210a      	movs	r1, #10
 800230c:	205c      	movs	r0, #92	; 0x5c
 800230e:	f000 fe2f 	bl	8002f70 <SSD1306_GotoXY>
						SSD1306_Puts(DisplayText, &Font_7x10, SSD1306_COLOR_BLACK);
 8002312:	2200      	movs	r2, #0
 8002314:	499c      	ldr	r1, [pc, #624]	; (8002588 <main+0xdf8>)
 8002316:	489b      	ldr	r0, [pc, #620]	; (8002584 <main+0xdf4>)
 8002318:	f000 fec0 	bl	800309c <SSD1306_Puts>

					  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && BrMenu == 0){
 800231c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002320:	489a      	ldr	r0, [pc, #616]	; (800258c <main+0xdfc>)
 8002322:	f003 f8b7 	bl	8005494 <HAL_GPIO_ReadPin>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10f      	bne.n	800234c <main+0xbbc>
 800232c:	4b98      	ldr	r3, [pc, #608]	; (8002590 <main+0xe00>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <main+0xbbc>
						while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002334:	bf00      	nop
 8002336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233a:	4894      	ldr	r0, [pc, #592]	; (800258c <main+0xdfc>)
 800233c:	f003 f8aa 	bl	8005494 <HAL_GPIO_ReadPin>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f7      	beq.n	8002336 <main+0xba6>
						BrMenu = 1;
 8002346:	4b92      	ldr	r3, [pc, #584]	; (8002590 <main+0xe00>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
					  }
					  if(BrMenu){
 800234c:	4b90      	ldr	r3, [pc, #576]	; (8002590 <main+0xe00>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d073      	beq.n	800243c <main+0xcac>
						SubMenuDeniedFlag = 1;
 8002354:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <main+0xe04>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
						if(EncRotRig == 1)LedBrightness++;
 800235a:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <main+0xe08>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <main+0xbde>
 8002362:	4b86      	ldr	r3, [pc, #536]	; (800257c <main+0xdec>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b84      	ldr	r3, [pc, #528]	; (800257c <main+0xdec>)
 800236c:	701a      	strb	r2, [r3, #0]
						if(EncRotLft == 1)LedBrightness--;
 800236e:	4b8b      	ldr	r3, [pc, #556]	; (800259c <main+0xe0c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <main+0xbf2>
 8002376:	4b81      	ldr	r3, [pc, #516]	; (800257c <main+0xdec>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	3b01      	subs	r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b7f      	ldr	r3, [pc, #508]	; (800257c <main+0xdec>)
 8002380:	701a      	strb	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && BrMenu == 1){
 8002382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002386:	4881      	ldr	r0, [pc, #516]	; (800258c <main+0xdfc>)
 8002388:	f003 f884 	bl	8005494 <HAL_GPIO_ReadPin>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d154      	bne.n	800243c <main+0xcac>
 8002392:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <main+0xe00>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d150      	bne.n	800243c <main+0xcac>
						  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 800239a:	bf00      	nop
 800239c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a0:	487a      	ldr	r0, [pc, #488]	; (800258c <main+0xdfc>)
 80023a2:	f003 f877 	bl	8005494 <HAL_GPIO_ReadPin>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f7      	beq.n	800239c <main+0xc0c>
						  //WRITE_FLASH(0x0807FFF3, 0xFF);
						  WRITE_FLASH(0x0807FFF3, LedBrightness);
 80023ac:	4b73      	ldr	r3, [pc, #460]	; (800257c <main+0xdec>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	487b      	ldr	r0, [pc, #492]	; (80025a0 <main+0xe10>)
 80023b4:	f7ff f8c8 	bl	8001548 <WRITE_FLASH>
						  BrMenu = 0;
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <main+0xe00>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
						  SubMenuDeniedFlag = 0;
 80023be:	4b75      	ldr	r3, [pc, #468]	; (8002594 <main+0xe04>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
						}
					  }
				  break;
 80023c4:	e03a      	b.n	800243c <main+0xcac>
				  case(4):
						SSD1306_GotoXY(90, 20);
 80023c6:	2114      	movs	r1, #20
 80023c8:	205a      	movs	r0, #90	; 0x5a
 80023ca:	f000 fdd1 	bl	8002f70 <SSD1306_GotoXY>
						SSD1306_Puts("BACK", &Font_7x10, SSD1306_COLOR_BLACK);
 80023ce:	2200      	movs	r2, #0
 80023d0:	496d      	ldr	r1, [pc, #436]	; (8002588 <main+0xdf8>)
 80023d2:	4874      	ldr	r0, [pc, #464]	; (80025a4 <main+0xe14>)
 80023d4:	f000 fe62 	bl	800309c <SSD1306_Puts>
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET && SubMenu == 1){
 80023d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023dc:	486b      	ldr	r0, [pc, #428]	; (800258c <main+0xdfc>)
 80023de:	f003 f859 	bl	8005494 <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d12b      	bne.n	8002440 <main+0xcb0>
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <main+0xe18>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d127      	bne.n	8002440 <main+0xcb0>
							while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80023f0:	bf00      	nop
 80023f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f6:	4865      	ldr	r0, [pc, #404]	; (800258c <main+0xdfc>)
 80023f8:	f003 f84c 	bl	8005494 <HAL_GPIO_ReadPin>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f7      	beq.n	80023f2 <main+0xc62>
							//WRITE_FLASH(0x0807FFF4, 0xFF);
							ArgbMode = 1;
 8002402:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <main+0xe1c>)
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
							WRITE_FLASH(0x0807FFF4, ArgbMode);
 8002408:	4b68      	ldr	r3, [pc, #416]	; (80025ac <main+0xe1c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	4868      	ldr	r0, [pc, #416]	; (80025b0 <main+0xe20>)
 8002410:	f7ff f89a 	bl	8001548 <WRITE_FLASH>
							SubMenu = !SubMenu;
 8002414:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <main+0xe18>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	4b60      	ldr	r3, [pc, #384]	; (80025a8 <main+0xe18>)
 8002426:	701a      	strb	r2, [r3, #0]
							MenuDeniedFlag = 0;
 8002428:	4b62      	ldr	r3, [pc, #392]	; (80025b4 <main+0xe24>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
						}
				  break;
 800242e:	e007      	b.n	8002440 <main+0xcb0>
				  break;
 8002430:	bf00      	nop
 8002432:	e10d      	b.n	8002650 <main+0xec0>
				  break;
 8002434:	bf00      	nop
 8002436:	e10b      	b.n	8002650 <main+0xec0>
				  break;
 8002438:	bf00      	nop
 800243a:	e109      	b.n	8002650 <main+0xec0>
				  break;
 800243c:	bf00      	nop
 800243e:	e107      	b.n	8002650 <main+0xec0>
				  break;
 8002440:	bf00      	nop
				}
			}
		  break;
 8002442:	e105      	b.n	8002650 <main+0xec0>
		  case(2):
			SSD1306_GotoXY(90, 10);
 8002444:	210a      	movs	r1, #10
 8002446:	205a      	movs	r0, #90	; 0x5a
 8002448:	f000 fd92 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("Efct", &Font_7x10, SSD1306_COLOR_BLACK);
 800244c:	2200      	movs	r2, #0
 800244e:	494e      	ldr	r1, [pc, #312]	; (8002588 <main+0xdf8>)
 8002450:	4859      	ldr	r0, [pc, #356]	; (80025b8 <main+0xe28>)
 8002452:	f000 fe23 	bl	800309c <SSD1306_Puts>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 8002456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800245a:	484c      	ldr	r0, [pc, #304]	; (800258c <main+0xdfc>)
 800245c:	f003 f81a 	bl	8005494 <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 80f6 	bne.w	8002654 <main+0xec4>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 8002468:	bf00      	nop
 800246a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800246e:	4847      	ldr	r0, [pc, #284]	; (800258c <main+0xdfc>)
 8002470:	f003 f810 	bl	8005494 <HAL_GPIO_ReadPin>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f7      	beq.n	800246a <main+0xcda>
				ArgbMode = 0;
 800247a:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <main+0xe1c>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
				//WRITE_FLASH(0x0807FFF4, 0xFF);
				WRITE_FLASH(0x0807FFF4, ArgbMode);
 8002480:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <main+0xe1c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	484a      	ldr	r0, [pc, #296]	; (80025b0 <main+0xe20>)
 8002488:	f7ff f85e 	bl	8001548 <WRITE_FLASH>
			}
		  break;
 800248c:	e0e2      	b.n	8002654 <main+0xec4>
		  case(3):
			SSD1306_GotoXY(45, 20);
 800248e:	2114      	movs	r1, #20
 8002490:	202d      	movs	r0, #45	; 0x2d
 8002492:	f000 fd6d 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("Norm", &Font_7x10, SSD1306_COLOR_BLACK);
 8002496:	2200      	movs	r2, #0
 8002498:	493b      	ldr	r1, [pc, #236]	; (8002588 <main+0xdf8>)
 800249a:	4848      	ldr	r0, [pc, #288]	; (80025bc <main+0xe2c>)
 800249c:	f000 fdfe 	bl	800309c <SSD1306_Puts>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 80024a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a4:	4839      	ldr	r0, [pc, #228]	; (800258c <main+0xdfc>)
 80024a6:	f002 fff5 	bl	8005494 <HAL_GPIO_ReadPin>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 80d3 	bne.w	8002658 <main+0xec8>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80024b2:	bf00      	nop
 80024b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b8:	4834      	ldr	r0, [pc, #208]	; (800258c <main+0xdfc>)
 80024ba:	f002 ffeb 	bl	8005494 <HAL_GPIO_ReadPin>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f7      	beq.n	80024b4 <main+0xd24>
				SwitchMode = 1;
 80024c4:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <main+0xe30>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
				//WRITE_FLASH(0x0807FFF5, 0xFF);
				WRITE_FLASH(0x0807FFF5, SwitchMode);
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <main+0xe30>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	483c      	ldr	r0, [pc, #240]	; (80025c4 <main+0xe34>)
 80024d2:	f7ff f839 	bl	8001548 <WRITE_FLASH>
			}
		  break;
 80024d6:	e0bf      	b.n	8002658 <main+0xec8>
		  case(4):
			SSD1306_GotoXY(90, 20);
 80024d8:	2114      	movs	r1, #20
 80024da:	205a      	movs	r0, #90	; 0x5a
 80024dc:	f000 fd48 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("Rapid", &Font_7x10, SSD1306_COLOR_BLACK);
 80024e0:	2200      	movs	r2, #0
 80024e2:	4929      	ldr	r1, [pc, #164]	; (8002588 <main+0xdf8>)
 80024e4:	4838      	ldr	r0, [pc, #224]	; (80025c8 <main+0xe38>)
 80024e6:	f000 fdd9 	bl	800309c <SSD1306_Puts>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 80024ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ee:	4827      	ldr	r0, [pc, #156]	; (800258c <main+0xdfc>)
 80024f0:	f002 ffd0 	bl	8005494 <HAL_GPIO_ReadPin>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80b0 	bne.w	800265c <main+0xecc>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET);
 80024fc:	bf00      	nop
 80024fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002502:	4822      	ldr	r0, [pc, #136]	; (800258c <main+0xdfc>)
 8002504:	f002 ffc6 	bl	8005494 <HAL_GPIO_ReadPin>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f7      	beq.n	80024fe <main+0xd6e>
				SwitchMode = 0;
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <main+0xe30>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
				//WRITE_FLASH(0x0807FFF5, 0xFF);
				WRITE_FLASH(0x0807FFF5, SwitchMode);
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <main+0xe30>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	482a      	ldr	r0, [pc, #168]	; (80025c4 <main+0xe34>)
 800251c:	f7ff f814 	bl	8001548 <WRITE_FLASH>
			}
		  break;
 8002520:	e09c      	b.n	800265c <main+0xecc>
*/
	else{
/*
 * Lock keys indication
*/
		uint8_t *getData = USBD_HID_GetData();
 8002522:	f009 fd2d 	bl	800bf80 <USBD_HID_GetData>
 8002526:	4603      	mov	r3, r0
 8002528:	603b      	str	r3, [r7, #0]
		if((getData[0] & (uint8_t)(1<<L_NUMLOCK)) == (1<<L_NUMLOCK)){
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <main+0xdba>
			SSD1306_GotoXY(0, 0);
 8002536:	2100      	movs	r1, #0
 8002538:	2000      	movs	r0, #0
 800253a:	f000 fd19 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("Num-ON", &Font_7x10, SSD1306_COLOR_WHITE);
 800253e:	2201      	movs	r2, #1
 8002540:	4911      	ldr	r1, [pc, #68]	; (8002588 <main+0xdf8>)
 8002542:	4822      	ldr	r0, [pc, #136]	; (80025cc <main+0xe3c>)
 8002544:	f000 fdaa 	bl	800309c <SSD1306_Puts>
 8002548:	e008      	b.n	800255c <main+0xdcc>
		}
		else{
			SSD1306_GotoXY(0, 0);
 800254a:	2100      	movs	r1, #0
 800254c:	2000      	movs	r0, #0
 800254e:	f000 fd0f 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("Num-OFF", &Font_7x10, SSD1306_COLOR_WHITE);
 8002552:	2201      	movs	r2, #1
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <main+0xdf8>)
 8002556:	481e      	ldr	r0, [pc, #120]	; (80025d0 <main+0xe40>)
 8002558:	f000 fda0 	bl	800309c <SSD1306_Puts>
		}
		if((getData[0] & (uint8_t)(1<<L_CAPSLOCK)) == (1<<L_CAPSLOCK)){
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d037      	beq.n	80025d8 <main+0xe48>
			SSD1306_GotoXY(64, 0);
 8002568:	2100      	movs	r1, #0
 800256a:	2040      	movs	r0, #64	; 0x40
 800256c:	f000 fd00 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("Caps-ON", &Font_7x10, SSD1306_COLOR_WHITE);
 8002570:	2201      	movs	r2, #1
 8002572:	4905      	ldr	r1, [pc, #20]	; (8002588 <main+0xdf8>)
 8002574:	4817      	ldr	r0, [pc, #92]	; (80025d4 <main+0xe44>)
 8002576:	f000 fd91 	bl	800309c <SSD1306_Puts>
 800257a:	e036      	b.n	80025ea <main+0xe5a>
 800257c:	20000667 	.word	0x20000667
 8002580:	0800e6b8 	.word	0x0800e6b8
 8002584:	2000065c 	.word	0x2000065c
 8002588:	20000004 	.word	0x20000004
 800258c:	40020000 	.word	0x40020000
 8002590:	2000066f 	.word	0x2000066f
 8002594:	20000671 	.word	0x20000671
 8002598:	20000648 	.word	0x20000648
 800259c:	20000649 	.word	0x20000649
 80025a0:	0807fff3 	.word	0x0807fff3
 80025a4:	0800e6c8 	.word	0x0800e6c8
 80025a8:	20000670 	.word	0x20000670
 80025ac:	20000668 	.word	0x20000668
 80025b0:	0807fff4 	.word	0x0807fff4
 80025b4:	2000066b 	.word	0x2000066b
 80025b8:	0800e694 	.word	0x0800e694
 80025bc:	0800e6a4 	.word	0x0800e6a4
 80025c0:	20000669 	.word	0x20000669
 80025c4:	0807fff5 	.word	0x0807fff5
 80025c8:	0800e6ac 	.word	0x0800e6ac
 80025cc:	0800e6d0 	.word	0x0800e6d0
 80025d0:	0800e6d8 	.word	0x0800e6d8
 80025d4:	0800e6e0 	.word	0x0800e6e0
		}
		else{
			SSD1306_GotoXY(64, 0);
 80025d8:	2100      	movs	r1, #0
 80025da:	2040      	movs	r0, #64	; 0x40
 80025dc:	f000 fcc8 	bl	8002f70 <SSD1306_GotoXY>
			SSD1306_Puts("Caps-OFF", &Font_7x10, SSD1306_COLOR_WHITE);
 80025e0:	2201      	movs	r2, #1
 80025e2:	4935      	ldr	r1, [pc, #212]	; (80026b8 <main+0xf28>)
 80025e4:	4835      	ldr	r0, [pc, #212]	; (80026bc <main+0xf2c>)
 80025e6:	f000 fd59 	bl	800309c <SSD1306_Puts>
		}
/*
 * Volume Up/Down
*/
		if(EncRotRig == 1){
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <main+0xf30>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <main+0xe6e>
			MediaReport[0] = 0x02;// Report Custom Media ID
 80025f2:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <main+0xf34>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
			MediaReport[1] = 0x04;//40;//81;
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <main+0xf34>)
 80025fa:	2204      	movs	r2, #4
 80025fc:	705a      	strb	r2, [r3, #1]
		}
		if(EncRotLft == 1){
 80025fe:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <main+0xf38>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d105      	bne.n	8002612 <main+0xe82>
			MediaReport[0] = 0x02;
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <main+0xf34>)
 8002608:	2202      	movs	r2, #2
 800260a:	701a      	strb	r2, [r3, #0]
			MediaReport[1] = 0x08;//80;
 800260c:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <main+0xf34>)
 800260e:	2208      	movs	r2, #8
 8002610:	705a      	strb	r2, [r3, #1]
		}
/*
* Brightness Increment/Decrement (Only for main selected screen)
*/
		if(FnBtnState == 1 && EncRotRig == 1){
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <main+0xf3c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d109      	bne.n	800262e <main+0xe9e>
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <main+0xf30>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <main+0xe9e>
			MediaReport[0] = 0x02;
 8002622:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <main+0xf34>)
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]
			MediaReport[1] = 0x01;//E9;
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <main+0xf34>)
 800262a:	2201      	movs	r2, #1
 800262c:	705a      	strb	r2, [r3, #1]
		}
		if(FnBtnState == 1 && EncRotLft == 1){
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <main+0xf3c>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d113      	bne.n	800265e <main+0xece>
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <main+0xf38>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10f      	bne.n	800265e <main+0xece>
			MediaReport[0] = 0x02;
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <main+0xf34>)
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
			MediaReport[1] = 0x02;//EA;
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <main+0xf34>)
 8002646:	2202      	movs	r2, #2
 8002648:	705a      	strb	r2, [r3, #1]
 800264a:	e008      	b.n	800265e <main+0xece>
		  break;
 800264c:	bf00      	nop
 800264e:	e006      	b.n	800265e <main+0xece>
		  break;
 8002650:	bf00      	nop
 8002652:	e004      	b.n	800265e <main+0xece>
		  break;
 8002654:	bf00      	nop
 8002656:	e002      	b.n	800265e <main+0xece>
		  break;
 8002658:	bf00      	nop
 800265a:	e000      	b.n	800265e <main+0xece>
		  break;
 800265c:	bf00      	nop
	}

/*
 * Send Media Report
*/
	HAL_Delay(USBD_HID_GetPollingInterval());									// Wait some interval to avoid reports overlapping
 800265e:	f009 fc20 	bl	800bea2 <USBD_HID_GetPollingInterval>
 8002662:	4603      	mov	r3, r0
 8002664:	4618      	mov	r0, r3
 8002666:	f001 fa15 	bl	8003a94 <HAL_Delay>
	USBD_HID_SendReport(&hUsbDeviceFS, &MediaReport, 2);						// Send report
 800266a:	2202      	movs	r2, #2
 800266c:	4915      	ldr	r1, [pc, #84]	; (80026c4 <main+0xf34>)
 800266e:	4818      	ldr	r0, [pc, #96]	; (80026d0 <main+0xf40>)
 8002670:	f009 fbf4 	bl	800be5c <USBD_HID_SendReport>
	MediaReport[1] = 0x00;														// Clear Media Report
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <main+0xf34>)
 8002676:	2200      	movs	r2, #0
 8002678:	705a      	strb	r2, [r3, #1]

    FnBtnState = 0;																// Reset Fn state
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <main+0xf3c>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]

	SSD1306_UpdateScreen();														// Show data
 8002680:	f000 fbd0 	bl	8002e24 <SSD1306_UpdateScreen>
	SSD1306_Fill(SSD1306_COLOR_BLACK);											// Clear display for next info
 8002684:	2000      	movs	r0, #0
 8002686:	f000 fbfb 	bl	8002e80 <SSD1306_Fill>

/*
 * ARGB handling
*/
	ARGB_SetBrightness(LedBrightness);
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <main+0xf44>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe faf8 	bl	8000c84 <ARGB_SetBrightness>
	if(ArgbMode == 1){
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <main+0xf48>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <main+0xf1e>
		// Solid color
		ARGB_FillRGB(Red, Green, Blue);
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <main+0xf4c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <main+0xf50>)
 80026a2:	7811      	ldrb	r1, [r2, #0]
 80026a4:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <main+0xf54>)
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fb79 	bl	8000da0 <ARGB_FillRGB>
	}
	else if(ArgbMode == 0){
		// Some LGTVCOMMUNITY effect
		//In progress
	}
	ARGB_Show();
 80026ae:	f7fe fb99 	bl	8000de4 <ARGB_Show>
  {
 80026b2:	f7ff b8d3 	b.w	800185c <main+0xcc>
 80026b6:	bf00      	nop
 80026b8:	20000004 	.word	0x20000004
 80026bc:	0800e6e8 	.word	0x0800e6e8
 80026c0:	20000648 	.word	0x20000648
 80026c4:	20000658 	.word	0x20000658
 80026c8:	20000649 	.word	0x20000649
 80026cc:	2000064a 	.word	0x2000064a
 80026d0:	200008a8 	.word	0x200008a8
 80026d4:	20000667 	.word	0x20000667
 80026d8:	20000668 	.word	0x20000668
 80026dc:	20000664 	.word	0x20000664
 80026e0:	20000665 	.word	0x20000665
 80026e4:	20000666 	.word	0x20000666

080026e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b094      	sub	sp, #80	; 0x50
 80026ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	2230      	movs	r2, #48	; 0x30
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f00b fb2a 	bl	800dd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <SystemClock_Config+0xc8>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <SystemClock_Config+0xc8>)
 8002716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271a:	6413      	str	r3, [r2, #64]	; 0x40
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <SystemClock_Config+0xc8>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <SystemClock_Config+0xcc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <SystemClock_Config+0xcc>)
 8002732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <SystemClock_Config+0xcc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002744:	2301      	movs	r3, #1
 8002746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800274e:	2302      	movs	r3, #2
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002758:	2319      	movs	r3, #25
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800275c:	23c0      	movs	r3, #192	; 0xc0
 800275e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002760:	2302      	movs	r3, #2
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002764:	2304      	movs	r3, #4
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002768:	f107 0320 	add.w	r3, r7, #32
 800276c:	4618      	mov	r0, r3
 800276e:	f006 fa47 	bl	8008c00 <HAL_RCC_OscConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002778:	f000 fa22 	bl	8002bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800277c:	230f      	movs	r3, #15
 800277e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	2103      	movs	r1, #3
 8002798:	4618      	mov	r0, r3
 800279a:	f006 fca9 	bl	80090f0 <HAL_RCC_ClockConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027a4:	f000 fa0c 	bl	8002bc0 <Error_Handler>
  }
}
 80027a8:	bf00      	nop
 80027aa:	3750      	adds	r7, #80	; 0x50
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000

080027b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027be:	463b      	mov	r3, r7
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <MX_ADC1_Init+0x78>)
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <MX_ADC1_Init+0x7c>)
 80027ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <MX_ADC1_Init+0x78>)
 80027d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <MX_ADC1_Init+0x78>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <MX_ADC1_Init+0x78>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_ADC1_Init+0x78>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <MX_ADC1_Init+0x78>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <MX_ADC1_Init+0x78>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <MX_ADC1_Init+0x78>)
 80027fa:	4a0f      	ldr	r2, [pc, #60]	; (8002838 <MX_ADC1_Init+0x80>)
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_ADC1_Init+0x78>)
 8002800:	2200      	movs	r2, #0
 8002802:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <MX_ADC1_Init+0x78>)
 8002806:	2201      	movs	r2, #1
 8002808:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_ADC1_Init+0x78>)
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <MX_ADC1_Init+0x78>)
 8002814:	2201      	movs	r2, #1
 8002816:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <MX_ADC1_Init+0x78>)
 800281a:	f001 f95f 	bl	8003adc <HAL_ADC_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002824:	f000 f9cc 	bl	8002bc0 <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200003fc 	.word	0x200003fc
 8002834:	40012000 	.word	0x40012000
 8002838:	0f000001 	.word	0x0f000001

0800283c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <MX_I2C1_Init+0x50>)
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <MX_I2C1_Init+0x54>)
 8002844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_I2C1_Init+0x50>)
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <MX_I2C1_Init+0x58>)
 800284a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_I2C1_Init+0x50>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_I2C1_Init+0x50>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_I2C1_Init+0x50>)
 800285a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800285e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <MX_I2C1_Init+0x50>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_I2C1_Init+0x50>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <MX_I2C1_Init+0x50>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <MX_I2C1_Init+0x50>)
 8002874:	2200      	movs	r2, #0
 8002876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002878:	4804      	ldr	r0, [pc, #16]	; (800288c <MX_I2C1_Init+0x50>)
 800287a:	f002 fe3d 	bl	80054f8 <HAL_I2C_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002884:	f000 f99c 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	200004a4 	.word	0x200004a4
 8002890:	40005400 	.word	0x40005400
 8002894:	00061a80 	.word	0x00061a80

08002898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b096      	sub	sp, #88	; 0x58
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800289e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	615a      	str	r2, [r3, #20]
 80028c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2220      	movs	r2, #32
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f00b fa3d 	bl	800dd50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <MX_TIM1_Init+0x138>)
 80028d8:	4a3e      	ldr	r2, [pc, #248]	; (80029d4 <MX_TIM1_Init+0x13c>)
 80028da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028dc:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <MX_TIM1_Init+0x138>)
 80028de:	2200      	movs	r2, #0
 80028e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <MX_TIM1_Init+0x138>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80028e8:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <MX_TIM1_Init+0x138>)
 80028ea:	2259      	movs	r2, #89	; 0x59
 80028ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <MX_TIM1_Init+0x138>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <MX_TIM1_Init+0x138>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fa:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <MX_TIM1_Init+0x138>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002900:	4833      	ldr	r0, [pc, #204]	; (80029d0 <MX_TIM1_Init+0x138>)
 8002902:	f006 fdc1 	bl	8009488 <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800290c:	f000 f958 	bl	8002bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002914:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002916:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800291a:	4619      	mov	r1, r3
 800291c:	482c      	ldr	r0, [pc, #176]	; (80029d0 <MX_TIM1_Init+0x138>)
 800291e:	f007 f851 	bl	80099c4 <HAL_TIM_ConfigClockSource>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002928:	f000 f94a 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800292c:	4828      	ldr	r0, [pc, #160]	; (80029d0 <MX_TIM1_Init+0x138>)
 800292e:	f006 fdfa 	bl	8009526 <HAL_TIM_PWM_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002938:	f000 f942 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002948:	4619      	mov	r1, r3
 800294a:	4821      	ldr	r0, [pc, #132]	; (80029d0 <MX_TIM1_Init+0x138>)
 800294c:	f007 fc20 	bl	800a190 <HAL_TIMEx_MasterConfigSynchronization>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002956:	f000 f933 	bl	8002bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800295a:	2360      	movs	r3, #96	; 0x60
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002966:	2300      	movs	r3, #0
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297a:	2204      	movs	r2, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4814      	ldr	r0, [pc, #80]	; (80029d0 <MX_TIM1_Init+0x138>)
 8002980:	f006 ff5e 	bl	8009840 <HAL_TIM_PWM_ConfigChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800298a:	f000 f919 	bl	8002bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4807      	ldr	r0, [pc, #28]	; (80029d0 <MX_TIM1_Init+0x138>)
 80029b2:	f007 fc5b 	bl	800a26c <HAL_TIMEx_ConfigBreakDeadTime>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80029bc:	f000 f900 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <MX_TIM1_Init+0x138>)
 80029c2:	f000 feed 	bl	80037a0 <HAL_TIM_MspPostInit>

}
 80029c6:	bf00      	nop
 80029c8:	3758      	adds	r7, #88	; 0x58
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000558 	.word	0x20000558
 80029d4:	40010000 	.word	0x40010000

080029d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f00b f9b2 	bl	800dd50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <MX_TIM3_Init+0xa0>)
 80029f6:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <MX_TIM3_Init+0xa4>)
 80029f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <MX_TIM3_Init+0xa0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a22:	2301      	movs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a32:	2301      	movs	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	4619      	mov	r1, r3
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a46:	f006 fdc7 	bl	80095d8 <HAL_TIM_Encoder_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a50:	f000 f8b6 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a62:	f007 fb95 	bl	800a190 <HAL_TIMEx_MasterConfigSynchronization>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a6c:	f000 f8a8 	bl	8002bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a70:	bf00      	nop
 8002a72:	3730      	adds	r7, #48	; 0x30
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200005a0 	.word	0x200005a0
 8002a7c:	40000400 	.word	0x40000400

08002a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <MX_DMA_Init+0x78>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <MX_DMA_Init+0x78>)
 8002a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <MX_DMA_Init+0x78>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <MX_DMA_Init+0x78>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <MX_DMA_Init+0x78>)
 8002aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <MX_DMA_Init+0x78>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2011      	movs	r0, #17
 8002ac4:	f001 fca3 	bl	800440e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ac8:	2011      	movs	r0, #17
 8002aca:	f001 fcbc 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	203a      	movs	r0, #58	; 0x3a
 8002ad4:	f001 fc9b 	bl	800440e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002ad8:	203a      	movs	r0, #58	; 0x3a
 8002ada:	f001 fcb4 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	203c      	movs	r0, #60	; 0x3c
 8002ae4:	f001 fc93 	bl	800440e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002ae8:	203c      	movs	r0, #60	; 0x3c
 8002aea:	f001 fcac 	bl	8004446 <HAL_NVIC_EnableIRQ>

}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a26      	ldr	r2, [pc, #152]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <MX_GPIO_Init+0xb8>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SELECT3_Pin|SELECT2_Pin|SELECT1_Pin|SELECT0_Pin, GPIO_PIN_RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002b6c:	4812      	ldr	r0, [pc, #72]	; (8002bb8 <MX_GPIO_Init+0xbc>)
 8002b6e:	f002 fca9 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SELECT3_Pin SELECT2_Pin SELECT1_Pin SELECT0_Pin */
  GPIO_InitStruct.Pin = SELECT3_Pin|SELECT2_Pin|SELECT1_Pin|SELECT0_Pin;
 8002b72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	4619      	mov	r1, r3
 8002b8a:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <MX_GPIO_Init+0xbc>)
 8002b8c:	f002 fafe 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8002b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_GPIO_Init+0xc0>)
 8002ba6:	f002 faf1 	bl	800518c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002baa:	bf00      	nop
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020400 	.word	0x40020400
 8002bbc:	40020000 	.word	0x40020000

08002bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc4:	b672      	cpsid	i
}
 8002bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <Error_Handler+0x8>

08002bca <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	81fb      	strh	r3, [r7, #14]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	81bb      	strh	r3, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be4:	3307      	adds	r3, #7
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	da00      	bge.n	8002bec <SSD1306_DrawBitmap+0x22>
 8002bea:	3307      	adds	r3, #7
 8002bec:	10db      	asrs	r3, r3, #3
 8002bee:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	82bb      	strh	r3, [r7, #20]
 8002bf8:	e044      	b.n	8002c84 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	827b      	strh	r3, [r7, #18]
 8002bfe:	e02f      	b.n	8002c60 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002c00:	8a7b      	ldrh	r3, [r7, #18]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	75fb      	strb	r3, [r7, #23]
 8002c10:	e012      	b.n	8002c38 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002c12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c16:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c1a:	fb03 f202 	mul.w	r2, r3, r2
 8002c1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da00      	bge.n	8002c28 <SSD1306_DrawBitmap+0x5e>
 8002c26:	3307      	adds	r3, #7
 8002c28:	10db      	asrs	r3, r3, #3
 8002c2a:	b21b      	sxth	r3, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4413      	add	r3, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	75fb      	strb	r3, [r7, #23]
            }

            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da09      	bge.n	8002c54 <SSD1306_DrawBitmap+0x8a>
 8002c40:	89fa      	ldrh	r2, [r7, #14]
 8002c42:	8a7b      	ldrh	r3, [r7, #18]
 8002c44:	4413      	add	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	89b9      	ldrh	r1, [r7, #12]
 8002c4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f92e 	bl	8002eb0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002c54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	827b      	strh	r3, [r7, #18]
 8002c60:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbc9      	blt.n	8002c00 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002c6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	82bb      	strh	r3, [r7, #20]
 8002c78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	81bb      	strh	r3, [r7, #12]
 8002c84:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dbb4      	blt.n	8002bfa <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <SSD1306_Init>:


uint8_t SSD1306_Init(void) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002ca2:	f000 fb1b 	bl	80032dc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002ca6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002caa:	2201      	movs	r2, #1
 8002cac:	2178      	movs	r1, #120	; 0x78
 8002cae:	485b      	ldr	r0, [pc, #364]	; (8002e1c <SSD1306_Init+0x180>)
 8002cb0:	f002 fe64 	bl	800597c <HAL_I2C_IsDeviceReady>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e0a9      	b.n	8002e12 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002cbe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002cc2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cc4:	e002      	b.n	8002ccc <SSD1306_Init+0x30>
		p--;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f9      	bne.n	8002cc6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002cd2:	22ae      	movs	r2, #174	; 0xae
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2078      	movs	r0, #120	; 0x78
 8002cd8:	f000 fb7c 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002cdc:	2220      	movs	r2, #32
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2078      	movs	r0, #120	; 0x78
 8002ce2:	f000 fb77 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2078      	movs	r0, #120	; 0x78
 8002cec:	f000 fb72 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002cf0:	22b0      	movs	r2, #176	; 0xb0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2078      	movs	r0, #120	; 0x78
 8002cf6:	f000 fb6d 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002cfa:	22c8      	movs	r2, #200	; 0xc8
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2078      	movs	r0, #120	; 0x78
 8002d00:	f000 fb68 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	2078      	movs	r0, #120	; 0x78
 8002d0a:	f000 fb63 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002d0e:	2210      	movs	r2, #16
 8002d10:	2100      	movs	r1, #0
 8002d12:	2078      	movs	r0, #120	; 0x78
 8002d14:	f000 fb5e 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002d18:	2240      	movs	r2, #64	; 0x40
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	2078      	movs	r0, #120	; 0x78
 8002d1e:	f000 fb59 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002d22:	2281      	movs	r2, #129	; 0x81
 8002d24:	2100      	movs	r1, #0
 8002d26:	2078      	movs	r0, #120	; 0x78
 8002d28:	f000 fb54 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	2100      	movs	r1, #0
 8002d30:	2078      	movs	r0, #120	; 0x78
 8002d32:	f000 fb4f 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002d36:	22a1      	movs	r2, #161	; 0xa1
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2078      	movs	r0, #120	; 0x78
 8002d3c:	f000 fb4a 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002d40:	22a6      	movs	r2, #166	; 0xa6
 8002d42:	2100      	movs	r1, #0
 8002d44:	2078      	movs	r0, #120	; 0x78
 8002d46:	f000 fb45 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002d4a:	22a8      	movs	r2, #168	; 0xa8
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2078      	movs	r0, #120	; 0x78
 8002d50:	f000 fb40 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //0x3F for 128*64
 8002d54:	221f      	movs	r2, #31
 8002d56:	2100      	movs	r1, #0
 8002d58:	2078      	movs	r0, #120	; 0x78
 8002d5a:	f000 fb3b 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d5e:	22a4      	movs	r2, #164	; 0xa4
 8002d60:	2100      	movs	r1, #0
 8002d62:	2078      	movs	r0, #120	; 0x78
 8002d64:	f000 fb36 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002d68:	22d3      	movs	r2, #211	; 0xd3
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2078      	movs	r0, #120	; 0x78
 8002d6e:	f000 fb31 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	2078      	movs	r0, #120	; 0x78
 8002d78:	f000 fb2c 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d7c:	22d5      	movs	r2, #213	; 0xd5
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2078      	movs	r0, #120	; 0x78
 8002d82:	f000 fb27 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002d86:	22f0      	movs	r2, #240	; 0xf0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2078      	movs	r0, #120	; 0x78
 8002d8c:	f000 fb22 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002d90:	22d9      	movs	r2, #217	; 0xd9
 8002d92:	2100      	movs	r1, #0
 8002d94:	2078      	movs	r0, #120	; 0x78
 8002d96:	f000 fb1d 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002d9a:	2222      	movs	r2, #34	; 0x22
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2078      	movs	r0, #120	; 0x78
 8002da0:	f000 fb18 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002da4:	22da      	movs	r2, #218	; 0xda
 8002da6:	2100      	movs	r1, #0
 8002da8:	2078      	movs	r0, #120	; 0x78
 8002daa:	f000 fb13 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02); //0x12 for 128*64
 8002dae:	2202      	movs	r2, #2
 8002db0:	2100      	movs	r1, #0
 8002db2:	2078      	movs	r0, #120	; 0x78
 8002db4:	f000 fb0e 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002db8:	22db      	movs	r2, #219	; 0xdb
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2078      	movs	r0, #120	; 0x78
 8002dbe:	f000 fb09 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2078      	movs	r0, #120	; 0x78
 8002dc8:	f000 fb04 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002dcc:	228d      	movs	r2, #141	; 0x8d
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2078      	movs	r0, #120	; 0x78
 8002dd2:	f000 faff 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002dd6:	2214      	movs	r2, #20
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2078      	movs	r0, #120	; 0x78
 8002ddc:	f000 fafa 	bl	80033d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002de0:	22af      	movs	r2, #175	; 0xaf
 8002de2:	2100      	movs	r1, #0
 8002de4:	2078      	movs	r0, #120	; 0x78
 8002de6:	f000 faf5 	bl	80033d4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002dea:	222e      	movs	r2, #46	; 0x2e
 8002dec:	2100      	movs	r1, #0
 8002dee:	2078      	movs	r0, #120	; 0x78
 8002df0:	f000 faf0 	bl	80033d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f000 f843 	bl	8002e80 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002dfa:	f000 f813 	bl	8002e24 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <SSD1306_Init+0x184>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <SSD1306_Init+0x184>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <SSD1306_Init+0x184>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002e10:	2301      	movs	r3, #1
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200004a4 	.word	0x200004a4
 8002e20:	20000874 	.word	0x20000874

08002e24 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	71fb      	strb	r3, [r7, #7]
 8002e2e:	e01d      	b.n	8002e6c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	3b50      	subs	r3, #80	; 0x50
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	2100      	movs	r1, #0
 8002e3a:	2078      	movs	r0, #120	; 0x78
 8002e3c:	f000 faca 	bl	80033d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2100      	movs	r1, #0
 8002e44:	2078      	movs	r0, #120	; 0x78
 8002e46:	f000 fac5 	bl	80033d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2078      	movs	r0, #120	; 0x78
 8002e50:	f000 fac0 	bl	80033d4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	01db      	lsls	r3, r3, #7
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <SSD1306_UpdateScreen+0x58>)
 8002e5a:	441a      	add	r2, r3
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	2078      	movs	r0, #120	; 0x78
 8002e62:	f000 fa51 	bl	8003308 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	71fb      	strb	r3, [r7, #7]
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	2b07      	cmp	r3, #7
 8002e70:	d9de      	bls.n	8002e30 <SSD1306_UpdateScreen+0xc>
	}
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000674 	.word	0x20000674

08002e80 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <SSD1306_Fill+0x14>
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <SSD1306_Fill+0x16>
 8002e94:	23ff      	movs	r3, #255	; 0xff
 8002e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <SSD1306_Fill+0x2c>)
 8002e9e:	f00a ff57 	bl	800dd50 <memset>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000674 	.word	0x20000674

08002eb0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	80fb      	strh	r3, [r7, #6]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	80bb      	strh	r3, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	70fb      	strb	r3, [r7, #3]
	if (
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec6:	d848      	bhi.n	8002f5a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002ec8:	88bb      	ldrh	r3, [r7, #4]
 8002eca:	2b1f      	cmp	r3, #31
 8002ecc:	d845      	bhi.n	8002f5a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <SSD1306_DrawPixel+0xb8>)
 8002ed0:	791b      	ldrb	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d11a      	bne.n	8002f20 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	88bb      	ldrh	r3, [r7, #4]
 8002eee:	08db      	lsrs	r3, r3, #3
 8002ef0:	b298      	uxth	r0, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	01db      	lsls	r3, r3, #7
 8002ef6:	4413      	add	r3, r2
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <SSD1306_DrawPixel+0xbc>)
 8002efa:	5cd3      	ldrb	r3, [r2, r3]
 8002efc:	b25a      	sxtb	r2, r3
 8002efe:	88bb      	ldrh	r3, [r7, #4]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b259      	sxtb	r1, r3
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	4603      	mov	r3, r0
 8002f14:	01db      	lsls	r3, r3, #7
 8002f16:	4413      	add	r3, r2
 8002f18:	b2c9      	uxtb	r1, r1
 8002f1a:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <SSD1306_DrawPixel+0xbc>)
 8002f1c:	54d1      	strb	r1, [r2, r3]
 8002f1e:	e01d      	b.n	8002f5c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	88bb      	ldrh	r3, [r7, #4]
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	b298      	uxth	r0, r3
 8002f28:	4603      	mov	r3, r0
 8002f2a:	01db      	lsls	r3, r3, #7
 8002f2c:	4413      	add	r3, r2
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <SSD1306_DrawPixel+0xbc>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	b25a      	sxtb	r2, r3
 8002f34:	88bb      	ldrh	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	b25b      	sxtb	r3, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	4013      	ands	r3, r2
 8002f48:	b259      	sxtb	r1, r3
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	01db      	lsls	r3, r3, #7
 8002f50:	4413      	add	r3, r2
 8002f52:	b2c9      	uxtb	r1, r1
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <SSD1306_DrawPixel+0xbc>)
 8002f56:	54d1      	strb	r1, [r2, r3]
 8002f58:	e000      	b.n	8002f5c <SSD1306_DrawPixel+0xac>
		return;
 8002f5a:	bf00      	nop
	}
}
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000874 	.word	0x20000874
 8002f6c:	20000674 	.word	0x20000674

08002f70 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	460a      	mov	r2, r1
 8002f7a:	80fb      	strh	r3, [r7, #6]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002f80:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <SSD1306_GotoXY+0x28>)
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <SSD1306_GotoXY+0x28>)
 8002f88:	88bb      	ldrh	r3, [r7, #4]
 8002f8a:	8053      	strh	r3, [r2, #2]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	20000874 	.word	0x20000874

08002f9c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <SSD1306_Putc+0xfc>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
	if (
 8002fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fba:	dc07      	bgt.n	8002fcc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <SSD1306_Putc+0xfc>)
 8002fbe:	885b      	ldrh	r3, [r3, #2]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002fc8:	2b1f      	cmp	r3, #31
 8002fca:	dd01      	ble.n	8002fd0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e05e      	b.n	800308e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e04b      	b.n	800306e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	3b20      	subs	r3, #32
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	7849      	ldrb	r1, [r1, #1]
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	440b      	add	r3, r1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e030      	b.n	800305c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d010      	beq.n	800302c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <SSD1306_Putc+0xfc>)
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4413      	add	r3, r2
 8003014:	b298      	uxth	r0, r3
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <SSD1306_Putc+0xfc>)
 8003018:	885a      	ldrh	r2, [r3, #2]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4413      	add	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	79ba      	ldrb	r2, [r7, #6]
 8003024:	4619      	mov	r1, r3
 8003026:	f7ff ff43 	bl	8002eb0 <SSD1306_DrawPixel>
 800302a:	e014      	b.n	8003056 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <SSD1306_Putc+0xfc>)
 800302e:	881a      	ldrh	r2, [r3, #0]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4413      	add	r3, r2
 8003036:	b298      	uxth	r0, r3
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <SSD1306_Putc+0xfc>)
 800303a:	885a      	ldrh	r2, [r3, #2]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	b29b      	uxth	r3, r3
 8003040:	4413      	add	r3, r2
 8003042:	b299      	uxth	r1, r3
 8003044:	79bb      	ldrb	r3, [r7, #6]
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	f7ff ff2d 	bl	8002eb0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3301      	adds	r3, #1
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4293      	cmp	r3, r2
 8003066:	d3c8      	bcc.n	8002ffa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	461a      	mov	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	4293      	cmp	r3, r2
 8003078:	d3ad      	bcc.n	8002fd6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <SSD1306_Putc+0xfc>)
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	4413      	add	r3, r2
 8003086:	b29a      	uxth	r2, r3
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <SSD1306_Putc+0xfc>)
 800308a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800308c:	79fb      	ldrb	r3, [r7, #7]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000874 	.word	0x20000874

0800309c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	4613      	mov	r3, r2
 80030a8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80030aa:	e012      	b.n	80030d2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	79fa      	ldrb	r2, [r7, #7]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff71 	bl	8002f9c <SSD1306_Putc>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d002      	beq.n	80030cc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	e008      	b.n	80030de <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3301      	adds	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e8      	bne.n	80030ac <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	781b      	ldrb	r3, [r3, #0]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80030e6:	b590      	push	{r4, r7, lr}
 80030e8:	b087      	sub	sp, #28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4604      	mov	r4, r0
 80030ee:	4608      	mov	r0, r1
 80030f0:	4611      	mov	r1, r2
 80030f2:	461a      	mov	r2, r3
 80030f4:	4623      	mov	r3, r4
 80030f6:	80fb      	strh	r3, [r7, #6]
 80030f8:	4603      	mov	r3, r0
 80030fa:	80bb      	strh	r3, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]
 8003100:	4613      	mov	r3, r2
 8003102:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	2b7f      	cmp	r3, #127	; 0x7f
 8003108:	d901      	bls.n	800310e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800310a:	237f      	movs	r3, #127	; 0x7f
 800310c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	2b7f      	cmp	r3, #127	; 0x7f
 8003112:	d901      	bls.n	8003118 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8003114:	237f      	movs	r3, #127	; 0x7f
 8003116:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8003118:	88bb      	ldrh	r3, [r7, #4]
 800311a:	2b1f      	cmp	r3, #31
 800311c:	d901      	bls.n	8003122 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800311e:	231f      	movs	r3, #31
 8003120:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003122:	883b      	ldrh	r3, [r7, #0]
 8003124:	2b1f      	cmp	r3, #31
 8003126:	d901      	bls.n	800312c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8003128:	231f      	movs	r3, #31
 800312a:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	429a      	cmp	r2, r3
 8003132:	d205      	bcs.n	8003140 <SSD1306_DrawLine+0x5a>
 8003134:	887a      	ldrh	r2, [r7, #2]
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	b29b      	uxth	r3, r3
 800313c:	b21b      	sxth	r3, r3
 800313e:	e004      	b.n	800314a <SSD1306_DrawLine+0x64>
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	b21b      	sxth	r3, r3
 800314a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 800314c:	88ba      	ldrh	r2, [r7, #4]
 800314e:	883b      	ldrh	r3, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d205      	bcs.n	8003160 <SSD1306_DrawLine+0x7a>
 8003154:	883a      	ldrh	r2, [r7, #0]
 8003156:	88bb      	ldrh	r3, [r7, #4]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	b29b      	uxth	r3, r3
 800315c:	b21b      	sxth	r3, r3
 800315e:	e004      	b.n	800316a <SSD1306_DrawLine+0x84>
 8003160:	88ba      	ldrh	r2, [r7, #4]
 8003162:	883b      	ldrh	r3, [r7, #0]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	b29b      	uxth	r3, r3
 8003168:	b21b      	sxth	r3, r3
 800316a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	429a      	cmp	r2, r3
 8003172:	d201      	bcs.n	8003178 <SSD1306_DrawLine+0x92>
 8003174:	2301      	movs	r3, #1
 8003176:	e001      	b.n	800317c <SSD1306_DrawLine+0x96>
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 800317e:	88ba      	ldrh	r2, [r7, #4]
 8003180:	883b      	ldrh	r3, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d201      	bcs.n	800318a <SSD1306_DrawLine+0xa4>
 8003186:	2301      	movs	r3, #1
 8003188:	e001      	b.n	800318e <SSD1306_DrawLine+0xa8>
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8003190:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003194:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003198:	429a      	cmp	r2, r3
 800319a:	dd06      	ble.n	80031aa <SSD1306_DrawLine+0xc4>
 800319c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031a0:	0fda      	lsrs	r2, r3, #31
 80031a2:	4413      	add	r3, r2
 80031a4:	105b      	asrs	r3, r3, #1
 80031a6:	b21b      	sxth	r3, r3
 80031a8:	e006      	b.n	80031b8 <SSD1306_DrawLine+0xd2>
 80031aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031ae:	0fda      	lsrs	r2, r3, #31
 80031b0:	4413      	add	r3, r2
 80031b2:	105b      	asrs	r3, r3, #1
 80031b4:	425b      	negs	r3, r3
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80031ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d129      	bne.n	8003216 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80031c2:	883a      	ldrh	r2, [r7, #0]
 80031c4:	88bb      	ldrh	r3, [r7, #4]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d205      	bcs.n	80031d6 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80031ca:	883b      	ldrh	r3, [r7, #0]
 80031cc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80031ce:	88bb      	ldrh	r3, [r7, #4]
 80031d0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d205      	bcs.n	80031ea <SSD1306_DrawLine+0x104>
			tmp = x1;
 80031de:	887b      	ldrh	r3, [r7, #2]
 80031e0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80031e6:	893b      	ldrh	r3, [r7, #8]
 80031e8:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80031ea:	88bb      	ldrh	r3, [r7, #4]
 80031ec:	82bb      	strh	r3, [r7, #20]
 80031ee:	e00c      	b.n	800320a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80031f0:	8ab9      	ldrh	r1, [r7, #20]
 80031f2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fe59 	bl	8002eb0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80031fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003202:	b29b      	uxth	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	b29b      	uxth	r3, r3
 8003208:	82bb      	strh	r3, [r7, #20]
 800320a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800320e:	883b      	ldrh	r3, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	dded      	ble.n	80031f0 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8003214:	e05f      	b.n	80032d6 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8003216:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d129      	bne.n	8003272 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800321e:	883a      	ldrh	r2, [r7, #0]
 8003220:	88bb      	ldrh	r3, [r7, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d205      	bcs.n	8003232 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8003226:	883b      	ldrh	r3, [r7, #0]
 8003228:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800322a:	88bb      	ldrh	r3, [r7, #4]
 800322c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	429a      	cmp	r2, r3
 8003238:	d205      	bcs.n	8003246 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003242:	893b      	ldrh	r3, [r7, #8]
 8003244:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	82bb      	strh	r3, [r7, #20]
 800324a:	e00c      	b.n	8003266 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 800324c:	8abb      	ldrh	r3, [r7, #20]
 800324e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003252:	88b9      	ldrh	r1, [r7, #4]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fe2b 	bl	8002eb0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800325a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800325e:	b29b      	uxth	r3, r3
 8003260:	3301      	adds	r3, #1
 8003262:	b29b      	uxth	r3, r3
 8003264:	82bb      	strh	r3, [r7, #20]
 8003266:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	429a      	cmp	r2, r3
 800326e:	dded      	ble.n	800324c <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8003270:	e031      	b.n	80032d6 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8003272:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003276:	88b9      	ldrh	r1, [r7, #4]
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fe18 	bl	8002eb0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	429a      	cmp	r2, r3
 8003286:	d103      	bne.n	8003290 <SSD1306_DrawLine+0x1aa>
 8003288:	88ba      	ldrh	r2, [r7, #4]
 800328a:	883b      	ldrh	r3, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d021      	beq.n	80032d4 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8003290:	8afb      	ldrh	r3, [r7, #22]
 8003292:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8003294:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800329c:	425b      	negs	r3, r3
 800329e:	429a      	cmp	r2, r3
 80032a0:	dd08      	ble.n	80032b4 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80032a2:	8afa      	ldrh	r2, [r7, #22]
 80032a4:	8a3b      	ldrh	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80032ac:	89fa      	ldrh	r2, [r7, #14]
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	4413      	add	r3, r2
 80032b2:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 80032b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80032b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032bc:	429a      	cmp	r2, r3
 80032be:	dad8      	bge.n	8003272 <SSD1306_DrawLine+0x18c>
			err += dx;
 80032c0:	8afa      	ldrh	r2, [r7, #22]
 80032c2:	8a7b      	ldrh	r3, [r7, #18]
 80032c4:	4413      	add	r3, r2
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80032ca:	89ba      	ldrh	r2, [r7, #12]
 80032cc:	88bb      	ldrh	r3, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80032d2:	e7ce      	b.n	8003272 <SSD1306_DrawLine+0x18c>
			break;
 80032d4:	bf00      	nop
		}
	}
}
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <ssd1306_I2C_Init+0x28>)
 80032e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032e6:	e002      	b.n	80032ee <ssd1306_I2C_Init+0x12>
		p--;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	0003d090 	.word	0x0003d090

08003308 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b0c7      	sub	sp, #284	; 0x11c
 800330c:	af02      	add	r7, sp, #8
 800330e:	4604      	mov	r4, r0
 8003310:	4608      	mov	r0, r1
 8003312:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003316:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800331a:	600a      	str	r2, [r1, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003322:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003326:	4622      	mov	r2, r4
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800332e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003332:	4602      	mov	r2, r0
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800333a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800333e:	460a      	mov	r2, r1
 8003340:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003342:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800334a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800334e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800335c:	e015      	b.n	800338a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800335e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003362:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003366:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	441a      	add	r2, r3
 800336e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003372:	3301      	adds	r3, #1
 8003374:	7811      	ldrb	r1, [r2, #0]
 8003376:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800337a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800337e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003380:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003384:	3301      	adds	r3, #1
 8003386:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800338a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800338e:	b29b      	uxth	r3, r3
 8003390:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003394:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003398:	8812      	ldrh	r2, [r2, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d8df      	bhi.n	800335e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800339e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033a2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b299      	uxth	r1, r3
 80033aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f107 020c 	add.w	r2, r7, #12
 80033bc:	200a      	movs	r0, #10
 80033be:	9000      	str	r0, [sp, #0]
 80033c0:	4803      	ldr	r0, [pc, #12]	; (80033d0 <ssd1306_I2C_WriteMulti+0xc8>)
 80033c2:	f002 f9dd 	bl	8005780 <HAL_I2C_Master_Transmit>
}
 80033c6:	bf00      	nop
 80033c8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	200004a4 	.word	0x200004a4

080033d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
 80033de:	460b      	mov	r3, r1
 80033e0:	71bb      	strb	r3, [r7, #6]
 80033e2:	4613      	mov	r3, r2
 80033e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80033e6:	79bb      	ldrb	r3, [r7, #6]
 80033e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80033ea:	797b      	ldrb	r3, [r7, #5]
 80033ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	b299      	uxth	r1, r3
 80033f2:	f107 020c 	add.w	r2, r7, #12
 80033f6:	230a      	movs	r3, #10
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	2302      	movs	r3, #2
 80033fc:	4803      	ldr	r0, [pc, #12]	; (800340c <ssd1306_I2C_Write+0x38>)
 80033fe:	f002 f9bf 	bl	8005780 <HAL_I2C_Master_Transmit>
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200004a4 	.word	0x200004a4

08003410 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_MspInit+0x4c>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_MspInit+0x4c>)
 8003420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003424:	6453      	str	r3, [r2, #68]	; 0x44
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_MspInit+0x4c>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_MspInit+0x4c>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <HAL_MspInit+0x4c>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_MspInit+0x4c>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800

08003460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 0314 	add.w	r3, r7, #20
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a33      	ldr	r2, [pc, #204]	; (800354c <HAL_ADC_MspInit+0xec>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d160      	bne.n	8003544 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_ADC_MspInit+0xf0>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	4a31      	ldr	r2, [pc, #196]	; (8003550 <HAL_ADC_MspInit+0xf0>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	6453      	str	r3, [r2, #68]	; 0x44
 8003492:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_ADC_MspInit+0xf0>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_ADC_MspInit+0xf0>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a2a      	ldr	r2, [pc, #168]	; (8003550 <HAL_ADC_MspInit+0xf0>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_ADC_MspInit+0xf0>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = MUX5_Pin|MUX4_Pin|MUX3_Pin|MUX2_Pin
 80034ba:	233f      	movs	r3, #63	; 0x3f
 80034bc:	617b      	str	r3, [r7, #20]
                          |MUX1_Pin|MUX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034be:	2303      	movs	r3, #3
 80034c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	4821      	ldr	r0, [pc, #132]	; (8003554 <HAL_ADC_MspInit+0xf4>)
 80034ce:	f001 fe5d 	bl	800518c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80034d2:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 80034d4:	4a21      	ldr	r2, [pc, #132]	; (800355c <HAL_ADC_MspInit+0xfc>)
 80034d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034d8:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 80034da:	2200      	movs	r2, #0
 80034dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034de:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 80034ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034f2:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 80034f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 80034fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003500:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 8003504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003508:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 800350c:	2200      	movs	r2, #0
 800350e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 8003512:	2204      	movs	r2, #4
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 8003518:	2203      	movs	r2, #3
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 800351e:	2200      	movs	r2, #0
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003528:	480b      	ldr	r0, [pc, #44]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 800352a:	f000 ffa7 	bl	800447c <HAL_DMA_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8003534:	f7ff fb44 	bl	8002bc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
 800353e:	4a06      	ldr	r2, [pc, #24]	; (8003558 <HAL_ADC_MspInit+0xf8>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003544:	bf00      	nop
 8003546:	3728      	adds	r7, #40	; 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40012000 	.word	0x40012000
 8003550:	40023800 	.word	0x40023800
 8003554:	40020000 	.word	0x40020000
 8003558:	20000444 	.word	0x20000444
 800355c:	40026470 	.word	0x40026470

08003560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a34      	ldr	r2, [pc, #208]	; (8003650 <HAL_I2C_MspInit+0xf0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d162      	bne.n	8003648 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_I2C_MspInit+0xf4>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a32      	ldr	r2, [pc, #200]	; (8003654 <HAL_I2C_MspInit+0xf4>)
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_I2C_MspInit+0xf4>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800359e:	23c0      	movs	r3, #192	; 0xc0
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a2:	2312      	movs	r3, #18
 80035a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035ae:	2304      	movs	r3, #4
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	4827      	ldr	r0, [pc, #156]	; (8003658 <HAL_I2C_MspInit+0xf8>)
 80035ba:	f001 fde7 	bl	800518c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_I2C_MspInit+0xf4>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a23      	ldr	r2, [pc, #140]	; (8003654 <HAL_I2C_MspInit+0xf4>)
 80035c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <HAL_I2C_MspInit+0xf4>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_I2C_MspInit+0xfc>)
 80035dc:	4a20      	ldr	r2, [pc, #128]	; (8003660 <HAL_I2C_MspInit+0x100>)
 80035de:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80035e0:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_I2C_MspInit+0xfc>)
 80035e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <HAL_I2C_MspInit+0xfc>)
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_I2C_MspInit+0xfc>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_I2C_MspInit+0xfc>)
 80035f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_I2C_MspInit+0xfc>)
 80035fe:	2200      	movs	r2, #0
 8003600:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <HAL_I2C_MspInit+0xfc>)
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_I2C_MspInit+0xfc>)
 800360a:	2200      	movs	r2, #0
 800360c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_I2C_MspInit+0xfc>)
 8003610:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003614:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_I2C_MspInit+0xfc>)
 8003618:	2200      	movs	r2, #0
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800361c:	480f      	ldr	r0, [pc, #60]	; (800365c <HAL_I2C_MspInit+0xfc>)
 800361e:	f000 ff2d 	bl	800447c <HAL_DMA_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003628:	f7ff faca 	bl	8002bc0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <HAL_I2C_MspInit+0xfc>)
 8003630:	635a      	str	r2, [r3, #52]	; 0x34
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <HAL_I2C_MspInit+0xfc>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	2100      	movs	r1, #0
 800363c:	201f      	movs	r0, #31
 800363e:	f000 fee6 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003642:	201f      	movs	r0, #31
 8003644:	f000 feff 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003648:	bf00      	nop
 800364a:	3728      	adds	r7, #40	; 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40005400 	.word	0x40005400
 8003654:	40023800 	.word	0x40023800
 8003658:	40020400 	.word	0x40020400
 800365c:	200004f8 	.word	0x200004f8
 8003660:	400260a0 	.word	0x400260a0

08003664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <HAL_TIM_Base_MspInit+0x9c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d13f      	bne.n	80036f6 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	4b22      	ldr	r3, [pc, #136]	; (8003704 <HAL_TIM_Base_MspInit+0xa0>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <HAL_TIM_Base_MspInit+0xa0>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6453      	str	r3, [r2, #68]	; 0x44
 8003686:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <HAL_TIM_Base_MspInit+0xa0>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 8003694:	4a1d      	ldr	r2, [pc, #116]	; (800370c <HAL_TIM_Base_MspInit+0xa8>)
 8003696:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 800369a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800369e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ba:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036c2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ca:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036d2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80036da:	480b      	ldr	r0, [pc, #44]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036dc:	f000 fece 	bl	800447c <HAL_DMA_Init>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80036e6:	f7ff fa6b 	bl	8002bc0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a06      	ldr	r2, [pc, #24]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
 80036f0:	4a05      	ldr	r2, [pc, #20]	; (8003708 <HAL_TIM_Base_MspInit+0xa4>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40023800 	.word	0x40023800
 8003708:	200005e8 	.word	0x200005e8
 800370c:	40026440 	.word	0x40026440

08003710 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_TIM_Encoder_MspInit+0x84>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d12b      	bne.n	800378a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_TIM_Encoder_MspInit+0x88>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <HAL_TIM_Encoder_MspInit+0x88>)
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	6413      	str	r3, [r2, #64]	; 0x40
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_TIM_Encoder_MspInit+0x88>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_TIM_Encoder_MspInit+0x88>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a10      	ldr	r2, [pc, #64]	; (8003798 <HAL_TIM_Encoder_MspInit+0x88>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_TIM_Encoder_MspInit+0x88>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin;
 800376a:	23c0      	movs	r3, #192	; 0xc0
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800376e:	2312      	movs	r3, #18
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003776:	2303      	movs	r3, #3
 8003778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800377a:	2302      	movs	r3, #2
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	4805      	ldr	r0, [pc, #20]	; (800379c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003786:	f001 fd01 	bl	800518c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800378a:	bf00      	nop
 800378c:	3728      	adds	r7, #40	; 0x28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40000400 	.word	0x40000400
 8003798:	40023800 	.word	0x40023800
 800379c:	40020000 	.word	0x40020000

080037a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 030c 	add.w	r3, r7, #12
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a12      	ldr	r2, [pc, #72]	; (8003808 <HAL_TIM_MspPostInit+0x68>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d11e      	bne.n	8003800 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_TIM_MspPostInit+0x6c>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_TIM_MspPostInit+0x6c>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_TIM_MspPostInit+0x6c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ARGB_Pin;
 80037de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037e4:	2312      	movs	r3, #18
 80037e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ec:	2303      	movs	r3, #3
 80037ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037f0:	2301      	movs	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARGB_GPIO_Port, &GPIO_InitStruct);
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4619      	mov	r1, r3
 80037fa:	4805      	ldr	r0, [pc, #20]	; (8003810 <HAL_TIM_MspPostInit+0x70>)
 80037fc:	f001 fcc6 	bl	800518c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003800:	bf00      	nop
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40010000 	.word	0x40010000
 800380c:	40023800 	.word	0x40023800
 8003810:	40020000 	.word	0x40020000

08003814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <NMI_Handler+0x4>

0800381a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800381e:	e7fe      	b.n	800381e <HardFault_Handler+0x4>

08003820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <MemManage_Handler+0x4>

08003826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <BusFault_Handler+0x4>

0800382c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003830:	e7fe      	b.n	8003830 <UsageFault_Handler+0x4>

08003832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003860:	f000 f8f8 	bl	8003a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}

08003868 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <DMA1_Stream6_IRQHandler+0x10>)
 800386e:	f000 ff2d 	bl	80046cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200004f8 	.word	0x200004f8

0800387c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <I2C1_EV_IRQHandler+0x10>)
 8003882:	f002 f9a9 	bl	8005bd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200004a4 	.word	0x200004a4

08003890 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <DMA2_Stream2_IRQHandler+0x10>)
 8003896:	f000 ff19 	bl	80046cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	200005e8 	.word	0x200005e8

080038a4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <DMA2_Stream4_IRQHandler+0x10>)
 80038aa:	f000 ff0f 	bl	80046cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000444 	.word	0x20000444

080038b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <OTG_FS_IRQHandler+0x10>)
 80038be:	f004 f889 	bl	80079d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000d84 	.word	0x20000d84

080038cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <_sbrk+0x5c>)
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <_sbrk+0x60>)
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <_sbrk+0x64>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <_sbrk+0x64>)
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <_sbrk+0x68>)
 80038ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <_sbrk+0x64>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d207      	bcs.n	800390c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038fc:	f00a fa30 	bl	800dd60 <__errno>
 8003900:	4603      	mov	r3, r0
 8003902:	220c      	movs	r2, #12
 8003904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295
 800390a:	e009      	b.n	8003920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <_sbrk+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	4a05      	ldr	r2, [pc, #20]	; (8003930 <_sbrk+0x64>)
 800391c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20020000 	.word	0x20020000
 800392c:	00000400 	.word	0x00000400
 8003930:	2000087c 	.word	0x2000087c
 8003934:	200013f0 	.word	0x200013f0

08003938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <SystemInit+0x20>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <SystemInit+0x20>)
 8003944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800395c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003960:	480d      	ldr	r0, [pc, #52]	; (8003998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003962:	490e      	ldr	r1, [pc, #56]	; (800399c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003964:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003968:	e002      	b.n	8003970 <LoopCopyDataInit>

0800396a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800396a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800396c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396e:	3304      	adds	r3, #4

08003970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003974:	d3f9      	bcc.n	800396a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003978:	4c0b      	ldr	r4, [pc, #44]	; (80039a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800397a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800397c:	e001      	b.n	8003982 <LoopFillZerobss>

0800397e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003980:	3204      	adds	r2, #4

08003982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003984:	d3fb      	bcc.n	800397e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003986:	f7ff ffd7 	bl	8003938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800398a:	f00a f9ef 	bl	800dd6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800398e:	f7fd feff 	bl	8001790 <main>
  bx  lr    
 8003992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800399c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80039a0:	0800f164 	.word	0x0800f164
  ldr r2, =_sbss
 80039a4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80039a8:	200013ec 	.word	0x200013ec

080039ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ac:	e7fe      	b.n	80039ac <ADC_IRQHandler>
	...

080039b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_Init+0x40>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <HAL_Init+0x40>)
 80039ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_Init+0x40>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_Init+0x40>)
 80039c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_Init+0x40>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <HAL_Init+0x40>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d8:	2003      	movs	r0, #3
 80039da:	f000 fd0d 	bl	80043f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039de:	200f      	movs	r0, #15
 80039e0:	f000 f808 	bl	80039f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039e4:	f7ff fd14 	bl	8003410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_InitTick+0x54>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_InitTick+0x58>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fd25 	bl	8004462 <HAL_SYSTICK_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00e      	b.n	8003a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b0f      	cmp	r3, #15
 8003a26:	d80a      	bhi.n	8003a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	f000 fced 	bl	800440e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a34:	4a06      	ldr	r2, [pc, #24]	; (8003a50 <HAL_InitTick+0x5c>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000000c 	.word	0x2000000c
 8003a4c:	20000014 	.word	0x20000014
 8003a50:	20000010 	.word	0x20000010

08003a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_IncTick+0x20>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_IncTick+0x24>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <HAL_IncTick+0x24>)
 8003a66:	6013      	str	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000014 	.word	0x20000014
 8003a78:	20000880 	.word	0x20000880

08003a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_GetTick+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000880 	.word	0x20000880

08003a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7ff ffee 	bl	8003a7c <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d005      	beq.n	8003aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_Delay+0x44>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aba:	bf00      	nop
 8003abc:	f7ff ffde 	bl	8003a7c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d8f7      	bhi.n	8003abc <HAL_Delay+0x28>
  {
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000014 	.word	0x20000014

08003adc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e033      	b.n	8003b5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fcb0 	bl	8003460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d118      	bne.n	8003b4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b22:	f023 0302 	bic.w	r3, r3, #2
 8003b26:	f043 0202 	orr.w	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa96 	bl	8004060 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
 8003b4a:	e001      	b.n	8003b50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Start+0x1a>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e097      	b.n	8003cae <HAL_ADC_Start+0x14a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d018      	beq.n	8003bc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba4:	4b45      	ldr	r3, [pc, #276]	; (8003cbc <HAL_ADC_Start+0x158>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a45      	ldr	r2, [pc, #276]	; (8003cc0 <HAL_ADC_Start+0x15c>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0c9a      	lsrs	r2, r3, #18
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003bb8:	e002      	b.n	8003bc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f9      	bne.n	8003bba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d15f      	bne.n	8003c94 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	d106      	bne.n	8003c22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	f023 0206 	bic.w	r2, r3, #6
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
 8003c20:	e002      	b.n	8003c28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_ADC_Start+0x160>)
 8003c32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d129      	bne.n	8003cac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e020      	b.n	8003cac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <HAL_ADC_Start+0x164>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d11b      	bne.n	8003cac <HAL_ADC_Start+0x148>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d114      	bne.n	8003cac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	e00b      	b.n	8003cac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0210 	orr.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	2000000c 	.word	0x2000000c
 8003cc0:	431bde83 	.word	0x431bde83
 8003cc4:	40012300 	.word	0x40012300
 8003cc8:	40012000 	.word	0x40012000

08003ccc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce8:	d113      	bne.n	8003d12 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf8:	d10b      	bne.n	8003d12 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e063      	b.n	8003dda <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003d12:	f7ff feb3 	bl	8003a7c <HAL_GetTick>
 8003d16:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d18:	e021      	b.n	8003d5e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d01d      	beq.n	8003d5e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_ADC_PollForConversion+0x6c>
 8003d28:	f7ff fea8 	bl	8003a7c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d212      	bcs.n	8003d5e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d00b      	beq.n	8003d5e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0204 	orr.w	r2, r3, #4
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e03d      	b.n	8003dda <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d1d6      	bne.n	8003d1a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0212 	mvn.w	r2, #18
 8003d74:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d123      	bne.n	8003dd8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d11f      	bne.n	8003dd8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d006      	beq.n	8003db4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d111      	bne.n	8003dd8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f043 0201 	orr.w	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x1c>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e113      	b.n	8004040 <HAL_ADC_ConfigChannel+0x244>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b09      	cmp	r3, #9
 8003e26:	d925      	bls.n	8003e74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68d9      	ldr	r1, [r3, #12]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	4613      	mov	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3b1e      	subs	r3, #30
 8003e3e:	2207      	movs	r2, #7
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43da      	mvns	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68d9      	ldr	r1, [r3, #12]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	4603      	mov	r3, r0
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4403      	add	r3, r0
 8003e66:	3b1e      	subs	r3, #30
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	e022      	b.n	8003eba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6919      	ldr	r1, [r3, #16]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	2207      	movs	r2, #7
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	400a      	ands	r2, r1
 8003e96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6919      	ldr	r1, [r3, #16]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4403      	add	r3, r0
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d824      	bhi.n	8003f0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3b05      	subs	r3, #5
 8003ed4:	221f      	movs	r2, #31
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	3b05      	subs	r3, #5
 8003efe:	fa00 f203 	lsl.w	r2, r0, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34
 8003f0a:	e04c      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	d824      	bhi.n	8003f5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	3b23      	subs	r3, #35	; 0x23
 8003f26:	221f      	movs	r2, #31
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	400a      	ands	r2, r1
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4618      	mov	r0, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3b23      	subs	r3, #35	; 0x23
 8003f50:	fa00 f203 	lsl.w	r2, r0, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f5c:	e023      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3b41      	subs	r3, #65	; 0x41
 8003f70:	221f      	movs	r2, #31
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	3b41      	subs	r3, #65	; 0x41
 8003f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fa6:	4b29      	ldr	r3, [pc, #164]	; (800404c <HAL_ADC_ConfigChannel+0x250>)
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a28      	ldr	r2, [pc, #160]	; (8004050 <HAL_ADC_ConfigChannel+0x254>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10f      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x1d8>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b12      	cmp	r3, #18
 8003fba:	d10b      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <HAL_ADC_ConfigChannel+0x254>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d12b      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x23a>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <HAL_ADC_ConfigChannel+0x258>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <HAL_ADC_ConfigChannel+0x1f4>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b11      	cmp	r3, #17
 8003fee:	d122      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a11      	ldr	r2, [pc, #68]	; (8004054 <HAL_ADC_ConfigChannel+0x258>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d111      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_ADC_ConfigChannel+0x25c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a11      	ldr	r2, [pc, #68]	; (800405c <HAL_ADC_ConfigChannel+0x260>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	0c9a      	lsrs	r2, r3, #18
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004028:	e002      	b.n	8004030 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	3b01      	subs	r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f9      	bne.n	800402a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40012300 	.word	0x40012300
 8004050:	40012000 	.word	0x40012000
 8004054:	10000012 	.word	0x10000012
 8004058:	2000000c 	.word	0x2000000c
 800405c:	431bde83 	.word	0x431bde83

08004060 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004068:	4b79      	ldr	r3, [pc, #484]	; (8004250 <ADC_Init+0x1f0>)
 800406a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	431a      	orrs	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004094:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	021a      	lsls	r2, r3, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6899      	ldr	r1, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	4a58      	ldr	r2, [pc, #352]	; (8004254 <ADC_Init+0x1f4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d022      	beq.n	800413e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004106:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6899      	ldr	r1, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004128:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	e00f      	b.n	800415e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800414c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800415c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0202 	bic.w	r2, r2, #2
 800416c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6899      	ldr	r1, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7e1b      	ldrb	r3, [r3, #24]
 8004178:	005a      	lsls	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01b      	beq.n	80041c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	3b01      	subs	r3, #1
 80041b8:	035a      	lsls	r2, r3, #13
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	e007      	b.n	80041d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	051a      	lsls	r2, r3, #20
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004208:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6899      	ldr	r1, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004216:	025a      	lsls	r2, r3, #9
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	029a      	lsls	r2, r3, #10
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40012300 	.word	0x40012300
 8004254:	0f000001 	.word	0x0f000001

08004258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	60d3      	str	r3, [r2, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <__NVIC_GetPriorityGrouping+0x18>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0307 	and.w	r3, r3, #7
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db0b      	blt.n	80042e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4907      	ldr	r1, [pc, #28]	; (80042f4 <__NVIC_EnableIRQ+0x38>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2001      	movs	r0, #1
 80042de:	fa00 f202 	lsl.w	r2, r0, r2
 80042e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000e100 	.word	0xe000e100

080042f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004308:	2b00      	cmp	r3, #0
 800430a:	db0a      	blt.n	8004322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	490c      	ldr	r1, [pc, #48]	; (8004344 <__NVIC_SetPriority+0x4c>)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	0112      	lsls	r2, r2, #4
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	440b      	add	r3, r1
 800431c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004320:	e00a      	b.n	8004338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4908      	ldr	r1, [pc, #32]	; (8004348 <__NVIC_SetPriority+0x50>)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	3b04      	subs	r3, #4
 8004330:	0112      	lsls	r2, r2, #4
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	440b      	add	r3, r1
 8004336:	761a      	strb	r2, [r3, #24]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	bf28      	it	cs
 800436a:	2304      	movcs	r3, #4
 800436c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3304      	adds	r3, #4
 8004372:	2b06      	cmp	r3, #6
 8004374:	d902      	bls.n	800437c <NVIC_EncodePriority+0x30>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3b03      	subs	r3, #3
 800437a:	e000      	b.n	800437e <NVIC_EncodePriority+0x32>
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	f04f 32ff 	mov.w	r2, #4294967295
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	401a      	ands	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004394:	f04f 31ff 	mov.w	r1, #4294967295
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	43d9      	mvns	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a4:	4313      	orrs	r3, r2
         );
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c4:	d301      	bcc.n	80043ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00f      	b.n	80043ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ca:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <SysTick_Config+0x40>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d2:	210f      	movs	r1, #15
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	f7ff ff8e 	bl	80042f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <SysTick_Config+0x40>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e2:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <SysTick_Config+0x40>)
 80043e4:	2207      	movs	r2, #7
 80043e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	e000e010 	.word	0xe000e010

080043f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff29 	bl	8004258 <__NVIC_SetPriorityGrouping>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004420:	f7ff ff3e 	bl	80042a0 <__NVIC_GetPriorityGrouping>
 8004424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff8e 	bl	800434c <NVIC_EncodePriority>
 8004430:	4602      	mov	r2, r0
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff5d 	bl	80042f8 <__NVIC_SetPriority>
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff31 	bl	80042bc <__NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ffa2 	bl	80043b4 <SysTick_Config>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004488:	f7ff faf8 	bl	8003a7c <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e099      	b.n	80045cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b8:	e00f      	b.n	80044da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ba:	f7ff fadf 	bl	8003a7c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d908      	bls.n	80044da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2203      	movs	r2, #3
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e078      	b.n	80045cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e8      	bne.n	80044ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <HAL_DMA_Init+0x158>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800451e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2b04      	cmp	r3, #4
 8004532:	d107      	bne.n	8004544 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	4313      	orrs	r3, r2
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0307 	bic.w	r3, r3, #7
 800455a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b04      	cmp	r3, #4
 800456c:	d117      	bne.n	800459e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00e      	beq.n	800459e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa9f 	bl	8004ac4 <DMA_CheckFifoParam>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2240      	movs	r2, #64	; 0x40
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800459a:	2301      	movs	r3, #1
 800459c:	e016      	b.n	80045cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fa56 	bl	8004a58 <DMA_CalcBaseAndBitshift>
 80045ac:	4603      	mov	r3, r0
 80045ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	223f      	movs	r2, #63	; 0x3f
 80045b6:	409a      	lsls	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	f010803f 	.word	0xf010803f

080045d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_DMA_Start_IT+0x26>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e040      	b.n	8004680 <HAL_DMA_Start_IT+0xa8>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	d12f      	bne.n	8004672 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f9e8 	bl	80049fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004630:	223f      	movs	r2, #63	; 0x3f
 8004632:	409a      	lsls	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0216 	orr.w	r2, r2, #22
 8004646:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0208 	orr.w	r2, r2, #8
 800465e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e005      	b.n	800467e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800467a:	2302      	movs	r3, #2
 800467c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800467e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d004      	beq.n	80046a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e00c      	b.n	80046c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2205      	movs	r2, #5
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046d8:	4b8e      	ldr	r3, [pc, #568]	; (8004914 <HAL_DMA_IRQHandler+0x248>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a8e      	ldr	r2, [pc, #568]	; (8004918 <HAL_DMA_IRQHandler+0x24c>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0a9b      	lsrs	r3, r3, #10
 80046e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f6:	2208      	movs	r2, #8
 80046f8:	409a      	lsls	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01a      	beq.n	8004738 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0204 	bic.w	r2, r2, #4
 800471e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	2208      	movs	r2, #8
 8004726:	409a      	lsls	r2, r3
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f043 0201 	orr.w	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473c:	2201      	movs	r2, #1
 800473e:	409a      	lsls	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d012      	beq.n	800476e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	2201      	movs	r2, #1
 800475c:	409a      	lsls	r2, r3
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	f043 0202 	orr.w	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004772:	2204      	movs	r2, #4
 8004774:	409a      	lsls	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d012      	beq.n	80047a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00b      	beq.n	80047a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	2204      	movs	r2, #4
 8004792:	409a      	lsls	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	f043 0204 	orr.w	r2, r3, #4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	2210      	movs	r2, #16
 80047aa:	409a      	lsls	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d043      	beq.n	800483c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d03c      	beq.n	800483c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	2210      	movs	r2, #16
 80047c8:	409a      	lsls	r2, r3
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d018      	beq.n	800480e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d024      	beq.n	800483c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4798      	blx	r3
 80047fa:	e01f      	b.n	800483c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01b      	beq.n	800483c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
 800480c:	e016      	b.n	800483c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0208 	bic.w	r2, r2, #8
 800482a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	2220      	movs	r2, #32
 8004842:	409a      	lsls	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 808f 	beq.w	800496c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8087 	beq.w	800496c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	2220      	movs	r2, #32
 8004864:	409a      	lsls	r2, r3
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b05      	cmp	r3, #5
 8004874:	d136      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0216 	bic.w	r2, r2, #22
 8004884:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004894:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d103      	bne.n	80048a6 <HAL_DMA_IRQHandler+0x1da>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0208 	bic.w	r2, r2, #8
 80048b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	223f      	movs	r2, #63	; 0x3f
 80048bc:	409a      	lsls	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d07e      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
        }
        return;
 80048e2:	e079      	b.n	80049d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01d      	beq.n	800492e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	2b00      	cmp	r3, #0
 8004906:	d031      	beq.n	800496c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	4798      	blx	r3
 8004910:	e02c      	b.n	800496c <HAL_DMA_IRQHandler+0x2a0>
 8004912:	bf00      	nop
 8004914:	2000000c 	.word	0x2000000c
 8004918:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d023      	beq.n	800496c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
 800492c:	e01e      	b.n	800496c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10f      	bne.n	800495c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0210 	bic.w	r2, r2, #16
 800494a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	2b00      	cmp	r3, #0
 8004972:	d032      	beq.n	80049da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d022      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2205      	movs	r2, #5
 8004984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	3301      	adds	r3, #1
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d307      	bcc.n	80049b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f2      	bne.n	8004998 <HAL_DMA_IRQHandler+0x2cc>
 80049b2:	e000      	b.n	80049b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
 80049d6:	e000      	b.n	80049da <HAL_DMA_IRQHandler+0x30e>
        return;
 80049d8:	bf00      	nop
    }
  }
}
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ee:	b2db      	uxtb	r3, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b40      	cmp	r3, #64	; 0x40
 8004a28:	d108      	bne.n	8004a3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a3a:	e007      	b.n	8004a4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	3b10      	subs	r3, #16
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <DMA_CalcBaseAndBitshift+0x64>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a72:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d909      	bls.n	8004a9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	1d1a      	adds	r2, r3, #4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	659a      	str	r2, [r3, #88]	; 0x58
 8004a98:	e007      	b.n	8004aaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	aaaaaaab 	.word	0xaaaaaaab
 8004ac0:	0800f118 	.word	0x0800f118

08004ac4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d11f      	bne.n	8004b1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d856      	bhi.n	8004b92 <DMA_CheckFifoParam+0xce>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <DMA_CheckFifoParam+0x28>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b0f 	.word	0x08004b0f
 8004af4:	08004afd 	.word	0x08004afd
 8004af8:	08004b93 	.word	0x08004b93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d046      	beq.n	8004b96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0c:	e043      	b.n	8004b96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b16:	d140      	bne.n	8004b9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1c:	e03d      	b.n	8004b9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b26:	d121      	bne.n	8004b6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d837      	bhi.n	8004b9e <DMA_CheckFifoParam+0xda>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <DMA_CheckFifoParam+0x70>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b4b 	.word	0x08004b4b
 8004b3c:	08004b45 	.word	0x08004b45
 8004b40:	08004b5d 	.word	0x08004b5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
      break;
 8004b48:	e030      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d025      	beq.n	8004ba2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5a:	e022      	b.n	8004ba2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b64:	d11f      	bne.n	8004ba6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b6a:	e01c      	b.n	8004ba6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d903      	bls.n	8004b7a <DMA_CheckFifoParam+0xb6>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d003      	beq.n	8004b80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b78:	e018      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7e:	e015      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00e      	beq.n	8004baa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	e00b      	b.n	8004baa <DMA_CheckFifoParam+0xe6>
      break;
 8004b92:	bf00      	nop
 8004b94:	e00a      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004b96:	bf00      	nop
 8004b98:	e008      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e006      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;   
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004baa:	bf00      	nop
    }
  } 
  
  return status; 
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bce:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <HAL_FLASH_Program+0xa0>)
 8004bd0:	7e1b      	ldrb	r3, [r3, #24]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_FLASH_Program+0x1e>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e03b      	b.n	8004c52 <HAL_FLASH_Program+0x96>
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_FLASH_Program+0xa0>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004be0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004be4:	f000 f870 	bl	8004cc8 <FLASH_WaitForLastOperation>
 8004be8:	4603      	mov	r3, r0
 8004bea:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d12b      	bne.n	8004c4a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d105      	bne.n	8004c04 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004bf8:	783b      	ldrb	r3, [r7, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	68b8      	ldr	r0, [r7, #8]
 8004bfe:	f000 f91b 	bl	8004e38 <FLASH_Program_Byte>
 8004c02:	e016      	b.n	8004c32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d105      	bne.n	8004c16 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004c0a:	883b      	ldrh	r3, [r7, #0]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	68b8      	ldr	r0, [r7, #8]
 8004c10:	f000 f8ee 	bl	8004df0 <FLASH_Program_HalfWord>
 8004c14:	e00d      	b.n	8004c32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d105      	bne.n	8004c28 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	68b8      	ldr	r0, [r7, #8]
 8004c22:	f000 f8c3 	bl	8004dac <FLASH_Program_Word>
 8004c26:	e004      	b.n	8004c32 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c2c:	68b8      	ldr	r0, [r7, #8]
 8004c2e:	f000 f88b 	bl	8004d48 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c36:	f000 f847 	bl	8004cc8 <FLASH_WaitForLastOperation>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_FLASH_Program+0xa4>)
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	4a07      	ldr	r2, [pc, #28]	; (8004c60 <HAL_FLASH_Program+0xa4>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c4a:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <HAL_FLASH_Program+0xa0>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000884 	.word	0x20000884
 8004c60:	40023c00 	.word	0x40023c00

08004c64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_FLASH_Unlock+0x38>)
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da0b      	bge.n	8004c8e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_FLASH_Unlock+0x38>)
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <HAL_FLASH_Unlock+0x3c>)
 8004c7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004c7c:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <HAL_FLASH_Unlock+0x38>)
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <HAL_FLASH_Unlock+0x40>)
 8004c80:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_FLASH_Unlock+0x38>)
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	da01      	bge.n	8004c8e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40023c00 	.word	0x40023c00
 8004ca0:	45670123 	.word	0x45670123
 8004ca4:	cdef89ab 	.word	0xcdef89ab

08004ca8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_FLASH_Lock+0x1c>)
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <HAL_FLASH_Lock+0x1c>)
 8004cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cb6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	40023c00 	.word	0x40023c00

08004cc8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <FLASH_WaitForLastOperation+0x78>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004cda:	f7fe fecf 	bl	8003a7c <HAL_GetTick>
 8004cde:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004ce0:	e010      	b.n	8004d04 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d00c      	beq.n	8004d04 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <FLASH_WaitForLastOperation+0x38>
 8004cf0:	f7fe fec4 	bl	8003a7c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d201      	bcs.n	8004d04 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e019      	b.n	8004d38 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <FLASH_WaitForLastOperation+0x7c>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e8      	bne.n	8004ce2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <FLASH_WaitForLastOperation+0x7c>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <FLASH_WaitForLastOperation+0x7c>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <FLASH_WaitForLastOperation+0x7c>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004d2e:	f000 f8a5 	bl	8004e7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
  
}  
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000884 	.word	0x20000884
 8004d44:	40023c00 	.word	0x40023c00

08004d48 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <FLASH_Program_DoubleWord+0x60>)
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	4a13      	ldr	r2, [pc, #76]	; (8004da8 <FLASH_Program_DoubleWord+0x60>)
 8004d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004d60:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <FLASH_Program_DoubleWord+0x60>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <FLASH_Program_DoubleWord+0x60>)
 8004d66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <FLASH_Program_DoubleWord+0x60>)
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <FLASH_Program_DoubleWord+0x60>)
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004d7e:	f3bf 8f6f 	isb	sy
}
 8004d82:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	000a      	movs	r2, r1
 8004d92:	2300      	movs	r3, #0
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	3104      	adds	r1, #4
 8004d98:	4613      	mov	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40023c00 	.word	0x40023c00

08004dac <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <FLASH_Program_Word+0x40>)
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <FLASH_Program_Word+0x40>)
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <FLASH_Program_Word+0x40>)
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	4a09      	ldr	r2, [pc, #36]	; (8004dec <FLASH_Program_Word+0x40>)
 8004dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <FLASH_Program_Word+0x40>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	4a06      	ldr	r2, [pc, #24]	; (8004dec <FLASH_Program_Word+0x40>)
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40023c00 	.word	0x40023c00

08004df0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <FLASH_Program_HalfWord+0x44>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <FLASH_Program_HalfWord+0x44>)
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <FLASH_Program_HalfWord+0x44>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <FLASH_Program_HalfWord+0x44>)
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <FLASH_Program_HalfWord+0x44>)
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	4a06      	ldr	r2, [pc, #24]	; (8004e34 <FLASH_Program_HalfWord+0x44>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	801a      	strh	r2, [r3, #0]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40023c00 	.word	0x40023c00

08004e38 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <FLASH_Program_Byte+0x40>)
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	4a0b      	ldr	r2, [pc, #44]	; (8004e78 <FLASH_Program_Byte+0x40>)
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <FLASH_Program_Byte+0x40>)
 8004e52:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <FLASH_Program_Byte+0x40>)
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <FLASH_Program_Byte+0x40>)
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	4a06      	ldr	r2, [pc, #24]	; (8004e78 <FLASH_Program_Byte+0x40>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	701a      	strb	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40023c00 	.word	0x40023c00

08004e7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004e80:	4b2f      	ldr	r3, [pc, #188]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004e8c:	4b2d      	ldr	r3, [pc, #180]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f043 0310 	orr.w	r3, r3, #16
 8004e94:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004e96:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004e98:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004e9e:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004eaa:	4b26      	ldr	r3, [pc, #152]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f043 0308 	orr.w	r3, r3, #8
 8004eb2:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004eb4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004eb6:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004eb8:	2220      	movs	r2, #32
 8004eba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004ebc:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f043 0304 	orr.w	r3, r3, #4
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004ed2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004ed4:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d008      	beq.n	8004ef8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004ee6:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f043 0302 	orr.w	r3, r3, #2
 8004eee:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004ef0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004ef4:	2280      	movs	r2, #128	; 0x80
 8004ef6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	4a0d      	ldr	r2, [pc, #52]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004f0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f16:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f043 0320 	orr.w	r3, r3, #32
 8004f2c:	4a05      	ldr	r2, [pc, #20]	; (8004f44 <FLASH_SetErrorCode+0xc8>)
 8004f2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <FLASH_SetErrorCode+0xc4>)
 8004f32:	2202      	movs	r2, #2
 8004f34:	60da      	str	r2, [r3, #12]
  }
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40023c00 	.word	0x40023c00
 8004f44:	20000884 	.word	0x20000884

08004f48 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f5a:	4b31      	ldr	r3, [pc, #196]	; (8005020 <HAL_FLASHEx_Erase+0xd8>)
 8004f5c:	7e1b      	ldrb	r3, [r3, #24]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_FLASHEx_Erase+0x1e>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e058      	b.n	8005018 <HAL_FLASHEx_Erase+0xd0>
 8004f66:	4b2e      	ldr	r3, [pc, #184]	; (8005020 <HAL_FLASHEx_Erase+0xd8>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f70:	f7ff feaa 	bl	8004cc8 <FLASH_WaitForLastOperation>
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d148      	bne.n	8005010 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d115      	bne.n	8004fba <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 f844 	bl	8005028 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fa4:	f7ff fe90 	bl	8004cc8 <FLASH_WaitForLastOperation>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <HAL_FLASHEx_Erase+0xdc>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <HAL_FLASHEx_Erase+0xdc>)
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	6113      	str	r3, [r2, #16]
 8004fb8:	e028      	b.n	800500c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	e01c      	b.n	8004ffc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	4619      	mov	r1, r3
 8004fca:	68b8      	ldr	r0, [r7, #8]
 8004fcc:	f000 f850 	bl	8005070 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fd4:	f7ff fe78 	bl	8004cc8 <FLASH_WaitForLastOperation>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <HAL_FLASHEx_Erase+0xdc>)
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	4a10      	ldr	r2, [pc, #64]	; (8005024 <HAL_FLASHEx_Erase+0xdc>)
 8004fe2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004fe6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	601a      	str	r2, [r3, #0]
          break;
 8004ff4:	e00a      	b.n	800500c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4413      	add	r3, r2
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	429a      	cmp	r2, r3
 800500a:	d3da      	bcc.n	8004fc2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800500c:	f000 f878 	bl	8005100 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005010:	4b03      	ldr	r3, [pc, #12]	; (8005020 <HAL_FLASHEx_Erase+0xd8>)
 8005012:	2200      	movs	r2, #0
 8005014:	761a      	strb	r2, [r3, #24]

  return status;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000884 	.word	0x20000884
 8005024:	40023c00 	.word	0x40023c00

08005028 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	6039      	str	r1, [r7, #0]
 8005032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005034:	4b0d      	ldr	r3, [pc, #52]	; (800506c <FLASH_MassErase+0x44>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	4a0c      	ldr	r2, [pc, #48]	; (800506c <FLASH_MassErase+0x44>)
 800503a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <FLASH_MassErase+0x44>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4a09      	ldr	r2, [pc, #36]	; (800506c <FLASH_MassErase+0x44>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800504c:	4b07      	ldr	r3, [pc, #28]	; (800506c <FLASH_MassErase+0x44>)
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	4313      	orrs	r3, r2
 8005056:	4a05      	ldr	r2, [pc, #20]	; (800506c <FLASH_MassErase+0x44>)
 8005058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505c:	6113      	str	r3, [r2, #16]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40023c00 	.word	0x40023c00

08005070 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e010      	b.n	80050ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d103      	bne.n	800509a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e009      	b.n	80050ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d103      	bne.n	80050a8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80050a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e002      	b.n	80050ae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80050a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050ac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	490f      	ldr	r1, [pc, #60]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4313      	orrs	r3, r2
 80050dc:	4a07      	ldr	r2, [pc, #28]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050de:	f043 0302 	orr.w	r3, r3, #2
 80050e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <FLASH_Erase_Sector+0x8c>)
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ee:	6113      	str	r3, [r2, #16]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40023c00 	.word	0x40023c00

08005100 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510c:	2b00      	cmp	r3, #0
 800510e:	d017      	beq.n	8005140 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005110:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005116:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800511a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800511c:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <FLASH_FlushCaches+0x88>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a19      	ldr	r2, [pc, #100]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005122:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <FLASH_FlushCaches+0x88>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a16      	ldr	r2, [pc, #88]	; (8005188 <FLASH_FlushCaches+0x88>)
 800512e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005132:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005134:	4b14      	ldr	r3, [pc, #80]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a13      	ldr	r2, [pc, #76]	; (8005188 <FLASH_FlushCaches+0x88>)
 800513a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800513e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	2b00      	cmp	r3, #0
 800514a:	d017      	beq.n	800517c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <FLASH_FlushCaches+0x88>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0d      	ldr	r2, [pc, #52]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005156:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <FLASH_FlushCaches+0x88>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <FLASH_FlushCaches+0x88>)
 800515e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a07      	ldr	r2, [pc, #28]	; (8005188 <FLASH_FlushCaches+0x88>)
 800516a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800516e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a04      	ldr	r2, [pc, #16]	; (8005188 <FLASH_FlushCaches+0x88>)
 8005176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800517a:	6013      	str	r3, [r2, #0]
  }
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40023c00 	.word	0x40023c00

0800518c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e159      	b.n	800545c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051a8:	2201      	movs	r2, #1
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4013      	ands	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	f040 8148 	bne.w	8005456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d005      	beq.n	80051de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d130      	bne.n	8005240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2203      	movs	r2, #3
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005214:	2201      	movs	r2, #1
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 0201 	and.w	r2, r3, #1
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b03      	cmp	r3, #3
 800524a:	d017      	beq.n	800527c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	2203      	movs	r2, #3
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d123      	bne.n	80052d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	08da      	lsrs	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3208      	adds	r2, #8
 8005290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	220f      	movs	r2, #15
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	08da      	lsrs	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3208      	adds	r2, #8
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	2203      	movs	r2, #3
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0203 	and.w	r2, r3, #3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80a2 	beq.w	8005456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	4b57      	ldr	r3, [pc, #348]	; (8005474 <HAL_GPIO_Init+0x2e8>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	4a56      	ldr	r2, [pc, #344]	; (8005474 <HAL_GPIO_Init+0x2e8>)
 800531c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005320:	6453      	str	r3, [r2, #68]	; 0x44
 8005322:	4b54      	ldr	r3, [pc, #336]	; (8005474 <HAL_GPIO_Init+0x2e8>)
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800532e:	4a52      	ldr	r2, [pc, #328]	; (8005478 <HAL_GPIO_Init+0x2ec>)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	3302      	adds	r3, #2
 8005336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	220f      	movs	r2, #15
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a49      	ldr	r2, [pc, #292]	; (800547c <HAL_GPIO_Init+0x2f0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d019      	beq.n	800538e <HAL_GPIO_Init+0x202>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a48      	ldr	r2, [pc, #288]	; (8005480 <HAL_GPIO_Init+0x2f4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_GPIO_Init+0x1fe>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a47      	ldr	r2, [pc, #284]	; (8005484 <HAL_GPIO_Init+0x2f8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00d      	beq.n	8005386 <HAL_GPIO_Init+0x1fa>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a46      	ldr	r2, [pc, #280]	; (8005488 <HAL_GPIO_Init+0x2fc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <HAL_GPIO_Init+0x1f6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a45      	ldr	r2, [pc, #276]	; (800548c <HAL_GPIO_Init+0x300>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d101      	bne.n	800537e <HAL_GPIO_Init+0x1f2>
 800537a:	2304      	movs	r3, #4
 800537c:	e008      	b.n	8005390 <HAL_GPIO_Init+0x204>
 800537e:	2307      	movs	r3, #7
 8005380:	e006      	b.n	8005390 <HAL_GPIO_Init+0x204>
 8005382:	2303      	movs	r3, #3
 8005384:	e004      	b.n	8005390 <HAL_GPIO_Init+0x204>
 8005386:	2302      	movs	r3, #2
 8005388:	e002      	b.n	8005390 <HAL_GPIO_Init+0x204>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_GPIO_Init+0x204>
 800538e:	2300      	movs	r3, #0
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	f002 0203 	and.w	r2, r2, #3
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	4093      	lsls	r3, r2
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053a0:	4935      	ldr	r1, [pc, #212]	; (8005478 <HAL_GPIO_Init+0x2ec>)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	3302      	adds	r3, #2
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ae:	4b38      	ldr	r3, [pc, #224]	; (8005490 <HAL_GPIO_Init+0x304>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053d2:	4a2f      	ldr	r2, [pc, #188]	; (8005490 <HAL_GPIO_Init+0x304>)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053d8:	4b2d      	ldr	r3, [pc, #180]	; (8005490 <HAL_GPIO_Init+0x304>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053fc:	4a24      	ldr	r2, [pc, #144]	; (8005490 <HAL_GPIO_Init+0x304>)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005402:	4b23      	ldr	r3, [pc, #140]	; (8005490 <HAL_GPIO_Init+0x304>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005426:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <HAL_GPIO_Init+0x304>)
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800542c:	4b18      	ldr	r3, [pc, #96]	; (8005490 <HAL_GPIO_Init+0x304>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005450:	4a0f      	ldr	r2, [pc, #60]	; (8005490 <HAL_GPIO_Init+0x304>)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	f67f aea2 	bls.w	80051a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	3724      	adds	r7, #36	; 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	40013800 	.word	0x40013800
 800547c:	40020000 	.word	0x40020000
 8005480:	40020400 	.word	0x40020400
 8005484:	40020800 	.word	0x40020800
 8005488:	40020c00 	.word	0x40020c00
 800548c:	40021000 	.word	0x40021000
 8005490:	40013c00 	.word	0x40013c00

08005494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	887b      	ldrh	r3, [r7, #2]
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
 80054b0:	e001      	b.n	80054b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	807b      	strh	r3, [r7, #2]
 80054d0:	4613      	mov	r3, r2
 80054d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054d4:	787b      	ldrb	r3, [r7, #1]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054e0:	e003      	b.n	80054ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054e2:	887b      	ldrh	r3, [r7, #2]
 80054e4:	041a      	lsls	r2, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	619a      	str	r2, [r3, #24]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e12b      	b.n	8005762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fe f81e 	bl	8003560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2224      	movs	r2, #36	; 0x24
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800554a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800555a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800555c:	f003 ff80 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 8005560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4a81      	ldr	r2, [pc, #516]	; (800576c <HAL_I2C_Init+0x274>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d807      	bhi.n	800557c <HAL_I2C_Init+0x84>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a80      	ldr	r2, [pc, #512]	; (8005770 <HAL_I2C_Init+0x278>)
 8005570:	4293      	cmp	r3, r2
 8005572:	bf94      	ite	ls
 8005574:	2301      	movls	r3, #1
 8005576:	2300      	movhi	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e006      	b.n	800558a <HAL_I2C_Init+0x92>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a7d      	ldr	r2, [pc, #500]	; (8005774 <HAL_I2C_Init+0x27c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	bf94      	ite	ls
 8005584:	2301      	movls	r3, #1
 8005586:	2300      	movhi	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0e7      	b.n	8005762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a78      	ldr	r2, [pc, #480]	; (8005778 <HAL_I2C_Init+0x280>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	0c9b      	lsrs	r3, r3, #18
 800559c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a6a      	ldr	r2, [pc, #424]	; (800576c <HAL_I2C_Init+0x274>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d802      	bhi.n	80055cc <HAL_I2C_Init+0xd4>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	e009      	b.n	80055e0 <HAL_I2C_Init+0xe8>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	4a69      	ldr	r2, [pc, #420]	; (800577c <HAL_I2C_Init+0x284>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	3301      	adds	r3, #1
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	495c      	ldr	r1, [pc, #368]	; (800576c <HAL_I2C_Init+0x274>)
 80055fc:	428b      	cmp	r3, r1
 80055fe:	d819      	bhi.n	8005634 <HAL_I2C_Init+0x13c>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1e59      	subs	r1, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fbb1 f3f3 	udiv	r3, r1, r3
 800560e:	1c59      	adds	r1, r3, #1
 8005610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005614:	400b      	ands	r3, r1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_I2C_Init+0x138>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e59      	subs	r1, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	fbb1 f3f3 	udiv	r3, r1, r3
 8005628:	3301      	adds	r3, #1
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	e051      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 8005630:	2304      	movs	r3, #4
 8005632:	e04f      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d111      	bne.n	8005660 <HAL_I2C_Init+0x168>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1e58      	subs	r0, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e012      	b.n	8005686 <HAL_I2C_Init+0x18e>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1e58      	subs	r0, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	0099      	lsls	r1, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	fbb0 f3f3 	udiv	r3, r0, r3
 8005676:	3301      	adds	r3, #1
 8005678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_I2C_Init+0x196>
 800568a:	2301      	movs	r3, #1
 800568c:	e022      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10e      	bne.n	80056b4 <HAL_I2C_Init+0x1bc>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1e58      	subs	r0, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	440b      	add	r3, r1
 80056a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b2:	e00f      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1e58      	subs	r0, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	0099      	lsls	r1, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	6809      	ldr	r1, [r1, #0]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6911      	ldr	r1, [r2, #16]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68d2      	ldr	r2, [r2, #12]
 800570e:	4311      	orrs	r1, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	430b      	orrs	r3, r1
 8005716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	000186a0 	.word	0x000186a0
 8005770:	001e847f 	.word	0x001e847f
 8005774:	003d08ff 	.word	0x003d08ff
 8005778:	431bde83 	.word	0x431bde83
 800577c:	10624dd3 	.word	0x10624dd3

08005780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	461a      	mov	r2, r3
 800578c:	460b      	mov	r3, r1
 800578e:	817b      	strh	r3, [r7, #10]
 8005790:	4613      	mov	r3, r2
 8005792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005794:	f7fe f972 	bl	8003a7c <HAL_GetTick>
 8005798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	f040 80e0 	bne.w	8005968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2319      	movs	r3, #25
 80057ae:	2201      	movs	r2, #1
 80057b0:	4970      	ldr	r1, [pc, #448]	; (8005974 <HAL_I2C_Master_Transmit+0x1f4>)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f001 fdea 	bl	800738c <I2C_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057be:	2302      	movs	r3, #2
 80057c0:	e0d3      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_I2C_Master_Transmit+0x50>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e0cc      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d007      	beq.n	80057f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2221      	movs	r2, #33	; 0x21
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2210      	movs	r2, #16
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	893a      	ldrh	r2, [r7, #8]
 8005826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a50      	ldr	r2, [pc, #320]	; (8005978 <HAL_I2C_Master_Transmit+0x1f8>)
 8005836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005838:	8979      	ldrh	r1, [r7, #10]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6a3a      	ldr	r2, [r7, #32]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f001 fc7a 	bl	8007138 <I2C_MasterRequestWrite>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e08d      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005864:	e066      	b.n	8005934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	6a39      	ldr	r1, [r7, #32]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f001 fe64 	bl	8007538 <I2C_WaitOnTXEFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b04      	cmp	r3, #4
 800587c:	d107      	bne.n	800588e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e06b      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d11b      	bne.n	8005908 <HAL_I2C_Master_Transmit+0x188>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d017      	beq.n	8005908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	6a39      	ldr	r1, [r7, #32]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f001 fe54 	bl	80075ba <I2C_WaitOnBTFFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b04      	cmp	r3, #4
 800591e:	d107      	bne.n	8005930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e01a      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005938:	2b00      	cmp	r3, #0
 800593a:	d194      	bne.n	8005866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800594a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	00100002 	.word	0x00100002
 8005978:	ffff0000 	.word	0xffff0000

0800597c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	; 0x28
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	460b      	mov	r3, r1
 800598a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800598c:	f7fe f876 	bl	8003a7c <HAL_GetTick>
 8005990:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b20      	cmp	r3, #32
 80059a0:	f040 8111 	bne.w	8005bc6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2319      	movs	r3, #25
 80059aa:	2201      	movs	r2, #1
 80059ac:	4988      	ldr	r1, [pc, #544]	; (8005bd0 <HAL_I2C_IsDeviceReady+0x254>)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f001 fcec 	bl	800738c <I2C_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
 80059bc:	e104      	b.n	8005bc8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_I2C_IsDeviceReady+0x50>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e0fd      	b.n	8005bc8 <HAL_I2C_IsDeviceReady+0x24c>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d007      	beq.n	80059f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2224      	movs	r2, #36	; 0x24
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4a70      	ldr	r2, [pc, #448]	; (8005bd4 <HAL_I2C_IsDeviceReady+0x258>)
 8005a14:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f001 fcaa 	bl	800738c <I2C_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4c:	d103      	bne.n	8005a56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e0b6      	b.n	8005bc8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a5a:	897b      	ldrh	r3, [r7, #10]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a6a:	f7fe f807 	bl	8003a7c <HAL_GetTick>
 8005a6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	bf0c      	ite	eq
 8005a7e:	2301      	moveq	r3, #1
 8005a80:	2300      	movne	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a94:	bf0c      	ite	eq
 8005a96:	2301      	moveq	r3, #1
 8005a98:	2300      	movne	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a9e:	e025      	b.n	8005aec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005aa0:	f7fd ffec 	bl	8003a7c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d302      	bcc.n	8005ab6 <HAL_I2C_IsDeviceReady+0x13a>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	22a0      	movs	r2, #160	; 0xa0
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2ba0      	cmp	r3, #160	; 0xa0
 8005af6:	d005      	beq.n	8005b04 <HAL_I2C_IsDeviceReady+0x188>
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_I2C_IsDeviceReady+0x188>
 8005afe:	7dbb      	ldrb	r3, [r7, #22]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0cd      	beq.n	8005aa0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d129      	bne.n	8005b6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2319      	movs	r3, #25
 8005b46:	2201      	movs	r2, #1
 8005b48:	4921      	ldr	r1, [pc, #132]	; (8005bd0 <HAL_I2C_IsDeviceReady+0x254>)
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f001 fc1e 	bl	800738c <I2C_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e036      	b.n	8005bc8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e02c      	b.n	8005bc8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2319      	movs	r3, #25
 8005b8e:	2201      	movs	r2, #1
 8005b90:	490f      	ldr	r1, [pc, #60]	; (8005bd0 <HAL_I2C_IsDeviceReady+0x254>)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f001 fbfa 	bl	800738c <I2C_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e012      	b.n	8005bc8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	f4ff af32 	bcc.w	8005a16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005bc6:	2302      	movs	r3, #2
  }
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	00100002 	.word	0x00100002
 8005bd4:	ffff0000 	.word	0xffff0000

08005bd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bf8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c00:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d003      	beq.n	8005c10 <HAL_I2C_EV_IRQHandler+0x38>
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	f040 80b1 	bne.w	8005d72 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10d      	bne.n	8005c46 <HAL_I2C_EV_IRQHandler+0x6e>
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c30:	d003      	beq.n	8005c3a <HAL_I2C_EV_IRQHandler+0x62>
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c38:	d101      	bne.n	8005c3e <HAL_I2C_EV_IRQHandler+0x66>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <HAL_I2C_EV_IRQHandler+0x68>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	f000 8114 	beq.w	8005e6e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <HAL_I2C_EV_IRQHandler+0x90>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 fd4f 	bl	80076fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fcbf 	bl	80065e4 <I2C_Master_SB>
 8005c66:	e083      	b.n	8005d70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_I2C_EV_IRQHandler+0xac>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fd37 	bl	80066f0 <I2C_Master_ADD10>
 8005c82:	e075      	b.n	8005d70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_I2C_EV_IRQHandler+0xc8>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fd53 	bl	8006744 <I2C_Master_ADDR>
 8005c9e:	e067      	b.n	8005d70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d036      	beq.n	8005d18 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cb8:	f000 80db 	beq.w	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00d      	beq.n	8005ce2 <HAL_I2C_EV_IRQHandler+0x10a>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_I2C_EV_IRQHandler+0x10a>
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f937 	bl	8005f4e <I2C_MasterTransmit_TXE>
 8005ce0:	e046      	b.n	8005d70 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80c2 	beq.w	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80bc 	beq.w	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	2b21      	cmp	r3, #33	; 0x21
 8005cfe:	d103      	bne.n	8005d08 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f9c0 	bl	8006086 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d06:	e0b4      	b.n	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	f040 80b1 	bne.w	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa2e 	bl	8006172 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d16:	e0ac      	b.n	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d26:	f000 80a4 	beq.w	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00d      	beq.n	8005d50 <HAL_I2C_EV_IRQHandler+0x178>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d008      	beq.n	8005d50 <HAL_I2C_EV_IRQHandler+0x178>
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d103      	bne.n	8005d50 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 faa6 	bl	800629a <I2C_MasterReceive_RXNE>
 8005d4e:	e00f      	b.n	8005d70 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 808b 	beq.w	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 8085 	beq.w	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fb51 	bl	8006410 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d6e:	e080      	b.n	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
 8005d70:	e07f      	b.n	8005e72 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e007      	b.n	8005d94 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d011      	beq.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x1ea>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00c      	beq.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005db8:	69b9      	ldr	r1, [r7, #24]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 ff11 	bl	8006be2 <I2C_Slave_ADDR>
 8005dc0:	e05a      	b.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_I2C_EV_IRQHandler+0x206>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 ff4c 	bl	8006c74 <I2C_Slave_STOPF>
 8005ddc:	e04c      	b.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	2b21      	cmp	r3, #33	; 0x21
 8005de2:	d002      	beq.n	8005dea <HAL_I2C_EV_IRQHandler+0x212>
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	2b29      	cmp	r3, #41	; 0x29
 8005de8:	d120      	bne.n	8005e2c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00d      	beq.n	8005e10 <HAL_I2C_EV_IRQHandler+0x238>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <HAL_I2C_EV_IRQHandler+0x238>
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fe2c 	bl	8006a66 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e0e:	e032      	b.n	8005e76 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d02d      	beq.n	8005e76 <HAL_I2C_EV_IRQHandler+0x29e>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d028      	beq.n	8005e76 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fe5b 	bl	8006ae0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e2a:	e024      	b.n	8005e76 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <HAL_I2C_EV_IRQHandler+0x27a>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_I2C_EV_IRQHandler+0x27a>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fe69 	bl	8006b22 <I2C_SlaveReceive_RXNE>
 8005e50:	e012      	b.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fe99 	bl	8006b9e <I2C_SlaveReceive_BTF>
 8005e6c:	e004      	b.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e76:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
 8005eda:	4613      	mov	r3, r2
 8005edc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f64:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d150      	bne.n	8006016 <I2C_MasterTransmit_TXE+0xc8>
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b21      	cmp	r3, #33	; 0x21
 8005f78:	d14d      	bne.n	8006016 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d01d      	beq.n	8005fbc <I2C_MasterTransmit_TXE+0x6e>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d01a      	beq.n	8005fbc <I2C_MasterTransmit_TXE+0x6e>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f8c:	d016      	beq.n	8005fbc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f9c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2211      	movs	r2, #17
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff ff62 	bl	8005e7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fba:	e060      	b.n	800607e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fda:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d107      	bne.n	8006006 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff ff7d 	bl	8005efe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006004:	e03b      	b.n	800607e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff ff35 	bl	8005e7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006014:	e033      	b.n	800607e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	2b21      	cmp	r3, #33	; 0x21
 800601a:	d005      	beq.n	8006028 <I2C_MasterTransmit_TXE+0xda>
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d12d      	bne.n	800607e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b22      	cmp	r3, #34	; 0x22
 8006026:	d12a      	bne.n	800607e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006040:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006042:	e01c      	b.n	800607e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d103      	bne.n	8006058 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f88e 	bl	8006172 <I2C_MemoryTransmit_TXE_BTF>
}
 8006056:	e012      	b.n	800607e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	781a      	ldrb	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800607c:	e7ff      	b.n	800607e <I2C_MasterTransmit_TXE+0x130>
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b21      	cmp	r3, #33	; 0x21
 800609e:	d164      	bne.n	800616a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d012      	beq.n	80060d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80060ce:	e04c      	b.n	800616a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d01d      	beq.n	8006112 <I2C_MasterTransmit_BTF+0x8c>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d01a      	beq.n	8006112 <I2C_MasterTransmit_BTF+0x8c>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060e2:	d016      	beq.n	8006112 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2211      	movs	r2, #17
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff feb7 	bl	8005e7e <HAL_I2C_MasterTxCpltCallback>
}
 8006110:	e02b      	b.n	800616a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006120:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006130:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d107      	bne.n	800615c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff fed2 	bl	8005efe <HAL_I2C_MemTxCpltCallback>
}
 800615a:	e006      	b.n	800616a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fe8a 	bl	8005e7e <HAL_I2C_MasterTxCpltCallback>
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006180:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006186:	2b00      	cmp	r3, #0
 8006188:	d11d      	bne.n	80061c6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618e:	2b01      	cmp	r3, #1
 8006190:	d10b      	bne.n	80061aa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006196:	b2da      	uxtb	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a2:	1c9a      	adds	r2, r3, #2
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80061a8:	e073      	b.n	8006292 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	121b      	asrs	r3, r3, #8
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061c4:	e065      	b.n	8006292 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d10b      	bne.n	80061e6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061e4:	e055      	b.n	8006292 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d151      	bne.n	8006292 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b22      	cmp	r3, #34	; 0x22
 80061f2:	d10d      	bne.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006202:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800620e:	e040      	b.n	8006292 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d015      	beq.n	8006246 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b21      	cmp	r3, #33	; 0x21
 800621e:	d112      	bne.n	8006246 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006244:	e025      	b.n	8006292 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d120      	bne.n	8006292 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b21      	cmp	r3, #33	; 0x21
 8006254:	d11d      	bne.n	8006292 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006264:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006274:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fe36 	bl	8005efe <HAL_I2C_MemTxCpltCallback>
}
 8006292:	bf00      	nop
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b22      	cmp	r3, #34	; 0x22
 80062ac:	f040 80ac 	bne.w	8006408 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d921      	bls.n	8006302 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	f040 808c 	bne.w	8006408 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fe:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006300:	e082      	b.n	8006408 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006306:	2b02      	cmp	r3, #2
 8006308:	d075      	beq.n	80063f6 <I2C_MasterReceive_RXNE+0x15c>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d002      	beq.n	8006316 <I2C_MasterReceive_RXNE+0x7c>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d16f      	bne.n	80063f6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 f990 	bl	800763c <I2C_WaitOnSTOPRequestThroughIT>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d142      	bne.n	80063a8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006330:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006340:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d10a      	bne.n	8006392 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff fdc1 	bl	8005f12 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006390:	e03a      	b.n	8006408 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2212      	movs	r2, #18
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fd76 	bl	8005e92 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063a6:	e02f      	b.n	8006408 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fd99 	bl	8005f26 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063f4:	e008      	b.n	8006408 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006404:	605a      	str	r2, [r3, #4]
}
 8006406:	e7ff      	b.n	8006408 <I2C_MasterReceive_RXNE+0x16e>
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b04      	cmp	r3, #4
 8006426:	d11b      	bne.n	8006460 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006436:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691a      	ldr	r2, [r3, #16]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006454:	b29b      	uxth	r3, r3
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800645e:	e0bd      	b.n	80065dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d129      	bne.n	80064be <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006478:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d00a      	beq.n	8006496 <I2C_MasterReceive_BTF+0x86>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d007      	beq.n	8006496 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006494:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064bc:	e08e      	b.n	80065dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d176      	bne.n	80065b6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d002      	beq.n	80064d4 <I2C_MasterReceive_BTF+0xc4>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d108      	bne.n	80064e6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e019      	b.n	800651a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d002      	beq.n	80064f2 <I2C_MasterReceive_BTF+0xe2>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d108      	bne.n	8006504 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e00a      	b.n	800651a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b10      	cmp	r3, #16
 8006508:	d007      	beq.n	800651a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006518:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006574:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d10a      	bne.n	80065a0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fcba 	bl	8005f12 <HAL_I2C_MemRxCpltCallback>
}
 800659e:	e01d      	b.n	80065dc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2212      	movs	r2, #18
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fc6f 	bl	8005e92 <HAL_I2C_MasterRxCpltCallback>
}
 80065b4:	e012      	b.n	80065dc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d117      	bne.n	8006628 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006604:	b2db      	uxtb	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006610:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006612:	e067      	b.n	80066e4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	b2db      	uxtb	r3, r3
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	b2da      	uxtb	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	611a      	str	r2, [r3, #16]
}
 8006626:	e05d      	b.n	80066e4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006630:	d133      	bne.n	800669a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b21      	cmp	r3, #33	; 0x21
 800663c:	d109      	bne.n	8006652 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	b2db      	uxtb	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800664e:	611a      	str	r2, [r3, #16]
 8006650:	e008      	b.n	8006664 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	b2da      	uxtb	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <I2C_Master_SB+0x92>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d108      	bne.n	8006688 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	2b00      	cmp	r3, #0
 800667c:	d032      	beq.n	80066e4 <I2C_Master_SB+0x100>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02d      	beq.n	80066e4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006696:	605a      	str	r2, [r3, #4]
}
 8006698:	e024      	b.n	80066e4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10e      	bne.n	80066c0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	11db      	asrs	r3, r3, #7
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0306 	and.w	r3, r3, #6
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f063 030f 	orn	r3, r3, #15
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	611a      	str	r2, [r3, #16]
}
 80066be:	e011      	b.n	80066e4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d10d      	bne.n	80066e4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	11db      	asrs	r3, r3, #7
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f003 0306 	and.w	r3, r3, #6
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	f063 030e 	orn	r3, r3, #14
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	611a      	str	r2, [r3, #16]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <I2C_Master_ADD10+0x26>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d108      	bne.n	8006728 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00c      	beq.n	8006738 <I2C_Master_ADD10+0x48>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006736:	605a      	str	r2, [r3, #4]
  }
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006744:	b480      	push	{r7}
 8006746:	b091      	sub	sp, #68	; 0x44
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006752:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b22      	cmp	r3, #34	; 0x22
 800676c:	f040 8169 	bne.w	8006a42 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10f      	bne.n	8006798 <I2C_Master_ADDR+0x54>
 8006778:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d10b      	bne.n	8006798 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006780:	2300      	movs	r3, #0
 8006782:	633b      	str	r3, [r7, #48]	; 0x30
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	633b      	str	r3, [r7, #48]	; 0x30
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	633b      	str	r3, [r7, #48]	; 0x30
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	e160      	b.n	8006a5a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11d      	bne.n	80067dc <I2C_Master_ADDR+0x98>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067a8:	d118      	bne.n	80067dc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067aa:	2300      	movs	r3, #0
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ce:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	651a      	str	r2, [r3, #80]	; 0x50
 80067da:	e13e      	b.n	8006a5a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d113      	bne.n	800680e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e6:	2300      	movs	r3, #0
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e115      	b.n	8006a3a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	f040 808a 	bne.w	800692e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006820:	d137      	bne.n	8006892 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006830:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800683c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006840:	d113      	bne.n	800686a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006850:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006852:	2300      	movs	r3, #0
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	e0e7      	b.n	8006a3a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686a:	2300      	movs	r3, #0
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	623b      	str	r3, [r7, #32]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	e0d3      	b.n	8006a3a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	2b08      	cmp	r3, #8
 8006896:	d02e      	beq.n	80068f6 <I2C_Master_ADDR+0x1b2>
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	2b20      	cmp	r3, #32
 800689c:	d02b      	beq.n	80068f6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	2b12      	cmp	r3, #18
 80068a2:	d102      	bne.n	80068aa <I2C_Master_ADDR+0x166>
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d125      	bne.n	80068f6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d00e      	beq.n	80068ce <I2C_Master_ADDR+0x18a>
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d00b      	beq.n	80068ce <I2C_Master_ADDR+0x18a>
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d008      	beq.n	80068ce <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e007      	b.n	80068de <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	e0a1      	b.n	8006a3a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006904:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	e085      	b.n	8006a3a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d14d      	bne.n	80069d4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	2b04      	cmp	r3, #4
 800693c:	d016      	beq.n	800696c <I2C_Master_ADDR+0x228>
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	2b02      	cmp	r3, #2
 8006942:	d013      	beq.n	800696c <I2C_Master_ADDR+0x228>
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	2b10      	cmp	r3, #16
 8006948:	d010      	beq.n	800696c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006958:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e007      	b.n	800697c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800697a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698a:	d117      	bne.n	80069bc <I2C_Master_ADDR+0x278>
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006992:	d00b      	beq.n	80069ac <I2C_Master_ADDR+0x268>
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	2b01      	cmp	r3, #1
 8006998:	d008      	beq.n	80069ac <I2C_Master_ADDR+0x268>
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b08      	cmp	r3, #8
 800699e:	d005      	beq.n	80069ac <I2C_Master_ADDR+0x268>
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	2b10      	cmp	r3, #16
 80069a4:	d002      	beq.n	80069ac <I2C_Master_ADDR+0x268>
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d107      	bne.n	80069bc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069ba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	e032      	b.n	8006a3a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069e2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f2:	d117      	bne.n	8006a24 <I2C_Master_ADDR+0x2e0>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069fa:	d00b      	beq.n	8006a14 <I2C_Master_ADDR+0x2d0>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d008      	beq.n	8006a14 <I2C_Master_ADDR+0x2d0>
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d005      	beq.n	8006a14 <I2C_Master_ADDR+0x2d0>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d002      	beq.n	8006a14 <I2C_Master_ADDR+0x2d0>
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	d107      	bne.n	8006a24 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006a40:	e00b      	b.n	8006a5a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
}
 8006a58:	e7ff      	b.n	8006a5a <I2C_Master_ADDR+0x316>
 8006a5a:	bf00      	nop
 8006a5c:	3744      	adds	r7, #68	; 0x44
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a74:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d02b      	beq.n	8006ad8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d114      	bne.n	8006ad8 <I2C_SlaveTransmit_TXE+0x72>
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b29      	cmp	r3, #41	; 0x29
 8006ab2:	d111      	bne.n	8006ad8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2221      	movs	r2, #33	; 0x21
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2228      	movs	r2, #40	; 0x28
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff f9e7 	bl	8005ea6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d011      	beq.n	8006b16 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	781a      	ldrb	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d02c      	beq.n	8006b96 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d114      	bne.n	8006b96 <I2C_SlaveReceive_RXNE+0x74>
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b70:	d111      	bne.n	8006b96 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2222      	movs	r2, #34	; 0x22
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2228      	movs	r2, #40	; 0x28
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff f992 	bl	8005eba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bfc:	2b28      	cmp	r3, #40	; 0x28
 8006bfe:	d125      	bne.n	8006c4c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	81bb      	strh	r3, [r7, #12]
 8006c2e:	e002      	b.n	8006c36 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006c3e:	89ba      	ldrh	r2, [r7, #12]
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff f942 	bl	8005ece <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006c4a:	e00e      	b.n	8006c6a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006c6a:	bf00      	nop
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c94:	2300      	movs	r3, #0
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd0:	d172      	bne.n	8006db8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b22      	cmp	r3, #34	; 0x22
 8006cd6:	d002      	beq.n	8006cde <I2C_Slave_STOPF+0x6a>
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	2b2a      	cmp	r3, #42	; 0x2a
 8006cdc:	d135      	bne.n	8006d4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f043 0204 	orr.w	r2, r3, #4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fd fe62 	bl	80049e0 <HAL_DMA_GetState>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d049      	beq.n	8006db6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	4a69      	ldr	r2, [pc, #420]	; (8006ecc <I2C_Slave_STOPF+0x258>)
 8006d28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fd fcaa 	bl	8004688 <HAL_DMA_Abort_IT>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d03d      	beq.n	8006db6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d48:	e035      	b.n	8006db6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f043 0204 	orr.w	r2, r3, #4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fd fe2c 	bl	80049e0 <HAL_DMA_GetState>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d014      	beq.n	8006db8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d92:	4a4e      	ldr	r2, [pc, #312]	; (8006ecc <I2C_Slave_STOPF+0x258>)
 8006d94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd fc74 	bl	8004688 <HAL_DMA_Abort_IT>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	e000      	b.n	8006db8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03e      	beq.n	8006e40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d112      	bne.n	8006df6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d112      	bne.n	8006e2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	f043 0204 	orr.w	r2, r3, #4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f843 	bl	8006ed4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006e4e:	e039      	b.n	8006ec4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	2b2a      	cmp	r3, #42	; 0x2a
 8006e54:	d109      	bne.n	8006e6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2228      	movs	r2, #40	; 0x28
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff f828 	bl	8005eba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b28      	cmp	r3, #40	; 0x28
 8006e74:	d111      	bne.n	8006e9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a15      	ldr	r2, [pc, #84]	; (8006ed0 <I2C_Slave_STOPF+0x25c>)
 8006e7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff f829 	bl	8005eea <HAL_I2C_ListenCpltCallback>
}
 8006e98:	e014      	b.n	8006ec4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	2b22      	cmp	r3, #34	; 0x22
 8006ea0:	d002      	beq.n	8006ea8 <I2C_Slave_STOPF+0x234>
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	2b22      	cmp	r3, #34	; 0x22
 8006ea6:	d10d      	bne.n	8006ec4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fe fffb 	bl	8005eba <HAL_I2C_SlaveRxCpltCallback>
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	0800723d 	.word	0x0800723d
 8006ed0:	ffff0000 	.word	0xffff0000

08006ed4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b10      	cmp	r3, #16
 8006ef0:	d002      	beq.n	8006ef8 <I2C_ITError+0x24>
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d10a      	bne.n	8006f0e <I2C_ITError+0x3a>
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	2b22      	cmp	r3, #34	; 0x22
 8006efc:	d107      	bne.n	8006f0e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f0c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f14:	2b28      	cmp	r3, #40	; 0x28
 8006f16:	d107      	bne.n	8006f28 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2228      	movs	r2, #40	; 0x28
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f26:	e015      	b.n	8006f54 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f36:	d00a      	beq.n	8006f4e <I2C_ITError+0x7a>
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b60      	cmp	r3, #96	; 0x60
 8006f3c:	d007      	beq.n	8006f4e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f62:	d162      	bne.n	800702a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f72:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d020      	beq.n	8006fc4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f86:	4a6a      	ldr	r2, [pc, #424]	; (8007130 <I2C_ITError+0x25c>)
 8006f88:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fd fb7a 	bl	8004688 <HAL_DMA_Abort_IT>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8089 	beq.w	80070ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	4798      	blx	r3
 8006fc2:	e074      	b.n	80070ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	4a59      	ldr	r2, [pc, #356]	; (8007130 <I2C_ITError+0x25c>)
 8006fca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fd fb59 	bl	8004688 <HAL_DMA_Abort_IT>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d068      	beq.n	80070ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	d10b      	bne.n	8007002 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0201 	bic.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	e041      	b.n	80070ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b60      	cmp	r3, #96	; 0x60
 8007034:	d125      	bne.n	8007082 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d10b      	bne.n	800706a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fe ff5d 	bl	8005f3a <HAL_I2C_AbortCpltCallback>
 8007080:	e015      	b.n	80070ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b40      	cmp	r3, #64	; 0x40
 800708e:	d10b      	bne.n	80070a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7fe ff3c 	bl	8005f26 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10e      	bne.n	80070dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d113      	bne.n	8007128 <I2C_ITError+0x254>
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	2b28      	cmp	r3, #40	; 0x28
 8007104:	d110      	bne.n	8007128 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <I2C_ITError+0x260>)
 800710a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fe fee1 	bl	8005eea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	0800723d 	.word	0x0800723d
 8007134:	ffff0000 	.word	0xffff0000

08007138 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	460b      	mov	r3, r1
 8007146:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d006      	beq.n	8007162 <I2C_MasterRequestWrite+0x2a>
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d003      	beq.n	8007162 <I2C_MasterRequestWrite+0x2a>
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007160:	d108      	bne.n	8007174 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e00b      	b.n	800718c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	2b12      	cmp	r3, #18
 800717a:	d107      	bne.n	800718c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800718a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f8f7 	bl	800738c <I2C_WaitOnFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00d      	beq.n	80071c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b2:	d103      	bne.n	80071bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e035      	b.n	800722c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071c8:	d108      	bne.n	80071dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071ca:	897b      	ldrh	r3, [r7, #10]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071d8:	611a      	str	r2, [r3, #16]
 80071da:	e01b      	b.n	8007214 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071dc:	897b      	ldrh	r3, [r7, #10]
 80071de:	11db      	asrs	r3, r3, #7
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	f003 0306 	and.w	r3, r3, #6
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f063 030f 	orn	r3, r3, #15
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	490e      	ldr	r1, [pc, #56]	; (8007234 <I2C_MasterRequestWrite+0xfc>)
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f91d 	bl	800743a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e010      	b.n	800722c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4907      	ldr	r1, [pc, #28]	; (8007238 <I2C_MasterRequestWrite+0x100>)
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f90d 	bl	800743a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	00010008 	.word	0x00010008
 8007238:	00010002 	.word	0x00010002

0800723c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007254:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007256:	4b4b      	ldr	r3, [pc, #300]	; (8007384 <I2C_DMAAbort+0x148>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	08db      	lsrs	r3, r3, #3
 800725c:	4a4a      	ldr	r2, [pc, #296]	; (8007388 <I2C_DMAAbort+0x14c>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	0a1a      	lsrs	r2, r3, #8
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	00da      	lsls	r2, r3, #3
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f043 0220 	orr.w	r2, r3, #32
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007282:	e00a      	b.n	800729a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3b01      	subs	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007298:	d0ea      	beq.n	8007270 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	2200      	movs	r2, #0
 80072a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	2200      	movs	r2, #0
 80072b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2200      	movs	r2, #0
 80072ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072dc:	2200      	movs	r2, #0
 80072de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	2200      	movs	r2, #0
 80072ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b60      	cmp	r3, #96	; 0x60
 800730a:	d10e      	bne.n	800732a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2200      	movs	r2, #0
 8007320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007322:	6978      	ldr	r0, [r7, #20]
 8007324:	f7fe fe09 	bl	8005f3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007328:	e027      	b.n	800737a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800732a:	7cfb      	ldrb	r3, [r7, #19]
 800732c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007330:	2b28      	cmp	r3, #40	; 0x28
 8007332:	d117      	bne.n	8007364 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0201 	orr.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007352:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2228      	movs	r2, #40	; 0x28
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007362:	e007      	b.n	8007374 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2220      	movs	r2, #32
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007374:	6978      	ldr	r0, [r7, #20]
 8007376:	f7fe fdd6 	bl	8005f26 <HAL_I2C_ErrorCallback>
}
 800737a:	bf00      	nop
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	2000000c 	.word	0x2000000c
 8007388:	14f8b589 	.word	0x14f8b589

0800738c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800739c:	e025      	b.n	80073ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a4:	d021      	beq.n	80073ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a6:	f7fc fb69 	bl	8003a7c <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d302      	bcc.n	80073bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d116      	bne.n	80073ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f043 0220 	orr.w	r2, r3, #32
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e023      	b.n	8007432 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	0c1b      	lsrs	r3, r3, #16
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d10d      	bne.n	8007410 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	43da      	mvns	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	e00c      	b.n	800742a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	43da      	mvns	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4013      	ands	r3, r2
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	bf0c      	ite	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	2300      	movne	r3, #0
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	429a      	cmp	r2, r3
 800742e:	d0b6      	beq.n	800739e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
 8007446:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007448:	e051      	b.n	80074ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007458:	d123      	bne.n	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007468:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007472:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f043 0204 	orr.w	r2, r3, #4
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e046      	b.n	8007530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d021      	beq.n	80074ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074aa:	f7fc fae7 	bl	8003a7c <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d116      	bne.n	80074ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f043 0220 	orr.w	r2, r3, #32
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e020      	b.n	8007530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	0c1b      	lsrs	r3, r3, #16
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d10c      	bne.n	8007512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	43da      	mvns	r2, r3
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4013      	ands	r3, r2
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	bf14      	ite	ne
 800750a:	2301      	movne	r3, #1
 800750c:	2300      	moveq	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e00b      	b.n	800752a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	43da      	mvns	r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	4013      	ands	r3, r2
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	bf14      	ite	ne
 8007524:	2301      	movne	r3, #1
 8007526:	2300      	moveq	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d18d      	bne.n	800744a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007544:	e02d      	b.n	80075a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f8aa 	bl	80076a0 <I2C_IsAcknowledgeFailed>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e02d      	b.n	80075b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d021      	beq.n	80075a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800755e:	f7fc fa8d 	bl	8003a7c <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	429a      	cmp	r2, r3
 800756c:	d302      	bcc.n	8007574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d116      	bne.n	80075a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e007      	b.n	80075b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	2b80      	cmp	r3, #128	; 0x80
 80075ae:	d1ca      	bne.n	8007546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075c6:	e02d      	b.n	8007624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f869 	bl	80076a0 <I2C_IsAcknowledgeFailed>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e02d      	b.n	8007634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d021      	beq.n	8007624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e0:	f7fc fa4c 	bl	8003a7c <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d302      	bcc.n	80075f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d116      	bne.n	8007624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	f043 0220 	orr.w	r2, r3, #32
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e007      	b.n	8007634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b04      	cmp	r3, #4
 8007630:	d1ca      	bne.n	80075c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007648:	4b13      	ldr	r3, [pc, #76]	; (8007698 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	08db      	lsrs	r3, r3, #3
 800764e:	4a13      	ldr	r2, [pc, #76]	; (800769c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	0a1a      	lsrs	r2, r3, #8
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3b01      	subs	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d107      	bne.n	800767a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	f043 0220 	orr.w	r2, r3, #32
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e008      	b.n	800768c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007688:	d0e9      	beq.n	800765e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	2000000c 	.word	0x2000000c
 800769c:	14f8b589 	.word	0x14f8b589

080076a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b6:	d11b      	bne.n	80076f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	f043 0204 	orr.w	r2, r3, #4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800770e:	d103      	bne.n	8007718 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007716:	e007      	b.n	8007728 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007720:	d102      	bne.n	8007728 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2208      	movs	r2, #8
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007736:	b08f      	sub	sp, #60	; 0x3c
 8007738:	af0a      	add	r7, sp, #40	; 0x28
 800773a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e10f      	b.n	8007966 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f005 ffdd 	bl	800d720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2203      	movs	r2, #3
 800776a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f002 fed8 	bl	800a53a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	687e      	ldr	r6, [r7, #4]
 8007792:	466d      	mov	r5, sp
 8007794:	f106 0410 	add.w	r4, r6, #16
 8007798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800779a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800779c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800779e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80077a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80077a8:	1d33      	adds	r3, r6, #4
 80077aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077ac:	6838      	ldr	r0, [r7, #0]
 80077ae:	f002 fdaf 	bl	800a310 <USB_CoreInit>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e0d0      	b.n	8007966 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f002 fec6 	bl	800a55c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]
 80077d4:	e04a      	b.n	800786c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80077d6:	7bfa      	ldrb	r2, [r7, #15]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	333d      	adds	r3, #61	; 0x3d
 80077e6:	2201      	movs	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80077ea:	7bfa      	ldrb	r2, [r7, #15]
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	333c      	adds	r3, #60	; 0x3c
 80077fa:	7bfa      	ldrb	r2, [r7, #15]
 80077fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80077fe:	7bfa      	ldrb	r2, [r7, #15]
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	b298      	uxth	r0, r3
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	3344      	adds	r3, #68	; 0x44
 8007812:	4602      	mov	r2, r0
 8007814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007816:	7bfa      	ldrb	r2, [r7, #15]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	3340      	adds	r3, #64	; 0x40
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800782a:	7bfa      	ldrb	r2, [r7, #15]
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	3348      	adds	r3, #72	; 0x48
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800783e:	7bfa      	ldrb	r2, [r7, #15]
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	334c      	adds	r3, #76	; 0x4c
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3354      	adds	r3, #84	; 0x54
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	3301      	adds	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	7bfa      	ldrb	r2, [r7, #15]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	429a      	cmp	r2, r3
 8007874:	d3af      	bcc.n	80077d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
 800787a:	e044      	b.n	8007906 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800787c:	7bfa      	ldrb	r2, [r7, #15]
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	4613      	mov	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800788e:	2200      	movs	r2, #0
 8007890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007892:	7bfa      	ldrb	r2, [r7, #15]
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80078a4:	7bfa      	ldrb	r2, [r7, #15]
 80078a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80078a8:	7bfa      	ldrb	r2, [r7, #15]
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	4613      	mov	r3, r2
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80078be:	7bfa      	ldrb	r2, [r7, #15]
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80078d4:	7bfa      	ldrb	r2, [r7, #15]
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	4613      	mov	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	440b      	add	r3, r1
 80078e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80078ea:	7bfa      	ldrb	r2, [r7, #15]
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	00db      	lsls	r3, r3, #3
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	3301      	adds	r3, #1
 8007904:	73fb      	strb	r3, [r7, #15]
 8007906:	7bfa      	ldrb	r2, [r7, #15]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d3b5      	bcc.n	800787c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	687e      	ldr	r6, [r7, #4]
 8007918:	466d      	mov	r5, sp
 800791a:	f106 0410 	add.w	r4, r6, #16
 800791e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800792a:	e885 0003 	stmia.w	r5, {r0, r1}
 800792e:	1d33      	adds	r3, r6, #4
 8007930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007932:	6838      	ldr	r0, [r7, #0]
 8007934:	f002 fe5e 	bl	800a5f4 <USB_DevInit>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d005      	beq.n	800794a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2202      	movs	r2, #2
 8007942:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e00d      	b.n	8007966 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f003 ffad 	bl	800b8be <USB_DevDisconnect>

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800796e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_PCD_Start+0x1c>
 8007986:	2302      	movs	r3, #2
 8007988:	e020      	b.n	80079cc <HAL_PCD_Start+0x5e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	2b01      	cmp	r3, #1
 8007998:	d109      	bne.n	80079ae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d005      	beq.n	80079ae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f002 fdb0 	bl	800a518 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f003 ff5d 	bl	800b87c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80079d4:	b590      	push	{r4, r7, lr}
 80079d6:	b08d      	sub	sp, #52	; 0x34
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f004 f81b 	bl	800ba26 <USB_GetMode>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f040 848a 	bne.w	800830c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f003 ff7f 	bl	800b900 <USB_ReadInterrupts>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8480 	beq.w	800830a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	0a1b      	lsrs	r3, r3, #8
 8007a14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f003 ff6c 	bl	800b900 <USB_ReadInterrupts>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d107      	bne.n	8007a42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	695a      	ldr	r2, [r3, #20]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f002 0202 	and.w	r2, r2, #2
 8007a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f003 ff5a 	bl	800b900 <USB_ReadInterrupts>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	2b10      	cmp	r3, #16
 8007a54:	d161      	bne.n	8007b1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699a      	ldr	r2, [r3, #24]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0210 	bic.w	r2, r2, #16
 8007a64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f003 020f 	and.w	r2, r3, #15
 8007a72:	4613      	mov	r3, r2
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	3304      	adds	r3, #4
 8007a84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	0c5b      	lsrs	r3, r3, #17
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d124      	bne.n	8007adc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d035      	beq.n	8007b0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	091b      	lsrs	r3, r3, #4
 8007aa6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6a38      	ldr	r0, [r7, #32]
 8007ab2:	f003 fd91 	bl	800b5d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	091b      	lsrs	r3, r3, #4
 8007abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ac2:	441a      	add	r2, r3
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	6a1a      	ldr	r2, [r3, #32]
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	091b      	lsrs	r3, r3, #4
 8007ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ad4:	441a      	add	r2, r3
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	621a      	str	r2, [r3, #32]
 8007ada:	e016      	b.n	8007b0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	0c5b      	lsrs	r3, r3, #17
 8007ae0:	f003 030f 	and.w	r3, r3, #15
 8007ae4:	2b06      	cmp	r3, #6
 8007ae6:	d110      	bne.n	8007b0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007aee:	2208      	movs	r2, #8
 8007af0:	4619      	mov	r1, r3
 8007af2:	6a38      	ldr	r0, [r7, #32]
 8007af4:	f003 fd70 	bl	800b5d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	6a1a      	ldr	r2, [r3, #32]
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	091b      	lsrs	r3, r3, #4
 8007b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b04:	441a      	add	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699a      	ldr	r2, [r3, #24]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0210 	orr.w	r2, r2, #16
 8007b18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f003 feee 	bl	800b900 <USB_ReadInterrupts>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b2e:	f040 80a7 	bne.w	8007c80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f003 fef3 	bl	800b926 <USB_ReadDevAllOutEpInterrupt>
 8007b40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007b42:	e099      	b.n	8007c78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 808e 	beq.w	8007c6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f003 ff17 	bl	800b98e <USB_ReadDevOutEPInterrupt>
 8007b60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00c      	beq.n	8007b86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 feab 	bl	80088dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00c      	beq.n	8007baa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 ff81 	bl	8008aac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	2310      	movs	r3, #16
 8007bc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d030      	beq.n	8007c32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd8:	2b80      	cmp	r3, #128	; 0x80
 8007bda:	d109      	bne.n	8007bf0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	3304      	adds	r3, #4
 8007c04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	78db      	ldrb	r3, [r3, #3]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d108      	bne.n	8007c20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2200      	movs	r2, #0
 8007c12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f005 fe7c 	bl	800d918 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	2302      	movs	r3, #2
 8007c30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d008      	beq.n	8007c4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	461a      	mov	r2, r3
 8007c4a:	2320      	movs	r3, #32
 8007c4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d009      	beq.n	8007c6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c64:	461a      	mov	r2, r3
 8007c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	3301      	adds	r3, #1
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	085b      	lsrs	r3, r3, #1
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f47f af62 	bne.w	8007b44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f003 fe3b 	bl	800b900 <USB_ReadInterrupts>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c94:	f040 80db 	bne.w	8007e4e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f003 fe5c 	bl	800b95a <USB_ReadDevAllInEpInterrupt>
 8007ca2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007ca8:	e0cd      	b.n	8007e46 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 80c2 	beq.w	8007e3a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cbc:	b2d2      	uxtb	r2, r2
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f003 fe82 	bl	800b9ca <USB_ReadDevInEPInterrupt>
 8007cc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d057      	beq.n	8007d82 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	2201      	movs	r2, #1
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	43db      	mvns	r3, r3
 8007cec:	69f9      	ldr	r1, [r7, #28]
 8007cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d02:	461a      	mov	r2, r3
 8007d04:	2301      	movs	r3, #1
 8007d06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d132      	bne.n	8007d76 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d14:	4613      	mov	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	334c      	adds	r3, #76	; 0x4c
 8007d20:	6819      	ldr	r1, [r3, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d26:	4613      	mov	r3, r2
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4403      	add	r3, r0
 8007d30:	3348      	adds	r3, #72	; 0x48
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4419      	add	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4403      	add	r3, r0
 8007d44:	334c      	adds	r3, #76	; 0x4c
 8007d46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d113      	bne.n	8007d76 <HAL_PCD_IRQHandler+0x3a2>
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d52:	4613      	mov	r3, r2
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	3354      	adds	r3, #84	; 0x54
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d108      	bne.n	8007d76 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d6e:	461a      	mov	r2, r3
 8007d70:	2101      	movs	r1, #1
 8007d72:	f003 fe89 	bl	800ba88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f005 fd50 	bl	800d822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	461a      	mov	r2, r3
 8007d9a:	2308      	movs	r3, #8
 8007d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db4:	461a      	mov	r2, r3
 8007db6:	2310      	movs	r3, #16
 8007db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	2340      	movs	r3, #64	; 0x40
 8007dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d023      	beq.n	8007e28 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007de2:	6a38      	ldr	r0, [r7, #32]
 8007de4:	f002 fd6a 	bl	800a8bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dea:	4613      	mov	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	3338      	adds	r3, #56	; 0x38
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	4413      	add	r3, r2
 8007df8:	3304      	adds	r3, #4
 8007dfa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	78db      	ldrb	r3, [r3, #3]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d108      	bne.n	8007e16 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2200      	movs	r2, #0
 8007e08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f005 fd93 	bl	800d93c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e22:	461a      	mov	r2, r3
 8007e24:	2302      	movs	r3, #2
 8007e26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fcc3 	bl	80087c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	085b      	lsrs	r3, r3, #1
 8007e44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f47f af2e 	bne.w	8007caa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f003 fd54 	bl	800b900 <USB_ReadInterrupts>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e62:	d122      	bne.n	8007eaa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d108      	bne.n	8007e94 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 feab 	bl	8008be8 <HAL_PCDEx_LPM_Callback>
 8007e92:	e002      	b.n	8007e9a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f005 fd31 	bl	800d8fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695a      	ldr	r2, [r3, #20]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f003 fd26 	bl	800b900 <USB_ReadInterrupts>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ebe:	d112      	bne.n	8007ee6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d102      	bne.n	8007ed6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f005 fced 	bl	800d8b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	695a      	ldr	r2, [r3, #20]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007ee4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f003 fd08 	bl	800b900 <USB_ReadInterrupts>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efa:	f040 80b7 	bne.w	800806c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f0c:	f023 0301 	bic.w	r3, r3, #1
 8007f10:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2110      	movs	r1, #16
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f002 fccf 	bl	800a8bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f1e:	2300      	movs	r3, #0
 8007f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f22:	e046      	b.n	8007fb2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	461a      	mov	r2, r3
 8007f32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f36:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f48:	0151      	lsls	r1, r2, #5
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	461a      	mov	r2, r3
 8007f66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f7c:	0151      	lsls	r1, r2, #5
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	440a      	add	r2, r1
 8007f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f9c:	0151      	lsls	r1, r2, #5
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	440a      	add	r2, r1
 8007fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007faa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	3301      	adds	r3, #1
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d3b3      	bcc.n	8007f24 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	69fa      	ldr	r2, [r7, #28]
 8007fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007fce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d016      	beq.n	8008006 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fe8:	f043 030b 	orr.w	r3, r3, #11
 8007fec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ffe:	f043 030b 	orr.w	r3, r3, #11
 8008002:	6453      	str	r3, [r2, #68]	; 0x44
 8008004:	e015      	b.n	8008032 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008018:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800801c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800802c:	f043 030b 	orr.w	r3, r3, #11
 8008030:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008040:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008044:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008056:	461a      	mov	r2, r3
 8008058:	f003 fd16 	bl	800ba88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695a      	ldr	r2, [r3, #20]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800806a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f003 fc45 	bl	800b900 <USB_ReadInterrupts>
 8008076:	4603      	mov	r3, r0
 8008078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800807c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008080:	d124      	bne.n	80080cc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f003 fcdb 	bl	800ba42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f002 fc90 	bl	800a9b6 <USB_GetDevSpeed>
 8008096:	4603      	mov	r3, r0
 8008098:	461a      	mov	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681c      	ldr	r4, [r3, #0]
 80080a2:	f001 f9d1 	bl	8009448 <HAL_RCC_GetHCLKFreq>
 80080a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	4620      	mov	r0, r4
 80080b2:	f002 f98f 	bl	800a3d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f005 fbdb 	bl	800d872 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695a      	ldr	r2, [r3, #20]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80080ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f003 fc15 	bl	800b900 <USB_ReadInterrupts>
 80080d6:	4603      	mov	r3, r0
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d10a      	bne.n	80080f6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f005 fbb8 	bl	800d856 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	695a      	ldr	r2, [r3, #20]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f002 0208 	and.w	r2, r2, #8
 80080f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f003 fc00 	bl	800b900 <USB_ReadInterrupts>
 8008100:	4603      	mov	r3, r0
 8008102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008106:	2b80      	cmp	r3, #128	; 0x80
 8008108:	d122      	bne.n	8008150 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008116:	2301      	movs	r3, #1
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
 800811a:	e014      	b.n	8008146 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008120:	4613      	mov	r3, r2
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d105      	bne.n	8008140 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	b2db      	uxtb	r3, r3
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fb0f 	bl	800875e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	3301      	adds	r3, #1
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814c:	429a      	cmp	r2, r3
 800814e:	d3e5      	bcc.n	800811c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4618      	mov	r0, r3
 8008156:	f003 fbd3 	bl	800b900 <USB_ReadInterrupts>
 800815a:	4603      	mov	r3, r0
 800815c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008164:	d13b      	bne.n	80081de <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008166:	2301      	movs	r3, #1
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
 800816a:	e02b      	b.n	80081c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008180:	4613      	mov	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	3340      	adds	r3, #64	; 0x40
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d115      	bne.n	80081be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008192:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008194:	2b00      	cmp	r3, #0
 8008196:	da12      	bge.n	80081be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819c:	4613      	mov	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	333f      	adds	r3, #63	; 0x3f
 80081a8:	2201      	movs	r2, #1
 80081aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fad0 	bl	800875e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	3301      	adds	r3, #1
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d3ce      	bcc.n	800816c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695a      	ldr	r2, [r3, #20]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80081dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f003 fb8c 	bl	800b900 <USB_ReadInterrupts>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081f2:	d155      	bne.n	80082a0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081f4:	2301      	movs	r3, #1
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
 80081f8:	e045      	b.n	8008286 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820e:	4613      	mov	r3, r2
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d12e      	bne.n	8008280 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008222:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008224:	2b00      	cmp	r3, #0
 8008226:	da2b      	bge.n	8008280 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008234:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008238:	429a      	cmp	r2, r3
 800823a:	d121      	bne.n	8008280 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008240:	4613      	mov	r3, r2
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	440b      	add	r3, r1
 800824a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800824e:	2201      	movs	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10a      	bne.n	8008280 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800827c:	6053      	str	r3, [r2, #4]
            break;
 800827e:	e007      	b.n	8008290 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	3301      	adds	r3, #1
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828c:	429a      	cmp	r2, r3
 800828e:	d3b4      	bcc.n	80081fa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695a      	ldr	r2, [r3, #20]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800829e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f003 fb2b 	bl	800b900 <USB_ReadInterrupts>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b4:	d10a      	bne.n	80082cc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f005 fb52 	bl	800d960 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695a      	ldr	r2, [r3, #20]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80082ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f003 fb15 	bl	800b900 <USB_ReadInterrupts>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d115      	bne.n	800830c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f005 fb42 	bl	800d97c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6859      	ldr	r1, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	430a      	orrs	r2, r1
 8008306:	605a      	str	r2, [r3, #4]
 8008308:	e000      	b.n	800830c <HAL_PCD_IRQHandler+0x938>
      return;
 800830a:	bf00      	nop
    }
  }
}
 800830c:	3734      	adds	r7, #52	; 0x34
 800830e:	46bd      	mov	sp, r7
 8008310:	bd90      	pop	{r4, r7, pc}

08008312 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_PCD_SetAddress+0x1a>
 8008328:	2302      	movs	r3, #2
 800832a:	e013      	b.n	8008354 <HAL_PCD_SetAddress+0x42>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	4611      	mov	r1, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f003 fa73 	bl	800b830 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	4608      	mov	r0, r1
 8008366:	4611      	mov	r1, r2
 8008368:	461a      	mov	r2, r3
 800836a:	4603      	mov	r3, r0
 800836c:	70fb      	strb	r3, [r7, #3]
 800836e:	460b      	mov	r3, r1
 8008370:	803b      	strh	r3, [r7, #0]
 8008372:	4613      	mov	r3, r2
 8008374:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800837a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800837e:	2b00      	cmp	r3, #0
 8008380:	da0f      	bge.n	80083a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	f003 020f 	and.w	r2, r3, #15
 8008388:	4613      	mov	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	3338      	adds	r3, #56	; 0x38
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4413      	add	r3, r2
 8008396:	3304      	adds	r3, #4
 8008398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	705a      	strb	r2, [r3, #1]
 80083a0:	e00f      	b.n	80083c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083a2:	78fb      	ldrb	r3, [r7, #3]
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	4613      	mov	r3, r2
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	4413      	add	r3, r2
 80083b8:	3304      	adds	r3, #4
 80083ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80083ce:	883a      	ldrh	r2, [r7, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	78ba      	ldrb	r2, [r7, #2]
 80083d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	785b      	ldrb	r3, [r3, #1]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d004      	beq.n	80083ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80083ec:	78bb      	ldrb	r3, [r7, #2]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d102      	bne.n	80083f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d101      	bne.n	8008406 <HAL_PCD_EP_Open+0xaa>
 8008402:	2302      	movs	r3, #2
 8008404:	e00e      	b.n	8008424 <HAL_PCD_EP_Open+0xc8>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68f9      	ldr	r1, [r7, #12]
 8008414:	4618      	mov	r0, r3
 8008416:	f002 faf3 	bl	800aa00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008422:	7afb      	ldrb	r3, [r7, #11]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800843c:	2b00      	cmp	r3, #0
 800843e:	da0f      	bge.n	8008460 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	f003 020f 	and.w	r2, r3, #15
 8008446:	4613      	mov	r3, r2
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	3338      	adds	r3, #56	; 0x38
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	3304      	adds	r3, #4
 8008456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	705a      	strb	r2, [r3, #1]
 800845e:	e00f      	b.n	8008480 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	f003 020f 	and.w	r2, r3, #15
 8008466:	4613      	mov	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	4413      	add	r3, r2
 8008476:	3304      	adds	r3, #4
 8008478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	b2da      	uxtb	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008492:	2b01      	cmp	r3, #1
 8008494:	d101      	bne.n	800849a <HAL_PCD_EP_Close+0x6e>
 8008496:	2302      	movs	r3, #2
 8008498:	e00e      	b.n	80084b8 <HAL_PCD_EP_Close+0x8c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68f9      	ldr	r1, [r7, #12]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f002 fb31 	bl	800ab10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	607a      	str	r2, [r7, #4]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	460b      	mov	r3, r1
 80084ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084d0:	7afb      	ldrb	r3, [r7, #11]
 80084d2:	f003 020f 	and.w	r2, r3, #15
 80084d6:	4613      	mov	r3, r2
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	3304      	adds	r3, #4
 80084e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2200      	movs	r2, #0
 80084fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2200      	movs	r2, #0
 8008500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	b2da      	uxtb	r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d102      	bne.n	800851c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	f003 030f 	and.w	r3, r3, #15
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	b2db      	uxtb	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	6979      	ldr	r1, [r7, #20]
 8008534:	f002 fe10 	bl	800b158 <USB_EP0StartXfer>
 8008538:	e008      	b.n	800854c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6818      	ldr	r0, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	461a      	mov	r2, r3
 8008546:	6979      	ldr	r1, [r7, #20]
 8008548:	f002 fbbe 	bl	800acc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b086      	sub	sp, #24
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	460b      	mov	r3, r1
 8008564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	f003 020f 	and.w	r2, r3, #15
 800856c:	4613      	mov	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	3338      	adds	r3, #56	; 0x38
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	3304      	adds	r3, #4
 800857c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2200      	movs	r2, #0
 800858e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2201      	movs	r2, #1
 8008594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	b2da      	uxtb	r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d102      	bne.n	80085b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	f002 fdc6 	bl	800b158 <USB_EP0StartXfer>
 80085cc:	e008      	b.n	80085e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	6979      	ldr	r1, [r7, #20]
 80085dc:	f002 fb74 	bl	800acc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	f003 020f 	and.w	r2, r3, #15
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d901      	bls.n	8008608 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e050      	b.n	80086aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800860c:	2b00      	cmp	r3, #0
 800860e:	da0f      	bge.n	8008630 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	f003 020f 	and.w	r2, r3, #15
 8008616:	4613      	mov	r3, r2
 8008618:	00db      	lsls	r3, r3, #3
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	3338      	adds	r3, #56	; 0x38
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	4413      	add	r3, r2
 8008624:	3304      	adds	r3, #4
 8008626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2201      	movs	r2, #1
 800862c:	705a      	strb	r2, [r3, #1]
 800862e:	e00d      	b.n	800864c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	4613      	mov	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	3304      	adds	r3, #4
 8008644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 030f 	and.w	r3, r3, #15
 8008658:	b2da      	uxtb	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008664:	2b01      	cmp	r3, #1
 8008666:	d101      	bne.n	800866c <HAL_PCD_EP_SetStall+0x82>
 8008668:	2302      	movs	r3, #2
 800866a:	e01e      	b.n	80086aa <HAL_PCD_EP_SetStall+0xc0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68f9      	ldr	r1, [r7, #12]
 800867a:	4618      	mov	r0, r3
 800867c:	f003 f804 	bl	800b688 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	b2d9      	uxtb	r1, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800869a:	461a      	mov	r2, r3
 800869c:	f003 f9f4 	bl	800ba88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	f003 020f 	and.w	r2, r3, #15
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d901      	bls.n	80086d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e042      	b.n	8008756 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80086d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da0f      	bge.n	80086f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	f003 020f 	and.w	r2, r3, #15
 80086de:	4613      	mov	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	3338      	adds	r3, #56	; 0x38
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	4413      	add	r3, r2
 80086ec:	3304      	adds	r3, #4
 80086ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	705a      	strb	r2, [r3, #1]
 80086f6:	e00f      	b.n	8008718 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	f003 020f 	and.w	r2, r3, #15
 80086fe:	4613      	mov	r3, r2
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	3304      	adds	r3, #4
 8008710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	b2da      	uxtb	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008730:	2b01      	cmp	r3, #1
 8008732:	d101      	bne.n	8008738 <HAL_PCD_EP_ClrStall+0x86>
 8008734:	2302      	movs	r3, #2
 8008736:	e00e      	b.n	8008756 <HAL_PCD_EP_ClrStall+0xa4>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68f9      	ldr	r1, [r7, #12]
 8008746:	4618      	mov	r0, r3
 8008748:	f003 f80c 	bl	800b764 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800876a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800876e:	2b00      	cmp	r3, #0
 8008770:	da0c      	bge.n	800878c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	f003 020f 	and.w	r2, r3, #15
 8008778:	4613      	mov	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	3338      	adds	r3, #56	; 0x38
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	3304      	adds	r3, #4
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	e00c      	b.n	80087a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	f003 020f 	and.w	r2, r3, #15
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	3304      	adds	r3, #4
 80087a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f002 fe2b 	bl	800b408 <USB_EPStopXfer>
 80087b2:	4603      	mov	r3, r0
 80087b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80087b6:	7afb      	ldrb	r3, [r7, #11]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	; 0x28
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	4613      	mov	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	3338      	adds	r3, #56	; 0x38
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	4413      	add	r3, r2
 80087e4:	3304      	adds	r3, #4
 80087e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a1a      	ldr	r2, [r3, #32]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d901      	bls.n	80087f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e06c      	b.n	80088d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	429a      	cmp	r2, r3
 800880c:	d902      	bls.n	8008814 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	3303      	adds	r3, #3
 8008818:	089b      	lsrs	r3, r3, #2
 800881a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800881c:	e02b      	b.n	8008876 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	69fa      	ldr	r2, [r7, #28]
 8008830:	429a      	cmp	r2, r3
 8008832:	d902      	bls.n	800883a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	3303      	adds	r3, #3
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6919      	ldr	r1, [r3, #16]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	b2da      	uxtb	r2, r3
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008852:	b2db      	uxtb	r3, r3
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	4603      	mov	r3, r0
 8008858:	6978      	ldr	r0, [r7, #20]
 800885a:	f002 fe7f 	bl	800b55c <USB_WritePacket>

    ep->xfer_buff  += len;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	691a      	ldr	r2, [r3, #16]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1a      	ldr	r2, [r3, #32]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	441a      	add	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	429a      	cmp	r2, r3
 800888a:	d809      	bhi.n	80088a0 <PCD_WriteEmptyTxFifo+0xe0>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a1a      	ldr	r2, [r3, #32]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008894:	429a      	cmp	r2, r3
 8008896:	d203      	bcs.n	80088a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1be      	bne.n	800881e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d811      	bhi.n	80088d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	2201      	movs	r2, #1
 80088b4:	fa02 f303 	lsl.w	r3, r2, r3
 80088b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	43db      	mvns	r3, r3
 80088c6:	6939      	ldr	r1, [r7, #16]
 80088c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088cc:	4013      	ands	r3, r2
 80088ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	333c      	adds	r3, #60	; 0x3c
 80088f4:	3304      	adds	r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d17b      	bne.n	8008a0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f003 0308 	and.w	r3, r3, #8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d015      	beq.n	8008948 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4a61      	ldr	r2, [pc, #388]	; (8008aa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	f240 80b9 	bls.w	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80b3 	beq.w	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893e:	461a      	mov	r2, r3
 8008940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008944:	6093      	str	r3, [r2, #8]
 8008946:	e0a7      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895e:	461a      	mov	r2, r3
 8008960:	2320      	movs	r3, #32
 8008962:	6093      	str	r3, [r2, #8]
 8008964:	e098      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800896c:	2b00      	cmp	r3, #0
 800896e:	f040 8093 	bne.w	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	4a4b      	ldr	r2, [pc, #300]	; (8008aa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d90f      	bls.n	800899a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00a      	beq.n	800899a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008990:	461a      	mov	r2, r3
 8008992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008996:	6093      	str	r3, [r2, #8]
 8008998:	e07e      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	3304      	adds	r3, #4
 80089ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	69da      	ldr	r2, [r3, #28]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	0159      	lsls	r1, r3, #5
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	440b      	add	r3, r1
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c6:	1ad2      	subs	r2, r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d114      	bne.n	80089fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d109      	bne.n	80089ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089e4:	461a      	mov	r2, r3
 80089e6:	2101      	movs	r1, #1
 80089e8:	f003 f84e 	bl	800ba88 <USB_EP0_OutStart>
 80089ec:	e006      	b.n	80089fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	691a      	ldr	r2, [r3, #16]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	441a      	add	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f004 fef2 	bl	800d7ec <HAL_PCD_DataOutStageCallback>
 8008a08:	e046      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4a26      	ldr	r2, [pc, #152]	; (8008aa8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d124      	bne.n	8008a5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a2e:	6093      	str	r3, [r2, #8]
 8008a30:	e032      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d008      	beq.n	8008a4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f004 fec9 	bl	800d7ec <HAL_PCD_DataOutStageCallback>
 8008a5a:	e01d      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d114      	bne.n	8008a8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	4613      	mov	r3, r2
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d108      	bne.n	8008a8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a84:	461a      	mov	r2, r3
 8008a86:	2100      	movs	r1, #0
 8008a88:	f002 fffe 	bl	800ba88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f004 feaa 	bl	800d7ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	4f54300a 	.word	0x4f54300a
 8008aa8:	4f54310a 	.word	0x4f54310a

08008aac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	333c      	adds	r3, #60	; 0x3c
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d90e      	bls.n	8008b00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af8:	461a      	mov	r2, r3
 8008afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008afe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f004 fe61 	bl	800d7c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <PCD_EP_OutSetupPacket_int+0x88>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d90c      	bls.n	8008b28 <PCD_EP_OutSetupPacket_int+0x7c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d108      	bne.n	8008b28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b20:	461a      	mov	r2, r3
 8008b22:	2101      	movs	r1, #1
 8008b24:	f002 ffb0 	bl	800ba88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	4f54300a 	.word	0x4f54300a

08008b38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
 8008b44:	4613      	mov	r3, r2
 8008b46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d107      	bne.n	8008b66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008b56:	883b      	ldrh	r3, [r7, #0]
 8008b58:	0419      	lsls	r1, r3, #16
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	629a      	str	r2, [r3, #40]	; 0x28
 8008b64:	e028      	b.n	8008bb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6c:	0c1b      	lsrs	r3, r3, #16
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	e00d      	b.n	8008b96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	3340      	adds	r3, #64	; 0x40
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	0c1b      	lsrs	r3, r3, #16
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	3301      	adds	r3, #1
 8008b94:	73fb      	strb	r3, [r7, #15]
 8008b96:	7bfa      	ldrb	r2, [r7, #15]
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3ec      	bcc.n	8008b7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008ba0:	883b      	ldrh	r3, [r7, #0]
 8008ba2:	0418      	lsls	r0, r3, #16
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6819      	ldr	r1, [r3, #0]
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	4302      	orrs	r2, r0
 8008bb0:	3340      	adds	r3, #64	; 0x40
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	887a      	ldrh	r2, [r7, #2]
 8008bd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e267      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d075      	beq.n	8008d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c1e:	4b88      	ldr	r3, [pc, #544]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f003 030c 	and.w	r3, r3, #12
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d00c      	beq.n	8008c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c2a:	4b85      	ldr	r3, [pc, #532]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	d112      	bne.n	8008c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c36:	4b82      	ldr	r3, [pc, #520]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c42:	d10b      	bne.n	8008c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c44:	4b7e      	ldr	r3, [pc, #504]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d05b      	beq.n	8008d08 <HAL_RCC_OscConfig+0x108>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d157      	bne.n	8008d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e242      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c64:	d106      	bne.n	8008c74 <HAL_RCC_OscConfig+0x74>
 8008c66:	4b76      	ldr	r3, [pc, #472]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a75      	ldr	r2, [pc, #468]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	e01d      	b.n	8008cb0 <HAL_RCC_OscConfig+0xb0>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c7c:	d10c      	bne.n	8008c98 <HAL_RCC_OscConfig+0x98>
 8008c7e:	4b70      	ldr	r3, [pc, #448]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a6f      	ldr	r2, [pc, #444]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	4b6d      	ldr	r3, [pc, #436]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a6c      	ldr	r2, [pc, #432]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	e00b      	b.n	8008cb0 <HAL_RCC_OscConfig+0xb0>
 8008c98:	4b69      	ldr	r3, [pc, #420]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a68      	ldr	r2, [pc, #416]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	4b66      	ldr	r3, [pc, #408]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a65      	ldr	r2, [pc, #404]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d013      	beq.n	8008ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb8:	f7fa fee0 	bl	8003a7c <HAL_GetTick>
 8008cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cc0:	f7fa fedc 	bl	8003a7c <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b64      	cmp	r3, #100	; 0x64
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e207      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cd2:	4b5b      	ldr	r3, [pc, #364]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0f0      	beq.n	8008cc0 <HAL_RCC_OscConfig+0xc0>
 8008cde:	e014      	b.n	8008d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce0:	f7fa fecc 	bl	8003a7c <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ce8:	f7fa fec8 	bl	8003a7c <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b64      	cmp	r3, #100	; 0x64
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e1f3      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cfa:	4b51      	ldr	r3, [pc, #324]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1f0      	bne.n	8008ce8 <HAL_RCC_OscConfig+0xe8>
 8008d06:	e000      	b.n	8008d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d063      	beq.n	8008dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d16:	4b4a      	ldr	r3, [pc, #296]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f003 030c 	and.w	r3, r3, #12
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00b      	beq.n	8008d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d22:	4b47      	ldr	r3, [pc, #284]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d2a:	2b08      	cmp	r3, #8
 8008d2c:	d11c      	bne.n	8008d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d2e:	4b44      	ldr	r3, [pc, #272]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d116      	bne.n	8008d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d3a:	4b41      	ldr	r3, [pc, #260]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d005      	beq.n	8008d52 <HAL_RCC_OscConfig+0x152>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d001      	beq.n	8008d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e1c7      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d52:	4b3b      	ldr	r3, [pc, #236]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4937      	ldr	r1, [pc, #220]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d66:	e03a      	b.n	8008dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d020      	beq.n	8008db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d70:	4b34      	ldr	r3, [pc, #208]	; (8008e44 <HAL_RCC_OscConfig+0x244>)
 8008d72:	2201      	movs	r2, #1
 8008d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d76:	f7fa fe81 	bl	8003a7c <HAL_GetTick>
 8008d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d7c:	e008      	b.n	8008d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d7e:	f7fa fe7d 	bl	8003a7c <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d901      	bls.n	8008d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e1a8      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d90:	4b2b      	ldr	r3, [pc, #172]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0302 	and.w	r3, r3, #2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0f0      	beq.n	8008d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d9c:	4b28      	ldr	r3, [pc, #160]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	00db      	lsls	r3, r3, #3
 8008daa:	4925      	ldr	r1, [pc, #148]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	600b      	str	r3, [r1, #0]
 8008db0:	e015      	b.n	8008dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008db2:	4b24      	ldr	r3, [pc, #144]	; (8008e44 <HAL_RCC_OscConfig+0x244>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db8:	f7fa fe60 	bl	8003a7c <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dc0:	f7fa fe5c 	bl	8003a7c <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e187      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dd2:	4b1b      	ldr	r3, [pc, #108]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1f0      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d036      	beq.n	8008e58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d016      	beq.n	8008e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008df2:	4b15      	ldr	r3, [pc, #84]	; (8008e48 <HAL_RCC_OscConfig+0x248>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df8:	f7fa fe40 	bl	8003a7c <HAL_GetTick>
 8008dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dfe:	e008      	b.n	8008e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e00:	f7fa fe3c 	bl	8003a7c <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e167      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e12:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <HAL_RCC_OscConfig+0x240>)
 8008e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f0      	beq.n	8008e00 <HAL_RCC_OscConfig+0x200>
 8008e1e:	e01b      	b.n	8008e58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e20:	4b09      	ldr	r3, [pc, #36]	; (8008e48 <HAL_RCC_OscConfig+0x248>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e26:	f7fa fe29 	bl	8003a7c <HAL_GetTick>
 8008e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e2c:	e00e      	b.n	8008e4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e2e:	f7fa fe25 	bl	8003a7c <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d907      	bls.n	8008e4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e150      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
 8008e40:	40023800 	.word	0x40023800
 8008e44:	42470000 	.word	0x42470000
 8008e48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e4c:	4b88      	ldr	r3, [pc, #544]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e50:	f003 0302 	and.w	r3, r3, #2
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1ea      	bne.n	8008e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8097 	beq.w	8008f94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e6a:	4b81      	ldr	r3, [pc, #516]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10f      	bne.n	8008e96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e76:	2300      	movs	r3, #0
 8008e78:	60bb      	str	r3, [r7, #8]
 8008e7a:	4b7d      	ldr	r3, [pc, #500]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	4a7c      	ldr	r2, [pc, #496]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e84:	6413      	str	r3, [r2, #64]	; 0x40
 8008e86:	4b7a      	ldr	r3, [pc, #488]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e8e:	60bb      	str	r3, [r7, #8]
 8008e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e92:	2301      	movs	r3, #1
 8008e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e96:	4b77      	ldr	r3, [pc, #476]	; (8009074 <HAL_RCC_OscConfig+0x474>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d118      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ea2:	4b74      	ldr	r3, [pc, #464]	; (8009074 <HAL_RCC_OscConfig+0x474>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a73      	ldr	r2, [pc, #460]	; (8009074 <HAL_RCC_OscConfig+0x474>)
 8008ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eae:	f7fa fde5 	bl	8003a7c <HAL_GetTick>
 8008eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb4:	e008      	b.n	8008ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eb6:	f7fa fde1 	bl	8003a7c <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d901      	bls.n	8008ec8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e10c      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ec8:	4b6a      	ldr	r3, [pc, #424]	; (8009074 <HAL_RCC_OscConfig+0x474>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0f0      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d106      	bne.n	8008eea <HAL_RCC_OscConfig+0x2ea>
 8008edc:	4b64      	ldr	r3, [pc, #400]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee0:	4a63      	ldr	r2, [pc, #396]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008ee2:	f043 0301 	orr.w	r3, r3, #1
 8008ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ee8:	e01c      	b.n	8008f24 <HAL_RCC_OscConfig+0x324>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d10c      	bne.n	8008f0c <HAL_RCC_OscConfig+0x30c>
 8008ef2:	4b5f      	ldr	r3, [pc, #380]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef6:	4a5e      	ldr	r2, [pc, #376]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008ef8:	f043 0304 	orr.w	r3, r3, #4
 8008efc:	6713      	str	r3, [r2, #112]	; 0x70
 8008efe:	4b5c      	ldr	r3, [pc, #368]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f02:	4a5b      	ldr	r2, [pc, #364]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f04:	f043 0301 	orr.w	r3, r3, #1
 8008f08:	6713      	str	r3, [r2, #112]	; 0x70
 8008f0a:	e00b      	b.n	8008f24 <HAL_RCC_OscConfig+0x324>
 8008f0c:	4b58      	ldr	r3, [pc, #352]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f10:	4a57      	ldr	r2, [pc, #348]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f12:	f023 0301 	bic.w	r3, r3, #1
 8008f16:	6713      	str	r3, [r2, #112]	; 0x70
 8008f18:	4b55      	ldr	r3, [pc, #340]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1c:	4a54      	ldr	r2, [pc, #336]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f1e:	f023 0304 	bic.w	r3, r3, #4
 8008f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d015      	beq.n	8008f58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f2c:	f7fa fda6 	bl	8003a7c <HAL_GetTick>
 8008f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f32:	e00a      	b.n	8008f4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f34:	f7fa fda2 	bl	8003a7c <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e0cb      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f4a:	4b49      	ldr	r3, [pc, #292]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0ee      	beq.n	8008f34 <HAL_RCC_OscConfig+0x334>
 8008f56:	e014      	b.n	8008f82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f58:	f7fa fd90 	bl	8003a7c <HAL_GetTick>
 8008f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f5e:	e00a      	b.n	8008f76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f60:	f7fa fd8c 	bl	8003a7c <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d901      	bls.n	8008f76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e0b5      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f76:	4b3e      	ldr	r3, [pc, #248]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7a:	f003 0302 	and.w	r3, r3, #2
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1ee      	bne.n	8008f60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d105      	bne.n	8008f94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f88:	4b39      	ldr	r3, [pc, #228]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	4a38      	ldr	r2, [pc, #224]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80a1 	beq.w	80090e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f9e:	4b34      	ldr	r3, [pc, #208]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 030c 	and.w	r3, r3, #12
 8008fa6:	2b08      	cmp	r3, #8
 8008fa8:	d05c      	beq.n	8009064 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d141      	bne.n	8009036 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fb2:	4b31      	ldr	r3, [pc, #196]	; (8009078 <HAL_RCC_OscConfig+0x478>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb8:	f7fa fd60 	bl	8003a7c <HAL_GetTick>
 8008fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fc0:	f7fa fd5c 	bl	8003a7c <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e087      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fd2:	4b27      	ldr	r3, [pc, #156]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1f0      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69da      	ldr	r2, [r3, #28]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	019b      	lsls	r3, r3, #6
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	085b      	lsrs	r3, r3, #1
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	041b      	lsls	r3, r3, #16
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	061b      	lsls	r3, r3, #24
 8009002:	491b      	ldr	r1, [pc, #108]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8009004:	4313      	orrs	r3, r2
 8009006:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009008:	4b1b      	ldr	r3, [pc, #108]	; (8009078 <HAL_RCC_OscConfig+0x478>)
 800900a:	2201      	movs	r2, #1
 800900c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800900e:	f7fa fd35 	bl	8003a7c <HAL_GetTick>
 8009012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009014:	e008      	b.n	8009028 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009016:	f7fa fd31 	bl	8003a7c <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d901      	bls.n	8009028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e05c      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009028:	4b11      	ldr	r3, [pc, #68]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0f0      	beq.n	8009016 <HAL_RCC_OscConfig+0x416>
 8009034:	e054      	b.n	80090e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009036:	4b10      	ldr	r3, [pc, #64]	; (8009078 <HAL_RCC_OscConfig+0x478>)
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800903c:	f7fa fd1e 	bl	8003a7c <HAL_GetTick>
 8009040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009042:	e008      	b.n	8009056 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009044:	f7fa fd1a 	bl	8003a7c <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	2b02      	cmp	r3, #2
 8009050:	d901      	bls.n	8009056 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e045      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009056:	4b06      	ldr	r3, [pc, #24]	; (8009070 <HAL_RCC_OscConfig+0x470>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1f0      	bne.n	8009044 <HAL_RCC_OscConfig+0x444>
 8009062:	e03d      	b.n	80090e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d107      	bne.n	800907c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e038      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
 8009070:	40023800 	.word	0x40023800
 8009074:	40007000 	.word	0x40007000
 8009078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800907c:	4b1b      	ldr	r3, [pc, #108]	; (80090ec <HAL_RCC_OscConfig+0x4ec>)
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d028      	beq.n	80090dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009094:	429a      	cmp	r2, r3
 8009096:	d121      	bne.n	80090dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d11a      	bne.n	80090dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090ac:	4013      	ands	r3, r2
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d111      	bne.n	80090dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	085b      	lsrs	r3, r3, #1
 80090c4:	3b01      	subs	r3, #1
 80090c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d107      	bne.n	80090dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090d8:	429a      	cmp	r2, r3
 80090da:	d001      	beq.n	80090e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	40023800 	.word	0x40023800

080090f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e0cc      	b.n	800929e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009104:	4b68      	ldr	r3, [pc, #416]	; (80092a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d90c      	bls.n	800912c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009112:	4b65      	ldr	r3, [pc, #404]	; (80092a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800911a:	4b63      	ldr	r3, [pc, #396]	; (80092a8 <HAL_RCC_ClockConfig+0x1b8>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d001      	beq.n	800912c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e0b8      	b.n	800929e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d020      	beq.n	800917a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009144:	4b59      	ldr	r3, [pc, #356]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	4a58      	ldr	r2, [pc, #352]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 800914a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800914e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0308 	and.w	r3, r3, #8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800915c:	4b53      	ldr	r3, [pc, #332]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	4a52      	ldr	r2, [pc, #328]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009168:	4b50      	ldr	r3, [pc, #320]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	494d      	ldr	r1, [pc, #308]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009176:	4313      	orrs	r3, r2
 8009178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d044      	beq.n	8009210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d107      	bne.n	800919e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800918e:	4b47      	ldr	r3, [pc, #284]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d119      	bne.n	80091ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e07f      	b.n	800929e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d003      	beq.n	80091ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d107      	bne.n	80091be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091ae:	4b3f      	ldr	r3, [pc, #252]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d109      	bne.n	80091ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e06f      	b.n	800929e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091be:	4b3b      	ldr	r3, [pc, #236]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e067      	b.n	800929e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091ce:	4b37      	ldr	r3, [pc, #220]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f023 0203 	bic.w	r2, r3, #3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	4934      	ldr	r1, [pc, #208]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 80091dc:	4313      	orrs	r3, r2
 80091de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091e0:	f7fa fc4c 	bl	8003a7c <HAL_GetTick>
 80091e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091e6:	e00a      	b.n	80091fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091e8:	f7fa fc48 	bl	8003a7c <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d901      	bls.n	80091fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e04f      	b.n	800929e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091fe:	4b2b      	ldr	r3, [pc, #172]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 020c 	and.w	r2, r3, #12
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	429a      	cmp	r2, r3
 800920e:	d1eb      	bne.n	80091e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d20c      	bcs.n	8009238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800921e:	4b22      	ldr	r3, [pc, #136]	; (80092a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	b2d2      	uxtb	r2, r2
 8009224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009226:	4b20      	ldr	r3, [pc, #128]	; (80092a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0307 	and.w	r3, r3, #7
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d001      	beq.n	8009238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e032      	b.n	800929e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d008      	beq.n	8009256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009244:	4b19      	ldr	r3, [pc, #100]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	4916      	ldr	r1, [pc, #88]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009252:	4313      	orrs	r3, r2
 8009254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0308 	and.w	r3, r3, #8
 800925e:	2b00      	cmp	r3, #0
 8009260:	d009      	beq.n	8009276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009262:	4b12      	ldr	r3, [pc, #72]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	490e      	ldr	r1, [pc, #56]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 8009272:	4313      	orrs	r3, r2
 8009274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009276:	f000 f821 	bl	80092bc <HAL_RCC_GetSysClockFreq>
 800927a:	4602      	mov	r2, r0
 800927c:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <HAL_RCC_ClockConfig+0x1bc>)
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	091b      	lsrs	r3, r3, #4
 8009282:	f003 030f 	and.w	r3, r3, #15
 8009286:	490a      	ldr	r1, [pc, #40]	; (80092b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009288:	5ccb      	ldrb	r3, [r1, r3]
 800928a:	fa22 f303 	lsr.w	r3, r2, r3
 800928e:	4a09      	ldr	r2, [pc, #36]	; (80092b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009292:	4b09      	ldr	r3, [pc, #36]	; (80092b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f7fa fbac 	bl	80039f4 <HAL_InitTick>

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	40023c00 	.word	0x40023c00
 80092ac:	40023800 	.word	0x40023800
 80092b0:	0800f100 	.word	0x0800f100
 80092b4:	2000000c 	.word	0x2000000c
 80092b8:	20000010 	.word	0x20000010

080092bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092c0:	b090      	sub	sp, #64	; 0x40
 80092c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	637b      	str	r3, [r7, #52]	; 0x34
 80092c8:	2300      	movs	r3, #0
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092cc:	2300      	movs	r3, #0
 80092ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092d4:	4b59      	ldr	r3, [pc, #356]	; (800943c <HAL_RCC_GetSysClockFreq+0x180>)
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f003 030c 	and.w	r3, r3, #12
 80092dc:	2b08      	cmp	r3, #8
 80092de:	d00d      	beq.n	80092fc <HAL_RCC_GetSysClockFreq+0x40>
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	f200 80a1 	bhi.w	8009428 <HAL_RCC_GetSysClockFreq+0x16c>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <HAL_RCC_GetSysClockFreq+0x34>
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	d003      	beq.n	80092f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80092ee:	e09b      	b.n	8009428 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092f0:	4b53      	ldr	r3, [pc, #332]	; (8009440 <HAL_RCC_GetSysClockFreq+0x184>)
 80092f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80092f4:	e09b      	b.n	800942e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092f6:	4b53      	ldr	r3, [pc, #332]	; (8009444 <HAL_RCC_GetSysClockFreq+0x188>)
 80092f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80092fa:	e098      	b.n	800942e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092fc:	4b4f      	ldr	r3, [pc, #316]	; (800943c <HAL_RCC_GetSysClockFreq+0x180>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009304:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009306:	4b4d      	ldr	r3, [pc, #308]	; (800943c <HAL_RCC_GetSysClockFreq+0x180>)
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d028      	beq.n	8009364 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009312:	4b4a      	ldr	r3, [pc, #296]	; (800943c <HAL_RCC_GetSysClockFreq+0x180>)
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	099b      	lsrs	r3, r3, #6
 8009318:	2200      	movs	r2, #0
 800931a:	623b      	str	r3, [r7, #32]
 800931c:	627a      	str	r2, [r7, #36]	; 0x24
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009324:	2100      	movs	r1, #0
 8009326:	4b47      	ldr	r3, [pc, #284]	; (8009444 <HAL_RCC_GetSysClockFreq+0x188>)
 8009328:	fb03 f201 	mul.w	r2, r3, r1
 800932c:	2300      	movs	r3, #0
 800932e:	fb00 f303 	mul.w	r3, r0, r3
 8009332:	4413      	add	r3, r2
 8009334:	4a43      	ldr	r2, [pc, #268]	; (8009444 <HAL_RCC_GetSysClockFreq+0x188>)
 8009336:	fba0 1202 	umull	r1, r2, r0, r2
 800933a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800933c:	460a      	mov	r2, r1
 800933e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009342:	4413      	add	r3, r2
 8009344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	2200      	movs	r2, #0
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	61fa      	str	r2, [r7, #28]
 800934e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009352:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009356:	f7f7 fa99 	bl	800088c <__aeabi_uldivmod>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4613      	mov	r3, r2
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009362:	e053      	b.n	800940c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009364:	4b35      	ldr	r3, [pc, #212]	; (800943c <HAL_RCC_GetSysClockFreq+0x180>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	099b      	lsrs	r3, r3, #6
 800936a:	2200      	movs	r2, #0
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	617a      	str	r2, [r7, #20]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009376:	f04f 0b00 	mov.w	fp, #0
 800937a:	4652      	mov	r2, sl
 800937c:	465b      	mov	r3, fp
 800937e:	f04f 0000 	mov.w	r0, #0
 8009382:	f04f 0100 	mov.w	r1, #0
 8009386:	0159      	lsls	r1, r3, #5
 8009388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800938c:	0150      	lsls	r0, r2, #5
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	ebb2 080a 	subs.w	r8, r2, sl
 8009396:	eb63 090b 	sbc.w	r9, r3, fp
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80093a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80093aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80093ae:	ebb2 0408 	subs.w	r4, r2, r8
 80093b2:	eb63 0509 	sbc.w	r5, r3, r9
 80093b6:	f04f 0200 	mov.w	r2, #0
 80093ba:	f04f 0300 	mov.w	r3, #0
 80093be:	00eb      	lsls	r3, r5, #3
 80093c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093c4:	00e2      	lsls	r2, r4, #3
 80093c6:	4614      	mov	r4, r2
 80093c8:	461d      	mov	r5, r3
 80093ca:	eb14 030a 	adds.w	r3, r4, sl
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	eb45 030b 	adc.w	r3, r5, fp
 80093d4:	607b      	str	r3, [r7, #4]
 80093d6:	f04f 0200 	mov.w	r2, #0
 80093da:	f04f 0300 	mov.w	r3, #0
 80093de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093e2:	4629      	mov	r1, r5
 80093e4:	028b      	lsls	r3, r1, #10
 80093e6:	4621      	mov	r1, r4
 80093e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093ec:	4621      	mov	r1, r4
 80093ee:	028a      	lsls	r2, r1, #10
 80093f0:	4610      	mov	r0, r2
 80093f2:	4619      	mov	r1, r3
 80093f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f6:	2200      	movs	r2, #0
 80093f8:	60bb      	str	r3, [r7, #8]
 80093fa:	60fa      	str	r2, [r7, #12]
 80093fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009400:	f7f7 fa44 	bl	800088c <__aeabi_uldivmod>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4613      	mov	r3, r2
 800940a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800940c:	4b0b      	ldr	r3, [pc, #44]	; (800943c <HAL_RCC_GetSysClockFreq+0x180>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	0c1b      	lsrs	r3, r3, #16
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	3301      	adds	r3, #1
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800941c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	fbb2 f3f3 	udiv	r3, r2, r3
 8009424:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009426:	e002      	b.n	800942e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009428:	4b05      	ldr	r3, [pc, #20]	; (8009440 <HAL_RCC_GetSysClockFreq+0x184>)
 800942a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800942c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009430:	4618      	mov	r0, r3
 8009432:	3740      	adds	r7, #64	; 0x40
 8009434:	46bd      	mov	sp, r7
 8009436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800943a:	bf00      	nop
 800943c:	40023800 	.word	0x40023800
 8009440:	00f42400 	.word	0x00f42400
 8009444:	017d7840 	.word	0x017d7840

08009448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800944c:	4b03      	ldr	r3, [pc, #12]	; (800945c <HAL_RCC_GetHCLKFreq+0x14>)
 800944e:	681b      	ldr	r3, [r3, #0]
}
 8009450:	4618      	mov	r0, r3
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	2000000c 	.word	0x2000000c

08009460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009464:	f7ff fff0 	bl	8009448 <HAL_RCC_GetHCLKFreq>
 8009468:	4602      	mov	r2, r0
 800946a:	4b05      	ldr	r3, [pc, #20]	; (8009480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	0a9b      	lsrs	r3, r3, #10
 8009470:	f003 0307 	and.w	r3, r3, #7
 8009474:	4903      	ldr	r1, [pc, #12]	; (8009484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009476:	5ccb      	ldrb	r3, [r1, r3]
 8009478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800947c:	4618      	mov	r0, r3
 800947e:	bd80      	pop	{r7, pc}
 8009480:	40023800 	.word	0x40023800
 8009484:	0800f110 	.word	0x0800f110

08009488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e041      	b.n	800951e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7fa f8d8 	bl	8003664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f000 fb96 	bl	8009bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e041      	b.n	80095bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d106      	bne.n	8009552 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f839 	bl	80095c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2202      	movs	r2, #2
 8009556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3304      	adds	r3, #4
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f000 fb47 	bl	8009bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e097      	b.n	800971c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d106      	bne.n	8009606 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7fa f885 	bl	8003710 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2202      	movs	r2, #2
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	6812      	ldr	r2, [r2, #0]
 8009618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800961c:	f023 0307 	bic.w	r3, r3, #7
 8009620:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3304      	adds	r3, #4
 800962a:	4619      	mov	r1, r3
 800962c:	4610      	mov	r0, r2
 800962e:	f000 fae3 	bl	8009bf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800965a:	f023 0303 	bic.w	r3, r3, #3
 800965e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	689a      	ldr	r2, [r3, #8]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	021b      	lsls	r3, r3, #8
 800966a:	4313      	orrs	r3, r2
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009678:	f023 030c 	bic.w	r3, r3, #12
 800967c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	021b      	lsls	r3, r3, #8
 8009694:	4313      	orrs	r3, r2
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4313      	orrs	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	011a      	lsls	r2, r3, #4
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	031b      	lsls	r3, r3, #12
 80096a8:	4313      	orrs	r3, r2
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80096b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80096be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	011b      	lsls	r3, r3, #4
 80096ca:	4313      	orrs	r3, r2
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009734:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800973c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009744:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800974c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d110      	bne.n	8009776 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d102      	bne.n	8009760 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800975a:	7b7b      	ldrb	r3, [r7, #13]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d001      	beq.n	8009764 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e069      	b.n	8009838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009774:	e031      	b.n	80097da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b04      	cmp	r3, #4
 800977a:	d110      	bne.n	800979e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d102      	bne.n	8009788 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009782:	7b3b      	ldrb	r3, [r7, #12]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d001      	beq.n	800978c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e055      	b.n	8009838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800979c:	e01d      	b.n	80097da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d108      	bne.n	80097b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d105      	bne.n	80097b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80097aa:	7b7b      	ldrb	r3, [r7, #13]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d102      	bne.n	80097b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80097b0:	7b3b      	ldrb	r3, [r7, #12]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d001      	beq.n	80097ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e03e      	b.n	8009838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2202      	movs	r2, #2
 80097be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2202      	movs	r2, #2
 80097c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2202      	movs	r2, #2
 80097ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2202      	movs	r2, #2
 80097d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <HAL_TIM_Encoder_Start+0xc4>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d008      	beq.n	80097f8 <HAL_TIM_Encoder_Start+0xd4>
 80097e6:	e00f      	b.n	8009808 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2201      	movs	r2, #1
 80097ee:	2100      	movs	r1, #0
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fca7 	bl	800a144 <TIM_CCxChannelCmd>
      break;
 80097f6:	e016      	b.n	8009826 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2201      	movs	r2, #1
 80097fe:	2104      	movs	r1, #4
 8009800:	4618      	mov	r0, r3
 8009802:	f000 fc9f 	bl	800a144 <TIM_CCxChannelCmd>
      break;
 8009806:	e00e      	b.n	8009826 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2201      	movs	r2, #1
 800980e:	2100      	movs	r1, #0
 8009810:	4618      	mov	r0, r3
 8009812:	f000 fc97 	bl	800a144 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2201      	movs	r2, #1
 800981c:	2104      	movs	r1, #4
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fc90 	bl	800a144 <TIM_CCxChannelCmd>
      break;
 8009824:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f042 0201 	orr.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800985a:	2302      	movs	r3, #2
 800985c:	e0ae      	b.n	80099bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b0c      	cmp	r3, #12
 800986a:	f200 809f 	bhi.w	80099ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800986e:	a201      	add	r2, pc, #4	; (adr r2, 8009874 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009874:	080098a9 	.word	0x080098a9
 8009878:	080099ad 	.word	0x080099ad
 800987c:	080099ad 	.word	0x080099ad
 8009880:	080099ad 	.word	0x080099ad
 8009884:	080098e9 	.word	0x080098e9
 8009888:	080099ad 	.word	0x080099ad
 800988c:	080099ad 	.word	0x080099ad
 8009890:	080099ad 	.word	0x080099ad
 8009894:	0800992b 	.word	0x0800992b
 8009898:	080099ad 	.word	0x080099ad
 800989c:	080099ad 	.word	0x080099ad
 80098a0:	080099ad 	.word	0x080099ad
 80098a4:	0800996b 	.word	0x0800996b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 fa22 	bl	8009cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699a      	ldr	r2, [r3, #24]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 0208 	orr.w	r2, r2, #8
 80098c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699a      	ldr	r2, [r3, #24]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0204 	bic.w	r2, r2, #4
 80098d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6999      	ldr	r1, [r3, #24]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	691a      	ldr	r2, [r3, #16]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	619a      	str	r2, [r3, #24]
      break;
 80098e6:	e064      	b.n	80099b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fa68 	bl	8009dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699a      	ldr	r2, [r3, #24]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	699a      	ldr	r2, [r3, #24]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6999      	ldr	r1, [r3, #24]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	021a      	lsls	r2, r3, #8
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	619a      	str	r2, [r3, #24]
      break;
 8009928:	e043      	b.n	80099b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68b9      	ldr	r1, [r7, #8]
 8009930:	4618      	mov	r0, r3
 8009932:	f000 fab3 	bl	8009e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69da      	ldr	r2, [r3, #28]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0208 	orr.w	r2, r2, #8
 8009944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69da      	ldr	r2, [r3, #28]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0204 	bic.w	r2, r2, #4
 8009954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69d9      	ldr	r1, [r3, #28]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	691a      	ldr	r2, [r3, #16]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	430a      	orrs	r2, r1
 8009966:	61da      	str	r2, [r3, #28]
      break;
 8009968:	e023      	b.n	80099b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68b9      	ldr	r1, [r7, #8]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fafd 	bl	8009f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69da      	ldr	r2, [r3, #28]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69da      	ldr	r2, [r3, #28]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	69d9      	ldr	r1, [r3, #28]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	021a      	lsls	r2, r3, #8
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	61da      	str	r2, [r3, #28]
      break;
 80099aa:	e002      	b.n	80099b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	75fb      	strb	r3, [r7, #23]
      break;
 80099b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d101      	bne.n	80099e0 <HAL_TIM_ConfigClockSource+0x1c>
 80099dc:	2302      	movs	r3, #2
 80099de:	e0b4      	b.n	8009b4a <HAL_TIM_ConfigClockSource+0x186>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a18:	d03e      	beq.n	8009a98 <HAL_TIM_ConfigClockSource+0xd4>
 8009a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a1e:	f200 8087 	bhi.w	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
 8009a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a26:	f000 8086 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x172>
 8009a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a2e:	d87f      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
 8009a30:	2b70      	cmp	r3, #112	; 0x70
 8009a32:	d01a      	beq.n	8009a6a <HAL_TIM_ConfigClockSource+0xa6>
 8009a34:	2b70      	cmp	r3, #112	; 0x70
 8009a36:	d87b      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
 8009a38:	2b60      	cmp	r3, #96	; 0x60
 8009a3a:	d050      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0x11a>
 8009a3c:	2b60      	cmp	r3, #96	; 0x60
 8009a3e:	d877      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
 8009a40:	2b50      	cmp	r3, #80	; 0x50
 8009a42:	d03c      	beq.n	8009abe <HAL_TIM_ConfigClockSource+0xfa>
 8009a44:	2b50      	cmp	r3, #80	; 0x50
 8009a46:	d873      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
 8009a48:	2b40      	cmp	r3, #64	; 0x40
 8009a4a:	d058      	beq.n	8009afe <HAL_TIM_ConfigClockSource+0x13a>
 8009a4c:	2b40      	cmp	r3, #64	; 0x40
 8009a4e:	d86f      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
 8009a50:	2b30      	cmp	r3, #48	; 0x30
 8009a52:	d064      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x15a>
 8009a54:	2b30      	cmp	r3, #48	; 0x30
 8009a56:	d86b      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d060      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x15a>
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d867      	bhi.n	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d05c      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x15a>
 8009a64:	2b10      	cmp	r3, #16
 8009a66:	d05a      	beq.n	8009b1e <HAL_TIM_ConfigClockSource+0x15a>
 8009a68:	e062      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6818      	ldr	r0, [r3, #0]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	6899      	ldr	r1, [r3, #8]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f000 fb43 	bl	800a104 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	609a      	str	r2, [r3, #8]
      break;
 8009a96:	e04f      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	6899      	ldr	r1, [r3, #8]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	f000 fb2c 	bl	800a104 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009aba:	609a      	str	r2, [r3, #8]
      break;
 8009abc:	e03c      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	6859      	ldr	r1, [r3, #4]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	461a      	mov	r2, r3
 8009acc:	f000 faa0 	bl	800a010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2150      	movs	r1, #80	; 0x50
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 faf9 	bl	800a0ce <TIM_ITRx_SetConfig>
      break;
 8009adc:	e02c      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	6859      	ldr	r1, [r3, #4]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	461a      	mov	r2, r3
 8009aec:	f000 fabf 	bl	800a06e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2160      	movs	r1, #96	; 0x60
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fae9 	bl	800a0ce <TIM_ITRx_SetConfig>
      break;
 8009afc:	e01c      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	6859      	ldr	r1, [r3, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f000 fa80 	bl	800a010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2140      	movs	r1, #64	; 0x40
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fad9 	bl	800a0ce <TIM_ITRx_SetConfig>
      break;
 8009b1c:	e00c      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4619      	mov	r1, r3
 8009b28:	4610      	mov	r0, r2
 8009b2a:	f000 fad0 	bl	800a0ce <TIM_ITRx_SetConfig>
      break;
 8009b2e:	e003      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
      break;
 8009b34:	e000      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d107      	bne.n	8009b8e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b8c:	e02a      	b.n	8009be4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d107      	bne.n	8009ba8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ba6:	e01d      	b.n	8009be4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d107      	bne.n	8009bc2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2204      	movs	r2, #4
 8009bb6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bc0:	e010      	b.n	8009be4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d107      	bne.n	8009bdc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2208      	movs	r2, #8
 8009bd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bda:	e003      	b.n	8009be4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff ffb4 	bl	8009b52 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	771a      	strb	r2, [r3, #28]
}
 8009bf0:	bf00      	nop
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a34      	ldr	r2, [pc, #208]	; (8009cdc <TIM_Base_SetConfig+0xe4>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00f      	beq.n	8009c30 <TIM_Base_SetConfig+0x38>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c16:	d00b      	beq.n	8009c30 <TIM_Base_SetConfig+0x38>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a31      	ldr	r2, [pc, #196]	; (8009ce0 <TIM_Base_SetConfig+0xe8>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d007      	beq.n	8009c30 <TIM_Base_SetConfig+0x38>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a30      	ldr	r2, [pc, #192]	; (8009ce4 <TIM_Base_SetConfig+0xec>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d003      	beq.n	8009c30 <TIM_Base_SetConfig+0x38>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a2f      	ldr	r2, [pc, #188]	; (8009ce8 <TIM_Base_SetConfig+0xf0>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d108      	bne.n	8009c42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a25      	ldr	r2, [pc, #148]	; (8009cdc <TIM_Base_SetConfig+0xe4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d01b      	beq.n	8009c82 <TIM_Base_SetConfig+0x8a>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c50:	d017      	beq.n	8009c82 <TIM_Base_SetConfig+0x8a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a22      	ldr	r2, [pc, #136]	; (8009ce0 <TIM_Base_SetConfig+0xe8>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d013      	beq.n	8009c82 <TIM_Base_SetConfig+0x8a>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a21      	ldr	r2, [pc, #132]	; (8009ce4 <TIM_Base_SetConfig+0xec>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d00f      	beq.n	8009c82 <TIM_Base_SetConfig+0x8a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a20      	ldr	r2, [pc, #128]	; (8009ce8 <TIM_Base_SetConfig+0xf0>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d00b      	beq.n	8009c82 <TIM_Base_SetConfig+0x8a>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a1f      	ldr	r2, [pc, #124]	; (8009cec <TIM_Base_SetConfig+0xf4>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d007      	beq.n	8009c82 <TIM_Base_SetConfig+0x8a>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a1e      	ldr	r2, [pc, #120]	; (8009cf0 <TIM_Base_SetConfig+0xf8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d003      	beq.n	8009c82 <TIM_Base_SetConfig+0x8a>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a1d      	ldr	r2, [pc, #116]	; (8009cf4 <TIM_Base_SetConfig+0xfc>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d108      	bne.n	8009c94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a08      	ldr	r2, [pc, #32]	; (8009cdc <TIM_Base_SetConfig+0xe4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d103      	bne.n	8009cc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	691a      	ldr	r2, [r3, #16]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	615a      	str	r2, [r3, #20]
}
 8009cce:	bf00      	nop
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	40010000 	.word	0x40010000
 8009ce0:	40000400 	.word	0x40000400
 8009ce4:	40000800 	.word	0x40000800
 8009ce8:	40000c00 	.word	0x40000c00
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	40014400 	.word	0x40014400
 8009cf4:	40014800 	.word	0x40014800

08009cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	f023 0201 	bic.w	r2, r3, #1
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0303 	bic.w	r3, r3, #3
 8009d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f023 0302 	bic.w	r3, r3, #2
 8009d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a1c      	ldr	r2, [pc, #112]	; (8009dc0 <TIM_OC1_SetConfig+0xc8>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d10c      	bne.n	8009d6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f023 0308 	bic.w	r3, r3, #8
 8009d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f023 0304 	bic.w	r3, r3, #4
 8009d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a13      	ldr	r2, [pc, #76]	; (8009dc0 <TIM_OC1_SetConfig+0xc8>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d111      	bne.n	8009d9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	621a      	str	r2, [r3, #32]
}
 8009db4:	bf00      	nop
 8009db6:	371c      	adds	r7, #28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	40010000 	.word	0x40010000

08009dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	f023 0210 	bic.w	r2, r3, #16
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	021b      	lsls	r3, r3, #8
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	f023 0320 	bic.w	r3, r3, #32
 8009e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a1e      	ldr	r2, [pc, #120]	; (8009e98 <TIM_OC2_SetConfig+0xd4>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d10d      	bne.n	8009e40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	011b      	lsls	r3, r3, #4
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a15      	ldr	r2, [pc, #84]	; (8009e98 <TIM_OC2_SetConfig+0xd4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d113      	bne.n	8009e70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	621a      	str	r2, [r3, #32]
}
 8009e8a:	bf00      	nop
 8009e8c:	371c      	adds	r7, #28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	40010000 	.word	0x40010000

08009e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0303 	bic.w	r3, r3, #3
 8009ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a1d      	ldr	r2, [pc, #116]	; (8009f6c <TIM_OC3_SetConfig+0xd0>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d10d      	bne.n	8009f16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	021b      	lsls	r3, r3, #8
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a14      	ldr	r2, [pc, #80]	; (8009f6c <TIM_OC3_SetConfig+0xd0>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d113      	bne.n	8009f46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	621a      	str	r2, [r3, #32]
}
 8009f60:	bf00      	nop
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	40010000 	.word	0x40010000

08009f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	031b      	lsls	r3, r3, #12
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a10      	ldr	r2, [pc, #64]	; (800a00c <TIM_OC4_SetConfig+0x9c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d109      	bne.n	8009fe4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	019b      	lsls	r3, r3, #6
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	621a      	str	r2, [r3, #32]
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	40010000 	.word	0x40010000

0800a010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a010:	b480      	push	{r7}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	f023 0201 	bic.w	r2, r3, #1
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a03a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	011b      	lsls	r3, r3, #4
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	4313      	orrs	r3, r2
 800a044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f023 030a 	bic.w	r3, r3, #10
 800a04c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	621a      	str	r2, [r3, #32]
}
 800a062:	bf00      	nop
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a06e:	b480      	push	{r7}
 800a070:	b087      	sub	sp, #28
 800a072:	af00      	add	r7, sp, #0
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f023 0210 	bic.w	r2, r3, #16
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a098:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	031b      	lsls	r3, r3, #12
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	011b      	lsls	r3, r3, #4
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	621a      	str	r2, [r3, #32]
}
 800a0c2:	bf00      	nop
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	f043 0307 	orr.w	r3, r3, #7
 800a0f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	609a      	str	r2, [r3, #8]
}
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a11e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	021a      	lsls	r2, r3, #8
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	431a      	orrs	r2, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	4313      	orrs	r3, r2
 800a130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	609a      	str	r2, [r3, #8]
}
 800a138:	bf00      	nop
 800a13a:	371c      	adds	r7, #28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a144:	b480      	push	{r7}
 800a146:	b087      	sub	sp, #28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f003 031f 	and.w	r3, r3, #31
 800a156:	2201      	movs	r2, #1
 800a158:	fa02 f303 	lsl.w	r3, r2, r3
 800a15c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a1a      	ldr	r2, [r3, #32]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	43db      	mvns	r3, r3
 800a166:	401a      	ands	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a1a      	ldr	r2, [r3, #32]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	f003 031f 	and.w	r3, r3, #31
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	fa01 f303 	lsl.w	r3, r1, r3
 800a17c:	431a      	orrs	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	621a      	str	r2, [r3, #32]
}
 800a182:	bf00      	nop
 800a184:	371c      	adds	r7, #28
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
	...

0800a190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e050      	b.n	800a24a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a1c      	ldr	r2, [pc, #112]	; (800a258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d018      	beq.n	800a21e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f4:	d013      	beq.n	800a21e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a18      	ldr	r2, [pc, #96]	; (800a25c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00e      	beq.n	800a21e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a16      	ldr	r2, [pc, #88]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d009      	beq.n	800a21e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a15      	ldr	r2, [pc, #84]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d004      	beq.n	800a21e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a13      	ldr	r2, [pc, #76]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d10c      	bne.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40010000 	.word	0x40010000
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40014000 	.word	0x40014000

0800a26c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a280:	2b01      	cmp	r3, #1
 800a282:	d101      	bne.n	800a288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a284:	2302      	movs	r3, #2
 800a286:	e03d      	b.n	800a304 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a310:	b084      	sub	sp, #16
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	f107 001c 	add.w	r0, r7, #28
 800a31e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	2b01      	cmp	r3, #1
 800a326:	d122      	bne.n	800a36e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a33c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a352:	2b01      	cmp	r3, #1
 800a354:	d105      	bne.n	800a362 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f001 fbee 	bl	800bb44 <USB_CoreReset>
 800a368:	4603      	mov	r3, r0
 800a36a:	73fb      	strb	r3, [r7, #15]
 800a36c:	e01a      	b.n	800a3a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 fbe2 	bl	800bb44 <USB_CoreReset>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	639a      	str	r2, [r3, #56]	; 0x38
 800a396:	e005      	b.n	800a3a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d10b      	bne.n	800a3c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f043 0206 	orr.w	r2, r3, #6
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f043 0220 	orr.w	r2, r3, #32
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3ce:	b004      	add	sp, #16
 800a3d0:	4770      	bx	lr
	...

0800a3d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d165      	bne.n	800a4b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	4a41      	ldr	r2, [pc, #260]	; (800a4f0 <USB_SetTurnaroundTime+0x11c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d906      	bls.n	800a3fe <USB_SetTurnaroundTime+0x2a>
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4a40      	ldr	r2, [pc, #256]	; (800a4f4 <USB_SetTurnaroundTime+0x120>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d202      	bcs.n	800a3fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3f8:	230f      	movs	r3, #15
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	e062      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	4a3c      	ldr	r2, [pc, #240]	; (800a4f4 <USB_SetTurnaroundTime+0x120>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d306      	bcc.n	800a414 <USB_SetTurnaroundTime+0x40>
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4a3b      	ldr	r2, [pc, #236]	; (800a4f8 <USB_SetTurnaroundTime+0x124>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d202      	bcs.n	800a414 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a40e:	230e      	movs	r3, #14
 800a410:	617b      	str	r3, [r7, #20]
 800a412:	e057      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4a38      	ldr	r2, [pc, #224]	; (800a4f8 <USB_SetTurnaroundTime+0x124>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d306      	bcc.n	800a42a <USB_SetTurnaroundTime+0x56>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4a37      	ldr	r2, [pc, #220]	; (800a4fc <USB_SetTurnaroundTime+0x128>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d202      	bcs.n	800a42a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a424:	230d      	movs	r3, #13
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	e04c      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4a33      	ldr	r2, [pc, #204]	; (800a4fc <USB_SetTurnaroundTime+0x128>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d306      	bcc.n	800a440 <USB_SetTurnaroundTime+0x6c>
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4a32      	ldr	r2, [pc, #200]	; (800a500 <USB_SetTurnaroundTime+0x12c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d802      	bhi.n	800a440 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a43a:	230c      	movs	r3, #12
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	e041      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4a2f      	ldr	r2, [pc, #188]	; (800a500 <USB_SetTurnaroundTime+0x12c>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d906      	bls.n	800a456 <USB_SetTurnaroundTime+0x82>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4a2e      	ldr	r2, [pc, #184]	; (800a504 <USB_SetTurnaroundTime+0x130>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d802      	bhi.n	800a456 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a450:	230b      	movs	r3, #11
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	e036      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	4a2a      	ldr	r2, [pc, #168]	; (800a504 <USB_SetTurnaroundTime+0x130>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d906      	bls.n	800a46c <USB_SetTurnaroundTime+0x98>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4a29      	ldr	r2, [pc, #164]	; (800a508 <USB_SetTurnaroundTime+0x134>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d802      	bhi.n	800a46c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a466:	230a      	movs	r3, #10
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	e02b      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	4a26      	ldr	r2, [pc, #152]	; (800a508 <USB_SetTurnaroundTime+0x134>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d906      	bls.n	800a482 <USB_SetTurnaroundTime+0xae>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	4a25      	ldr	r2, [pc, #148]	; (800a50c <USB_SetTurnaroundTime+0x138>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d202      	bcs.n	800a482 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a47c:	2309      	movs	r3, #9
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	e020      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	4a21      	ldr	r2, [pc, #132]	; (800a50c <USB_SetTurnaroundTime+0x138>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d306      	bcc.n	800a498 <USB_SetTurnaroundTime+0xc4>
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4a20      	ldr	r2, [pc, #128]	; (800a510 <USB_SetTurnaroundTime+0x13c>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d802      	bhi.n	800a498 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a492:	2308      	movs	r3, #8
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	e015      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4a1d      	ldr	r2, [pc, #116]	; (800a510 <USB_SetTurnaroundTime+0x13c>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d906      	bls.n	800a4ae <USB_SetTurnaroundTime+0xda>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4a1c      	ldr	r2, [pc, #112]	; (800a514 <USB_SetTurnaroundTime+0x140>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d202      	bcs.n	800a4ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a4a8:	2307      	movs	r3, #7
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	e00a      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a4ae:	2306      	movs	r3, #6
 800a4b0:	617b      	str	r3, [r7, #20]
 800a4b2:	e007      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a4b4:	79fb      	ldrb	r3, [r7, #7]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d102      	bne.n	800a4c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a4ba:	2309      	movs	r3, #9
 800a4bc:	617b      	str	r3, [r7, #20]
 800a4be:	e001      	b.n	800a4c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a4c0:	2309      	movs	r3, #9
 800a4c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	029b      	lsls	r3, r3, #10
 800a4d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	00d8acbf 	.word	0x00d8acbf
 800a4f4:	00e4e1c0 	.word	0x00e4e1c0
 800a4f8:	00f42400 	.word	0x00f42400
 800a4fc:	01067380 	.word	0x01067380
 800a500:	011a499f 	.word	0x011a499f
 800a504:	01312cff 	.word	0x01312cff
 800a508:	014ca43f 	.word	0x014ca43f
 800a50c:	016e3600 	.word	0x016e3600
 800a510:	01a6ab1f 	.word	0x01a6ab1f
 800a514:	01e84800 	.word	0x01e84800

0800a518 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f043 0201 	orr.w	r2, r3, #1
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f023 0201 	bic.w	r2, r3, #1
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d115      	bne.n	800a5aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a58a:	2001      	movs	r0, #1
 800a58c:	f7f9 fa82 	bl	8003a94 <HAL_Delay>
      ms++;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	3301      	adds	r3, #1
 800a594:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f001 fa45 	bl	800ba26 <USB_GetMode>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d01e      	beq.n	800a5e0 <USB_SetCurrentMode+0x84>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b31      	cmp	r3, #49	; 0x31
 800a5a6:	d9f0      	bls.n	800a58a <USB_SetCurrentMode+0x2e>
 800a5a8:	e01a      	b.n	800a5e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d115      	bne.n	800a5dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5bc:	2001      	movs	r0, #1
 800a5be:	f7f9 fa69 	bl	8003a94 <HAL_Delay>
      ms++;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 fa2c 	bl	800ba26 <USB_GetMode>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d005      	beq.n	800a5e0 <USB_SetCurrentMode+0x84>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b31      	cmp	r3, #49	; 0x31
 800a5d8:	d9f0      	bls.n	800a5bc <USB_SetCurrentMode+0x60>
 800a5da:	e001      	b.n	800a5e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e005      	b.n	800a5ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b32      	cmp	r3, #50	; 0x32
 800a5e4:	d101      	bne.n	800a5ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e000      	b.n	800a5ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b086      	sub	sp, #24
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a60e:	2300      	movs	r3, #0
 800a610:	613b      	str	r3, [r7, #16]
 800a612:	e009      	b.n	800a628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	3340      	adds	r3, #64	; 0x40
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	2200      	movs	r2, #0
 800a620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	3301      	adds	r3, #1
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	2b0e      	cmp	r3, #14
 800a62c:	d9f2      	bls.n	800a614 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d11c      	bne.n	800a66e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a642:	f043 0302 	orr.w	r3, r3, #2
 800a646:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a658:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a664:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	639a      	str	r2, [r3, #56]	; 0x38
 800a66c:	e00b      	b.n	800a686 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a68c:	461a      	mov	r2, r3
 800a68e:	2300      	movs	r3, #0
 800a690:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a698:	4619      	mov	r1, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	680b      	ldr	r3, [r1, #0]
 800a6a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d10c      	bne.n	800a6c6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d104      	bne.n	800a6bc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f965 	bl	800a984 <USB_SetDevSpeed>
 800a6ba:	e008      	b.n	800a6ce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a6bc:	2101      	movs	r1, #1
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f960 	bl	800a984 <USB_SetDevSpeed>
 800a6c4:	e003      	b.n	800a6ce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6c6:	2103      	movs	r1, #3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f95b 	bl	800a984 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6ce:	2110      	movs	r1, #16
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f8f3 	bl	800a8bc <USB_FlushTxFifo>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f91f 	bl	800a924 <USB_FlushRxFifo>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a702:	461a      	mov	r2, r3
 800a704:	2300      	movs	r3, #0
 800a706:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70e:	461a      	mov	r2, r3
 800a710:	2300      	movs	r3, #0
 800a712:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a714:	2300      	movs	r3, #0
 800a716:	613b      	str	r3, [r7, #16]
 800a718:	e043      	b.n	800a7a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a72c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a730:	d118      	bne.n	800a764 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a744:	461a      	mov	r2, r3
 800a746:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	e013      	b.n	800a776 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	4413      	add	r3, r2
 800a756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75a:	461a      	mov	r2, r3
 800a75c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	e008      	b.n	800a776 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a770:	461a      	mov	r2, r3
 800a772:	2300      	movs	r3, #0
 800a774:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a782:	461a      	mov	r2, r3
 800a784:	2300      	movs	r3, #0
 800a786:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a794:	461a      	mov	r2, r3
 800a796:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a79a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	613b      	str	r3, [r7, #16]
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d3b7      	bcc.n	800a71a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	e043      	b.n	800a838 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7c6:	d118      	bne.n	800a7fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	e013      	b.n	800a80c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	e008      	b.n	800a80c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	4413      	add	r3, r2
 800a802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a806:	461a      	mov	r2, r3
 800a808:	2300      	movs	r3, #0
 800a80a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a818:	461a      	mov	r2, r3
 800a81a:	2300      	movs	r3, #0
 800a81c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4413      	add	r3, r2
 800a826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82a:	461a      	mov	r2, r3
 800a82c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	3301      	adds	r3, #1
 800a836:	613b      	str	r3, [r7, #16]
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d3b7      	bcc.n	800a7b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a84e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a852:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a860:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	2b00      	cmp	r3, #0
 800a866:	d105      	bne.n	800a874 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f043 0210 	orr.w	r2, r3, #16
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	699a      	ldr	r2, [r3, #24]
 800a878:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <USB_DevInit+0x2c4>)
 800a87a:	4313      	orrs	r3, r2
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	f043 0208 	orr.w	r2, r3, #8
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a894:	2b01      	cmp	r3, #1
 800a896:	d107      	bne.n	800a8a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8a0:	f043 0304 	orr.w	r3, r3, #4
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8b4:	b004      	add	sp, #16
 800a8b6:	4770      	bx	lr
 800a8b8:	803c3800 	.word	0x803c3800

0800a8bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4a13      	ldr	r2, [pc, #76]	; (800a920 <USB_FlushTxFifo+0x64>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d901      	bls.n	800a8dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	e01b      	b.n	800a914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	daf2      	bge.n	800a8ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	019b      	lsls	r3, r3, #6
 800a8ec:	f043 0220 	orr.w	r2, r3, #32
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	4a08      	ldr	r2, [pc, #32]	; (800a920 <USB_FlushTxFifo+0x64>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d901      	bls.n	800a906 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e006      	b.n	800a914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f003 0320 	and.w	r3, r3, #32
 800a90e:	2b20      	cmp	r3, #32
 800a910:	d0f0      	beq.n	800a8f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	00030d40 	.word	0x00030d40

0800a924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a92c:	2300      	movs	r3, #0
 800a92e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3301      	adds	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4a11      	ldr	r2, [pc, #68]	; (800a980 <USB_FlushRxFifo+0x5c>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d901      	bls.n	800a942 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e018      	b.n	800a974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	daf2      	bge.n	800a930 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2210      	movs	r2, #16
 800a952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3301      	adds	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4a08      	ldr	r2, [pc, #32]	; (800a980 <USB_FlushRxFifo+0x5c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d901      	bls.n	800a966 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e006      	b.n	800a974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f003 0310 	and.w	r3, r3, #16
 800a96e:	2b10      	cmp	r3, #16
 800a970:	d0f0      	beq.n	800a954 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	00030d40 	.word	0x00030d40

0800a984 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	78fb      	ldrb	r3, [r7, #3]
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b087      	sub	sp, #28
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f003 0306 	and.w	r3, r3, #6
 800a9ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	75fb      	strb	r3, [r7, #23]
 800a9da:	e00a      	b.n	800a9f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d002      	beq.n	800a9e8 <USB_GetDevSpeed+0x32>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b06      	cmp	r3, #6
 800a9e6:	d102      	bne.n	800a9ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	75fb      	strb	r3, [r7, #23]
 800a9ec:	e001      	b.n	800a9f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a9ee:	230f      	movs	r3, #15
 800a9f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	371c      	adds	r7, #28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	785b      	ldrb	r3, [r3, #1]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d13a      	bne.n	800aa92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa22:	69da      	ldr	r2, [r3, #28]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	f003 030f 	and.w	r3, r3, #15
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	68f9      	ldr	r1, [r7, #12]
 800aa36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d155      	bne.n	800ab00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	791b      	ldrb	r3, [r3, #4]
 800aa6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	059b      	lsls	r3, r3, #22
 800aa76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	e036      	b.n	800ab00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa98:	69da      	ldr	r2, [r3, #28]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa8:	041b      	lsls	r3, r3, #16
 800aaaa:	68f9      	ldr	r1, [r7, #12]
 800aaac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aab0:	4313      	orrs	r3, r2
 800aab2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d11a      	bne.n	800ab00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	015a      	lsls	r2, r3, #5
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	791b      	ldrb	r3, [r3, #4]
 800aae4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aae6:	430b      	orrs	r3, r1
 800aae8:	4313      	orrs	r3, r2
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	0151      	lsls	r1, r2, #5
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	440a      	add	r2, r1
 800aaf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aafa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aafe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
	...

0800ab10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d161      	bne.n	800abf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab42:	d11f      	bne.n	800ab84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	0151      	lsls	r1, r2, #5
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	440a      	add	r2, r1
 800ab5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	0151      	lsls	r1, r2, #5
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	440a      	add	r2, r1
 800ab7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 030f 	and.w	r3, r3, #15
 800ab94:	2101      	movs	r1, #1
 800ab96:	fa01 f303 	lsl.w	r3, r1, r3
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	68f9      	ldr	r1, [r7, #12]
 800aba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aba4:	4013      	ands	r3, r2
 800aba6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abae:	69da      	ldr	r2, [r3, #28]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	f003 030f 	and.w	r3, r3, #15
 800abb8:	2101      	movs	r1, #1
 800abba:	fa01 f303 	lsl.w	r3, r1, r3
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	43db      	mvns	r3, r3
 800abc2:	68f9      	ldr	r1, [r7, #12]
 800abc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abc8:	4013      	ands	r3, r2
 800abca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	0159      	lsls	r1, r3, #5
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	440b      	add	r3, r1
 800abe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe6:	4619      	mov	r1, r3
 800abe8:	4b35      	ldr	r3, [pc, #212]	; (800acc0 <USB_DeactivateEndpoint+0x1b0>)
 800abea:	4013      	ands	r3, r2
 800abec:	600b      	str	r3, [r1, #0]
 800abee:	e060      	b.n	800acb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	015a      	lsls	r2, r3, #5
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac06:	d11f      	bne.n	800ac48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	015a      	lsls	r2, r3, #5
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	0151      	lsls	r1, r2, #5
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	440a      	add	r2, r1
 800ac1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	0151      	lsls	r1, r2, #5
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	440a      	add	r2, r1
 800ac3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	f003 030f 	and.w	r3, r3, #15
 800ac58:	2101      	movs	r1, #1
 800ac5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac5e:	041b      	lsls	r3, r3, #16
 800ac60:	43db      	mvns	r3, r3
 800ac62:	68f9      	ldr	r1, [r7, #12]
 800ac64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac68:	4013      	ands	r3, r2
 800ac6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac72:	69da      	ldr	r2, [r3, #28]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	f003 030f 	and.w	r3, r3, #15
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac82:	041b      	lsls	r3, r3, #16
 800ac84:	43db      	mvns	r3, r3
 800ac86:	68f9      	ldr	r1, [r7, #12]
 800ac88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	0159      	lsls	r1, r3, #5
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	440b      	add	r3, r1
 800aca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acaa:	4619      	mov	r1, r3
 800acac:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <USB_DeactivateEndpoint+0x1b4>)
 800acae:	4013      	ands	r3, r2
 800acb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	ec337800 	.word	0xec337800
 800acc4:	eff37800 	.word	0xeff37800

0800acc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	; 0x28
 800accc:	af02      	add	r7, sp, #8
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	4613      	mov	r3, r2
 800acd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	785b      	ldrb	r3, [r3, #1]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	f040 815c 	bne.w	800afa2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d132      	bne.n	800ad58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	0151      	lsls	r1, r2, #5
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	440a      	add	r2, r1
 800ad08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	015a      	lsls	r2, r3, #5
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	0151      	lsls	r1, r2, #5
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	440a      	add	r2, r1
 800ad2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	0151      	lsls	r1, r2, #5
 800ad48:	69fa      	ldr	r2, [r7, #28]
 800ad4a:	440a      	add	r2, r1
 800ad4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad50:	0cdb      	lsrs	r3, r3, #19
 800ad52:	04db      	lsls	r3, r3, #19
 800ad54:	6113      	str	r3, [r2, #16]
 800ad56:	e074      	b.n	800ae42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	69fa      	ldr	r2, [r7, #28]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad72:	0cdb      	lsrs	r3, r3, #19
 800ad74:	04db      	lsls	r3, r3, #19
 800ad76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	0151      	lsls	r1, r2, #5
 800ad8a:	69fa      	ldr	r2, [r7, #28]
 800ad8c:	440a      	add	r2, r1
 800ad8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	015a      	lsls	r2, r3, #5
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	4413      	add	r3, r2
 800ada4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	6999      	ldr	r1, [r3, #24]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	440b      	add	r3, r1
 800adb4:	1e59      	subs	r1, r3, #1
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	fbb1 f3f3 	udiv	r3, r1, r3
 800adbe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800adc0:	4b9d      	ldr	r3, [pc, #628]	; (800b038 <USB_EPStartXfer+0x370>)
 800adc2:	400b      	ands	r3, r1
 800adc4:	69b9      	ldr	r1, [r7, #24]
 800adc6:	0148      	lsls	r0, r1, #5
 800adc8:	69f9      	ldr	r1, [r7, #28]
 800adca:	4401      	add	r1, r0
 800adcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800add0:	4313      	orrs	r3, r2
 800add2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	4413      	add	r3, r2
 800addc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade0:	691a      	ldr	r2, [r3, #16]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adea:	69b9      	ldr	r1, [r7, #24]
 800adec:	0148      	lsls	r0, r1, #5
 800adee:	69f9      	ldr	r1, [r7, #28]
 800adf0:	4401      	add	r1, r0
 800adf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800adf6:	4313      	orrs	r3, r2
 800adf8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	791b      	ldrb	r3, [r3, #4]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d11f      	bne.n	800ae42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	0151      	lsls	r1, r2, #5
 800ae14:	69fa      	ldr	r2, [r7, #28]
 800ae16:	440a      	add	r2, r1
 800ae18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ae20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	0151      	lsls	r1, r2, #5
 800ae34:	69fa      	ldr	r2, [r7, #28]
 800ae36:	440a      	add	r2, r1
 800ae38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d14b      	bne.n	800aee0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d009      	beq.n	800ae64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	791b      	ldrb	r3, [r3, #4]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d128      	bne.n	800aebe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d110      	bne.n	800ae9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	69ba      	ldr	r2, [r7, #24]
 800ae8c:	0151      	lsls	r1, r2, #5
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	440a      	add	r2, r1
 800ae92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	e00f      	b.n	800aebe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	69ba      	ldr	r2, [r7, #24]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	69fa      	ldr	r2, [r7, #28]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aebc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	0151      	lsls	r1, r2, #5
 800aed0:	69fa      	ldr	r2, [r7, #28]
 800aed2:	440a      	add	r2, r1
 800aed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	e133      	b.n	800b148 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	0151      	lsls	r1, r2, #5
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	440a      	add	r2, r1
 800aef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aefa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aefe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	791b      	ldrb	r3, [r3, #4]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d015      	beq.n	800af34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 811b 	beq.w	800b148 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	f003 030f 	and.w	r3, r3, #15
 800af22:	2101      	movs	r1, #1
 800af24:	fa01 f303 	lsl.w	r3, r1, r3
 800af28:	69f9      	ldr	r1, [r7, #28]
 800af2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af2e:	4313      	orrs	r3, r2
 800af30:	634b      	str	r3, [r1, #52]	; 0x34
 800af32:	e109      	b.n	800b148 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af40:	2b00      	cmp	r3, #0
 800af42:	d110      	bne.n	800af66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69ba      	ldr	r2, [r7, #24]
 800af54:	0151      	lsls	r1, r2, #5
 800af56:	69fa      	ldr	r2, [r7, #28]
 800af58:	440a      	add	r2, r1
 800af5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af62:	6013      	str	r3, [r2, #0]
 800af64:	e00f      	b.n	800af86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	0151      	lsls	r1, r2, #5
 800af78:	69fa      	ldr	r2, [r7, #28]
 800af7a:	440a      	add	r2, r1
 800af7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6919      	ldr	r1, [r3, #16]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	781a      	ldrb	r2, [r3, #0]
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	b298      	uxth	r0, r3
 800af94:	79fb      	ldrb	r3, [r7, #7]
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	4603      	mov	r3, r0
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 fade 	bl	800b55c <USB_WritePacket>
 800afa0:	e0d2      	b.n	800b148 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	69ba      	ldr	r2, [r7, #24]
 800afb2:	0151      	lsls	r1, r2, #5
 800afb4:	69fa      	ldr	r2, [r7, #28]
 800afb6:	440a      	add	r2, r1
 800afb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afbc:	0cdb      	lsrs	r3, r3, #19
 800afbe:	04db      	lsls	r3, r3, #19
 800afc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	0151      	lsls	r1, r2, #5
 800afd4:	69fa      	ldr	r2, [r7, #28]
 800afd6:	440a      	add	r2, r1
 800afd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afe4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d126      	bne.n	800b03c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affa:	691a      	ldr	r2, [r3, #16]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b004:	69b9      	ldr	r1, [r7, #24]
 800b006:	0148      	lsls	r0, r1, #5
 800b008:	69f9      	ldr	r1, [r7, #28]
 800b00a:	4401      	add	r1, r0
 800b00c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b010:	4313      	orrs	r3, r2
 800b012:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	015a      	lsls	r2, r3, #5
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	4413      	add	r3, r2
 800b01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	0151      	lsls	r1, r2, #5
 800b026:	69fa      	ldr	r2, [r7, #28]
 800b028:	440a      	add	r2, r1
 800b02a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b02e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b032:	6113      	str	r3, [r2, #16]
 800b034:	e03a      	b.n	800b0ac <USB_EPStartXfer+0x3e4>
 800b036:	bf00      	nop
 800b038:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	699a      	ldr	r2, [r3, #24]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	4413      	add	r3, r2
 800b046:	1e5a      	subs	r2, r3, #1
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b050:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	8afa      	ldrh	r2, [r7, #22]
 800b058:	fb03 f202 	mul.w	r2, r3, r2
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	4413      	add	r3, r2
 800b068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	8afb      	ldrh	r3, [r7, #22]
 800b070:	04d9      	lsls	r1, r3, #19
 800b072:	4b38      	ldr	r3, [pc, #224]	; (800b154 <USB_EPStartXfer+0x48c>)
 800b074:	400b      	ands	r3, r1
 800b076:	69b9      	ldr	r1, [r7, #24]
 800b078:	0148      	lsls	r0, r1, #5
 800b07a:	69f9      	ldr	r1, [r7, #28]
 800b07c:	4401      	add	r1, r0
 800b07e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b082:	4313      	orrs	r3, r2
 800b084:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b09c:	69b9      	ldr	r1, [r7, #24]
 800b09e:	0148      	lsls	r0, r1, #5
 800b0a0:	69f9      	ldr	r1, [r7, #28]
 800b0a2:	4401      	add	r1, r0
 800b0a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d10d      	bne.n	800b0ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d009      	beq.n	800b0ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6919      	ldr	r1, [r3, #16]
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ca:	460a      	mov	r2, r1
 800b0cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	791b      	ldrb	r3, [r3, #4]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d128      	bne.n	800b128 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d110      	bne.n	800b108 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	0151      	lsls	r1, r2, #5
 800b0f8:	69fa      	ldr	r2, [r7, #28]
 800b0fa:	440a      	add	r2, r1
 800b0fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	e00f      	b.n	800b128 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	015a      	lsls	r2, r3, #5
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	4413      	add	r3, r2
 800b110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	69ba      	ldr	r2, [r7, #24]
 800b118:	0151      	lsls	r1, r2, #5
 800b11a:	69fa      	ldr	r2, [r7, #28]
 800b11c:	440a      	add	r2, r1
 800b11e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b126:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	69fa      	ldr	r2, [r7, #28]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3720      	adds	r7, #32
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	1ff80000 	.word	0x1ff80000

0800b158 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b158:	b480      	push	{r7}
 800b15a:	b087      	sub	sp, #28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	4613      	mov	r3, r2
 800b164:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	785b      	ldrb	r3, [r3, #1]
 800b174:	2b01      	cmp	r3, #1
 800b176:	f040 80ce 	bne.w	800b316 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d132      	bne.n	800b1e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	015a      	lsls	r2, r3, #5
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	4413      	add	r3, r2
 800b18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	0151      	lsls	r1, r2, #5
 800b194:	697a      	ldr	r2, [r7, #20]
 800b196:	440a      	add	r2, r1
 800b198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b19c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	0151      	lsls	r1, r2, #5
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	440a      	add	r2, r1
 800b1bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	015a      	lsls	r2, r3, #5
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	0151      	lsls	r1, r2, #5
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	440a      	add	r2, r1
 800b1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e0:	0cdb      	lsrs	r3, r3, #19
 800b1e2:	04db      	lsls	r3, r3, #19
 800b1e4:	6113      	str	r3, [r2, #16]
 800b1e6:	e04e      	b.n	800b286 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	0151      	lsls	r1, r2, #5
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	440a      	add	r2, r1
 800b1fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b202:	0cdb      	lsrs	r3, r3, #19
 800b204:	04db      	lsls	r3, r3, #19
 800b206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	0151      	lsls	r1, r2, #5
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	440a      	add	r2, r1
 800b21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b222:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b226:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b22a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	699a      	ldr	r2, [r3, #24]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	429a      	cmp	r2, r3
 800b236:	d903      	bls.n	800b240 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	0151      	lsls	r1, r2, #5
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	440a      	add	r2, r1
 800b256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b25a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b25e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26c:	691a      	ldr	r2, [r3, #16]
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b276:	6939      	ldr	r1, [r7, #16]
 800b278:	0148      	lsls	r0, r1, #5
 800b27a:	6979      	ldr	r1, [r7, #20]
 800b27c:	4401      	add	r1, r0
 800b27e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b282:	4313      	orrs	r3, r2
 800b284:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d11e      	bne.n	800b2ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d009      	beq.n	800b2a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	015a      	lsls	r2, r3, #5
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	693a      	ldr	r2, [r7, #16]
 800b2b8:	0151      	lsls	r1, r2, #5
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	440a      	add	r2, r1
 800b2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2c6:	6013      	str	r3, [r2, #0]
 800b2c8:	e097      	b.n	800b3fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	0151      	lsls	r1, r2, #5
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	440a      	add	r2, r1
 800b2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 8083 	beq.w	800b3fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	f003 030f 	and.w	r3, r3, #15
 800b304:	2101      	movs	r1, #1
 800b306:	fa01 f303 	lsl.w	r3, r1, r3
 800b30a:	6979      	ldr	r1, [r7, #20]
 800b30c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b310:	4313      	orrs	r3, r2
 800b312:	634b      	str	r3, [r1, #52]	; 0x34
 800b314:	e071      	b.n	800b3fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	015a      	lsls	r2, r3, #5
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	4413      	add	r3, r2
 800b31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	693a      	ldr	r2, [r7, #16]
 800b326:	0151      	lsls	r1, r2, #5
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	440a      	add	r2, r1
 800b32c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b330:	0cdb      	lsrs	r3, r3, #19
 800b332:	04db      	lsls	r3, r3, #19
 800b334:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	0151      	lsls	r1, r2, #5
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	440a      	add	r2, r1
 800b34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b350:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b354:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b358:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d003      	beq.n	800b36a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	68da      	ldr	r2, [r3, #12]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	0151      	lsls	r1, r2, #5
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	440a      	add	r2, r1
 800b388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b38c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	015a      	lsls	r2, r3, #5
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	4413      	add	r3, r2
 800b39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39e:	691a      	ldr	r2, [r3, #16]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	69db      	ldr	r3, [r3, #28]
 800b3a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3a8:	6939      	ldr	r1, [r7, #16]
 800b3aa:	0148      	lsls	r0, r1, #5
 800b3ac:	6979      	ldr	r1, [r7, #20]
 800b3ae:	4401      	add	r1, r0
 800b3b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d10d      	bne.n	800b3da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d009      	beq.n	800b3da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	6919      	ldr	r1, [r3, #16]
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d6:	460a      	mov	r2, r1
 800b3d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	0151      	lsls	r1, r2, #5
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	440a      	add	r2, r1
 800b3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b412:	2300      	movs	r3, #0
 800b414:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	785b      	ldrb	r3, [r3, #1]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d14a      	bne.n	800b4bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	015a      	lsls	r2, r3, #5
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	4413      	add	r3, r2
 800b430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b43a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b43e:	f040 8086 	bne.w	800b54e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	015a      	lsls	r2, r3, #5
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	7812      	ldrb	r2, [r2, #0]
 800b456:	0151      	lsls	r1, r2, #5
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	440a      	add	r2, r1
 800b45c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b460:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b464:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	7812      	ldrb	r2, [r2, #0]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b488:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3301      	adds	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f242 7210 	movw	r2, #10000	; 0x2710
 800b496:	4293      	cmp	r3, r2
 800b498:	d902      	bls.n	800b4a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	75fb      	strb	r3, [r7, #23]
          break;
 800b49e:	e056      	b.n	800b54e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	015a      	lsls	r2, r3, #5
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4b8:	d0e7      	beq.n	800b48a <USB_EPStopXfer+0x82>
 800b4ba:	e048      	b.n	800b54e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	015a      	lsls	r2, r3, #5
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4d4:	d13b      	bne.n	800b54e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	7812      	ldrb	r2, [r2, #0]
 800b4ea:	0151      	lsls	r1, r2, #5
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	440a      	add	r2, r1
 800b4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	015a      	lsls	r2, r3, #5
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	4413      	add	r3, r2
 800b504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	7812      	ldrb	r2, [r2, #0]
 800b50e:	0151      	lsls	r1, r2, #5
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	440a      	add	r2, r1
 800b514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b51c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3301      	adds	r3, #1
 800b522:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f242 7210 	movw	r2, #10000	; 0x2710
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d902      	bls.n	800b534 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	75fb      	strb	r3, [r7, #23]
          break;
 800b532:	e00c      	b.n	800b54e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b54c:	d0e7      	beq.n	800b51e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b550:	4618      	mov	r0, r3
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b089      	sub	sp, #36	; 0x24
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	4611      	mov	r1, r2
 800b568:	461a      	mov	r2, r3
 800b56a:	460b      	mov	r3, r1
 800b56c:	71fb      	strb	r3, [r7, #7]
 800b56e:	4613      	mov	r3, r2
 800b570:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b57a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d123      	bne.n	800b5ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b582:	88bb      	ldrh	r3, [r7, #4]
 800b584:	3303      	adds	r3, #3
 800b586:	089b      	lsrs	r3, r3, #2
 800b588:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b58a:	2300      	movs	r3, #0
 800b58c:	61bb      	str	r3, [r7, #24]
 800b58e:	e018      	b.n	800b5c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b590:	79fb      	ldrb	r3, [r7, #7]
 800b592:	031a      	lsls	r2, r3, #12
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	4413      	add	r3, r2
 800b598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59c:	461a      	mov	r2, r3
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	61bb      	str	r3, [r7, #24]
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d3e2      	bcc.n	800b590 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3724      	adds	r7, #36	; 0x24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b08b      	sub	sp, #44	; 0x2c
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b5ee:	88fb      	ldrh	r3, [r7, #6]
 800b5f0:	089b      	lsrs	r3, r3, #2
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b5f6:	88fb      	ldrh	r3, [r7, #6]
 800b5f8:	f003 0303 	and.w	r3, r3, #3
 800b5fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5fe:	2300      	movs	r3, #0
 800b600:	623b      	str	r3, [r7, #32]
 800b602:	e014      	b.n	800b62e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	3301      	adds	r3, #1
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	3301      	adds	r3, #1
 800b61a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	3301      	adds	r3, #1
 800b620:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	3301      	adds	r3, #1
 800b626:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	3301      	adds	r3, #1
 800b62c:	623b      	str	r3, [r7, #32]
 800b62e:	6a3a      	ldr	r2, [r7, #32]
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	429a      	cmp	r2, r3
 800b634:	d3e6      	bcc.n	800b604 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b636:	8bfb      	ldrh	r3, [r7, #30]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d01e      	beq.n	800b67a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b646:	461a      	mov	r2, r3
 800b648:	f107 0310 	add.w	r3, r7, #16
 800b64c:	6812      	ldr	r2, [r2, #0]
 800b64e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	b2db      	uxtb	r3, r3
 800b656:	00db      	lsls	r3, r3, #3
 800b658:	fa22 f303 	lsr.w	r3, r2, r3
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b660:	701a      	strb	r2, [r3, #0]
      i++;
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	3301      	adds	r3, #1
 800b666:	623b      	str	r3, [r7, #32]
      pDest++;
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	3301      	adds	r3, #1
 800b66c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b66e:	8bfb      	ldrh	r3, [r7, #30]
 800b670:	3b01      	subs	r3, #1
 800b672:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b674:	8bfb      	ldrh	r3, [r7, #30]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1ea      	bne.n	800b650 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	372c      	adds	r7, #44	; 0x2c
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	785b      	ldrb	r3, [r3, #1]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d12c      	bne.n	800b6fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	015a      	lsls	r2, r3, #5
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	db12      	blt.n	800b6dc <USB_EPSetStall+0x54>
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00f      	beq.n	800b6dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	015a      	lsls	r2, r3, #5
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	0151      	lsls	r1, r2, #5
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	440a      	add	r2, r1
 800b6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	015a      	lsls	r2, r3, #5
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	0151      	lsls	r1, r2, #5
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	440a      	add	r2, r1
 800b6f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	e02b      	b.n	800b756 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	015a      	lsls	r2, r3, #5
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4413      	add	r3, r2
 800b706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	db12      	blt.n	800b736 <USB_EPSetStall+0xae>
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00f      	beq.n	800b736 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	015a      	lsls	r2, r3, #5
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	4413      	add	r3, r2
 800b71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	0151      	lsls	r1, r2, #5
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	440a      	add	r2, r1
 800b72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b734:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	0151      	lsls	r1, r2, #5
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	440a      	add	r2, r1
 800b74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b754:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	785b      	ldrb	r3, [r3, #1]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d128      	bne.n	800b7d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	0151      	lsls	r1, r2, #5
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	440a      	add	r2, r1
 800b796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b79a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b79e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	791b      	ldrb	r3, [r3, #4]
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d003      	beq.n	800b7b0 <USB_EPClearStall+0x4c>
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	791b      	ldrb	r3, [r3, #4]
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d138      	bne.n	800b822 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	015a      	lsls	r2, r3, #5
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	0151      	lsls	r1, r2, #5
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	440a      	add	r2, r1
 800b7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	e027      	b.n	800b822 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	0151      	lsls	r1, r2, #5
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	440a      	add	r2, r1
 800b7e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	791b      	ldrb	r3, [r3, #4]
 800b7f6:	2b03      	cmp	r3, #3
 800b7f8:	d003      	beq.n	800b802 <USB_EPClearStall+0x9e>
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	791b      	ldrb	r3, [r3, #4]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d10f      	bne.n	800b822 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	0151      	lsls	r1, r2, #5
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	440a      	add	r2, r1
 800b818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b81c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b820:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b84e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b852:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	78fb      	ldrb	r3, [r7, #3]
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b864:	68f9      	ldr	r1, [r7, #12]
 800b866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b86a:	4313      	orrs	r3, r2
 800b86c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b896:	f023 0303 	bic.w	r3, r3, #3
 800b89a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8aa:	f023 0302 	bic.w	r3, r3, #2
 800b8ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b085      	sub	sp, #20
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8d8:	f023 0303 	bic.w	r3, r3, #3
 800b8dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8ec:	f043 0302 	orr.w	r3, r3, #2
 800b8f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	4013      	ands	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b918:	68fb      	ldr	r3, [r7, #12]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b926:	b480      	push	{r7}
 800b928:	b085      	sub	sp, #20
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b942:	69db      	ldr	r3, [r3, #28]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	4013      	ands	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	0c1b      	lsrs	r3, r3, #16
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b95a:	b480      	push	{r7}
 800b95c:	b085      	sub	sp, #20
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	4013      	ands	r3, r2
 800b97c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	b29b      	uxth	r3, r3
}
 800b982:	4618      	mov	r0, r3
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b98e:	b480      	push	{r7}
 800b990:	b085      	sub	sp, #20
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	460b      	mov	r3, r1
 800b998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	015a      	lsls	r2, r3, #5
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b087      	sub	sp, #28
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	f003 030f 	and.w	r3, r3, #15
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9fa:	01db      	lsls	r3, r3, #7
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	4013      	ands	r3, r2
 800ba16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba18:	68bb      	ldr	r3, [r7, #8]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba26:	b480      	push	{r7}
 800ba28:	b083      	sub	sp, #12
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	f003 0301 	and.w	r3, r3, #1
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b085      	sub	sp, #20
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba60:	f023 0307 	bic.w	r3, r3, #7
 800ba64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3714      	adds	r7, #20
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	460b      	mov	r3, r1
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	333c      	adds	r3, #60	; 0x3c
 800ba9e:	3304      	adds	r3, #4
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	4a26      	ldr	r2, [pc, #152]	; (800bb40 <USB_EP0_OutStart+0xb8>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d90a      	bls.n	800bac2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800babc:	d101      	bne.n	800bac2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	e037      	b.n	800bb32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac8:	461a      	mov	r2, r3
 800baca:	2300      	movs	r3, #0
 800bacc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800badc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baf0:	f043 0318 	orr.w	r3, r3, #24
 800baf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bb08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb0a:	7afb      	ldrb	r3, [r7, #11]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d10f      	bne.n	800bb30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb16:	461a      	mov	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bb2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	4f54300a 	.word	0x4f54300a

0800bb44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	3301      	adds	r3, #1
 800bb54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	4a13      	ldr	r2, [pc, #76]	; (800bba8 <USB_CoreReset+0x64>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d901      	bls.n	800bb62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e01b      	b.n	800bb9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	daf2      	bge.n	800bb50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	f043 0201 	orr.w	r2, r3, #1
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	4a09      	ldr	r2, [pc, #36]	; (800bba8 <USB_CoreReset+0x64>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d901      	bls.n	800bb8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e006      	b.n	800bb9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d0f0      	beq.n	800bb7a <USB_CoreReset+0x36>

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	00030d40 	.word	0x00030d40

0800bbac <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800bbb8:	2308      	movs	r3, #8
 800bbba:	2203      	movs	r2, #3
 800bbbc:	2181      	movs	r1, #129	; 0x81
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f001 ff51 	bl	800da66 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	871a      	strh	r2, [r3, #56]	; 0x38
	
	/* Open EP OUT */
	USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 800bbca:	2301      	movs	r3, #1
 800bbcc:	2203      	movs	r2, #3
 800bbce:	2101      	movs	r1, #1
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f001 ff48 	bl	800da66 <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800bbd6:	2010      	movs	r0, #16
 800bbd8:	f002 f856 	bl	800dc88 <USBD_static_malloc>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	
	//set EP_OUT 1 prepared to received the data

	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, rx_buf, HID_EPOUT_SIZE);
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	4a0b      	ldr	r2, [pc, #44]	; (800bc14 <USBD_HID_Init+0x68>)
 800bbe8:	2101      	movs	r1, #1
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f002 f82a 	bl	800dc44 <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	e005      	b.n	800bc0a <USBD_HID_Init+0x5e>
  }else{
		//((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
	}

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc04:	2200      	movs	r2, #0
 800bc06:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	200008a4 	.word	0x200008a4

0800bc18 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	460b      	mov	r3, r1
 800bc22:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800bc24:	2181      	movs	r1, #129	; 0x81
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f001 ff43 	bl	800dab2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	871a      	strh	r2, [r3, #56]	; 0x38

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d009      	beq.n	800bc50 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc42:	4618      	mov	r0, r3
 800bc44:	f002 f82e 	bl	800dca4 <USBD_static_free>
    pdev->pClassData = NULL;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
	...

0800bc5c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b088      	sub	sp, #32
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc6c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800bc72:	2300      	movs	r3, #0
 800bc74:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d045      	beq.n	800bd16 <USBD_HID_Setup+0xba>
 800bc8a:	2b20      	cmp	r3, #32
 800bc8c:	f040 80d6 	bne.w	800be3c <USBD_HID_Setup+0x1e0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	785b      	ldrb	r3, [r3, #1]
 800bc94:	3b02      	subs	r3, #2
 800bc96:	2b09      	cmp	r3, #9
 800bc98:	d835      	bhi.n	800bd06 <USBD_HID_Setup+0xaa>
 800bc9a:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <USBD_HID_Setup+0x44>)
 800bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca0:	0800bcf7 	.word	0x0800bcf7
 800bca4:	0800bcd7 	.word	0x0800bcd7
 800bca8:	0800bd07 	.word	0x0800bd07
 800bcac:	0800bd07 	.word	0x0800bd07
 800bcb0:	0800bd07 	.word	0x0800bd07
 800bcb4:	0800bd07 	.word	0x0800bd07
 800bcb8:	0800bd07 	.word	0x0800bd07
 800bcbc:	0800bd07 	.word	0x0800bd07
 800bcc0:	0800bce5 	.word	0x0800bce5
 800bcc4:	0800bcc9 	.word	0x0800bcc9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	885b      	ldrh	r3, [r3, #2]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	461a      	mov	r2, r3
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	601a      	str	r2, [r3, #0]
          break;
 800bcd4:	e01e      	b.n	800bd14 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 fb85 	bl	800d3ec <USBD_CtlSendData>
          break;
 800bce2:	e017      	b.n	800bd14 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	885b      	ldrh	r3, [r3, #2]
 800bce8:	0a1b      	lsrs	r3, r3, #8
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	461a      	mov	r2, r3
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	605a      	str	r2, [r3, #4]
          break;
 800bcf4:	e00e      	b.n	800bd14 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f001 fb74 	bl	800d3ec <USBD_CtlSendData>
          break;
 800bd04:	e006      	b.n	800bd14 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f001 fafe 	bl	800d30a <USBD_CtlError>
          ret = USBD_FAIL;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	75fb      	strb	r3, [r7, #23]
          break;
 800bd12:	bf00      	nop
      }
      break;
 800bd14:	e099      	b.n	800be4a <USBD_HID_Setup+0x1ee>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	785b      	ldrb	r3, [r3, #1]
 800bd1a:	2b0b      	cmp	r3, #11
 800bd1c:	f200 8086 	bhi.w	800be2c <USBD_HID_Setup+0x1d0>
 800bd20:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <USBD_HID_Setup+0xcc>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bd59 	.word	0x0800bd59
 800bd2c:	0800be2d 	.word	0x0800be2d
 800bd30:	0800be2d 	.word	0x0800be2d
 800bd34:	0800be2d 	.word	0x0800be2d
 800bd38:	0800be2d 	.word	0x0800be2d
 800bd3c:	0800be2d 	.word	0x0800be2d
 800bd40:	0800bd83 	.word	0x0800bd83
 800bd44:	0800be2d 	.word	0x0800be2d
 800bd48:	0800be2d 	.word	0x0800be2d
 800bd4c:	0800be2d 	.word	0x0800be2d
 800bd50:	0800bddb 	.word	0x0800bddb
 800bd54:	0800be05 	.word	0x0800be05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d107      	bne.n	800bd74 <USBD_HID_Setup+0x118>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bd64:	f107 030e 	add.w	r3, r7, #14
 800bd68:	2202      	movs	r2, #2
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f001 fb3d 	bl	800d3ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd72:	e062      	b.n	800be3a <USBD_HID_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f001 fac7 	bl	800d30a <USBD_CtlError>
            ret = USBD_FAIL;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	75fb      	strb	r3, [r7, #23]
          break;
 800bd80:	e05b      	b.n	800be3a <USBD_HID_Setup+0x1de>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	885b      	ldrh	r3, [r3, #2]
 800bd86:	0a1b      	lsrs	r3, r3, #8
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	2b22      	cmp	r3, #34	; 0x22
 800bd8c:	d108      	bne.n	800bda0 <USBD_HID_Setup+0x144>
          {
            len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	88db      	ldrh	r3, [r3, #6]
 800bd92:	2b5e      	cmp	r3, #94	; 0x5e
 800bd94:	bf28      	it	cs
 800bd96:	235e      	movcs	r3, #94	; 0x5e
 800bd98:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KEYBOARD_ReportDesc;
 800bd9a:	4b2e      	ldr	r3, [pc, #184]	; (800be54 <USBD_HID_Setup+0x1f8>)
 800bd9c:	61bb      	str	r3, [r7, #24]
 800bd9e:	e015      	b.n	800bdcc <USBD_HID_Setup+0x170>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	885b      	ldrh	r3, [r3, #2]
 800bda4:	0a1b      	lsrs	r3, r3, #8
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	2b21      	cmp	r3, #33	; 0x21
 800bdaa:	d108      	bne.n	800bdbe <USBD_HID_Setup+0x162>
          {
            pbuf = USBD_HID_Desc;
 800bdac:	4b2a      	ldr	r3, [pc, #168]	; (800be58 <USBD_HID_Setup+0x1fc>)
 800bdae:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	88db      	ldrh	r3, [r3, #6]
 800bdb4:	2b09      	cmp	r3, #9
 800bdb6:	bf28      	it	cs
 800bdb8:	2309      	movcs	r3, #9
 800bdba:	83fb      	strh	r3, [r7, #30]
 800bdbc:	e006      	b.n	800bdcc <USBD_HID_Setup+0x170>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f001 faa2 	bl	800d30a <USBD_CtlError>
            ret = USBD_FAIL;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	75fb      	strb	r3, [r7, #23]
            break;
 800bdca:	e036      	b.n	800be3a <USBD_HID_Setup+0x1de>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800bdcc:	8bfb      	ldrh	r3, [r7, #30]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	69b9      	ldr	r1, [r7, #24]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 fb0a 	bl	800d3ec <USBD_CtlSendData>
          break;
 800bdd8:	e02f      	b.n	800be3a <USBD_HID_Setup+0x1de>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	d107      	bne.n	800bdf6 <USBD_HID_Setup+0x19a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	3308      	adds	r3, #8
 800bdea:	2201      	movs	r2, #1
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 fafc 	bl	800d3ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdf4:	e021      	b.n	800be3a <USBD_HID_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f001 fa86 	bl	800d30a <USBD_CtlError>
            ret = USBD_FAIL;
 800bdfe:	2303      	movs	r3, #3
 800be00:	75fb      	strb	r3, [r7, #23]
          break;
 800be02:	e01a      	b.n	800be3a <USBD_HID_Setup+0x1de>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b03      	cmp	r3, #3
 800be0e:	d106      	bne.n	800be1e <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	885b      	ldrh	r3, [r3, #2]
 800be14:	b2db      	uxtb	r3, r3
 800be16:	461a      	mov	r2, r3
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be1c:	e00d      	b.n	800be3a <USBD_HID_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f001 fa72 	bl	800d30a <USBD_CtlError>
            ret = USBD_FAIL;
 800be26:	2303      	movs	r3, #3
 800be28:	75fb      	strb	r3, [r7, #23]
          break;
 800be2a:	e006      	b.n	800be3a <USBD_HID_Setup+0x1de>

        default:
          USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f001 fa6b 	bl	800d30a <USBD_CtlError>
          ret = USBD_FAIL;
 800be34:	2303      	movs	r3, #3
 800be36:	75fb      	strb	r3, [r7, #23]
          break;
 800be38:	bf00      	nop
      }
      break;
 800be3a:	e006      	b.n	800be4a <USBD_HID_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f001 fa63 	bl	800d30a <USBD_CtlError>
      ret = USBD_FAIL;
 800be44:	2303      	movs	r3, #3
 800be46:	75fb      	strb	r3, [r7, #23]
      break;
 800be48:	bf00      	nop
  }

  return ret;
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	200000ec 	.word	0x200000ec
 800be58:	200000d4 	.word	0x200000d4

0800be5c <USBD_HID_SendReport>:
  *         Send HID Report
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev, uint8_t *report, uint16_t len){
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be70:	617b      	str	r3, [r7, #20]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d10c      	bne.n	800be98 <USBD_HID_SendReport+0x3c>
  {
    if (hhid->state == HID_IDLE)
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	7b1b      	ldrb	r3, [r3, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d108      	bne.n	800be98 <USBD_HID_SendReport+0x3c>
    {
      hhid->state = HID_BUSY;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2201      	movs	r2, #1
 800be8a:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800be8c:	88fb      	ldrh	r3, [r7, #6]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	2181      	movs	r1, #129	; 0x81
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f001 feb5 	bl	800dc02 <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3718      	adds	r7, #24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	7c1b      	ldrb	r3, [r3, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d102      	bne.n	800bebc <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 800beb6:	2308      	movs	r3, #8
 800beb8:	60fb      	str	r3, [r7, #12]
 800beba:	e001      	b.n	800bec0 <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 800bebc:	230a      	movs	r3, #10
 800bebe:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 800bec0:	68fb      	ldr	r3, [r7, #12]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
	...

0800bed0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2229      	movs	r2, #41	; 0x29
 800bedc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800bede:	4b03      	ldr	r3, [pc, #12]	; (800beec <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	20000050 	.word	0x20000050

0800bef0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2229      	movs	r2, #41	; 0x29
 800befc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800befe:	4b03      	ldr	r3, [pc, #12]	; (800bf0c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	2000007c 	.word	0x2000007c

0800bf10 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2229      	movs	r2, #41	; 0x29
 800bf1c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800bf1e:	4b03      	ldr	r3, [pc, #12]	; (800bf2c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	200000a8 	.word	0x200000a8

0800bf30 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf42:	2200      	movs	r2, #0
 800bf44:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	70fb      	strb	r3, [r7, #3]
	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, rx_buf, HID_EPOUT_SIZE);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf66:	2301      	movs	r3, #1
 800bf68:	4a04      	ldr	r2, [pc, #16]	; (800bf7c <USBD_HID_DataOut+0x28>)
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	f7fc faa8 	bl	80084c0 <HAL_PCD_EP_Receive>
 
	return USBD_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	200008a4 	.word	0x200008a4

0800bf80 <USBD_HID_GetData>:

uint8_t * USBD_HID_GetData(void){
 800bf80:	b480      	push	{r7}
 800bf82:	af00      	add	r7, sp, #0
	return rx_buf;
 800bf84:	4b02      	ldr	r3, [pc, #8]	; (800bf90 <USBD_HID_GetData+0x10>)
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	200008a4 	.word	0x200008a4

0800bf94 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	220a      	movs	r2, #10
 800bfa0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800bfa2:	4b03      	ldr	r3, [pc, #12]	; (800bfb0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	200000e0 	.word	0x200000e0

0800bfb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d101      	bne.n	800bfcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	e01f      	b.n	800c00c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d003      	beq.n	800bff2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2201      	movs	r2, #1
 800bff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	79fa      	ldrb	r2, [r7, #7]
 800bffe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f001 fcc9 	bl	800d998 <USBD_LL_Init>
 800c006:	4603      	mov	r3, r0
 800c008:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c01e:	2300      	movs	r3, #0
 800c020:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c028:	2303      	movs	r3, #3
 800c02a:	e025      	b.n	800c078 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	32ae      	adds	r2, #174	; 0xae
 800c03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00f      	beq.n	800c068 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	32ae      	adds	r2, #174	; 0xae
 800c052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	f107 020e 	add.w	r2, r7, #14
 800c05c:	4610      	mov	r0, r2
 800c05e:	4798      	blx	r3
 800c060:	4602      	mov	r2, r0
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f001 fcd1 	bl	800da30 <USBD_LL_Start>
 800c08e:	4603      	mov	r3, r0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	78fa      	ldrb	r2, [r7, #3]
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	4798      	blx	r3
 800c0d8:	4603      	mov	r3, r0
 800c0da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b084      	sub	sp, #16
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	78fa      	ldrb	r2, [r7, #3]
 800c100:	4611      	mov	r1, r2
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	4798      	blx	r3
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c10c:	2303      	movs	r3, #3
 800c10e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c110:	7bfb      	ldrb	r3, [r7, #15]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f001 f8b2 	bl	800d296 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2201      	movs	r2, #1
 800c136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c140:	461a      	mov	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c14e:	f003 031f 	and.w	r3, r3, #31
 800c152:	2b02      	cmp	r3, #2
 800c154:	d01a      	beq.n	800c18c <USBD_LL_SetupStage+0x72>
 800c156:	2b02      	cmp	r3, #2
 800c158:	d822      	bhi.n	800c1a0 <USBD_LL_SetupStage+0x86>
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <USBD_LL_SetupStage+0x4a>
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d00a      	beq.n	800c178 <USBD_LL_SetupStage+0x5e>
 800c162:	e01d      	b.n	800c1a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fb09 	bl	800c784 <USBD_StdDevReq>
 800c172:	4603      	mov	r3, r0
 800c174:	73fb      	strb	r3, [r7, #15]
      break;
 800c176:	e020      	b.n	800c1ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c17e:	4619      	mov	r1, r3
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fb71 	bl	800c868 <USBD_StdItfReq>
 800c186:	4603      	mov	r3, r0
 800c188:	73fb      	strb	r3, [r7, #15]
      break;
 800c18a:	e016      	b.n	800c1ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fbd3 	bl	800c940 <USBD_StdEPReq>
 800c19a:	4603      	mov	r3, r0
 800c19c:	73fb      	strb	r3, [r7, #15]
      break;
 800c19e:	e00c      	b.n	800c1ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f001 fc9e 	bl	800daf0 <USBD_LL_StallEP>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b8:	bf00      	nop
  }

  return ret;
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c1d6:	7afb      	ldrb	r3, [r7, #11]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d16e      	bne.n	800c2ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c1e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	f040 8098 	bne.w	800c320 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	689a      	ldr	r2, [r3, #8]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d913      	bls.n	800c224 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	1ad2      	subs	r2, r2, r3
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	68da      	ldr	r2, [r3, #12]
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	4293      	cmp	r3, r2
 800c214:	bf28      	it	cs
 800c216:	4613      	movcs	r3, r2
 800c218:	461a      	mov	r2, r3
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f001 f911 	bl	800d444 <USBD_CtlContinueRx>
 800c222:	e07d      	b.n	800c320 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c22a:	f003 031f 	and.w	r3, r3, #31
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d014      	beq.n	800c25c <USBD_LL_DataOutStage+0x98>
 800c232:	2b02      	cmp	r3, #2
 800c234:	d81d      	bhi.n	800c272 <USBD_LL_DataOutStage+0xae>
 800c236:	2b00      	cmp	r3, #0
 800c238:	d002      	beq.n	800c240 <USBD_LL_DataOutStage+0x7c>
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d003      	beq.n	800c246 <USBD_LL_DataOutStage+0x82>
 800c23e:	e018      	b.n	800c272 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	75bb      	strb	r3, [r7, #22]
            break;
 800c244:	e018      	b.n	800c278 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	4619      	mov	r1, r3
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 fa5e 	bl	800c712 <USBD_CoreFindIF>
 800c256:	4603      	mov	r3, r0
 800c258:	75bb      	strb	r3, [r7, #22]
            break;
 800c25a:	e00d      	b.n	800c278 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c262:	b2db      	uxtb	r3, r3
 800c264:	4619      	mov	r1, r3
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 fa60 	bl	800c72c <USBD_CoreFindEP>
 800c26c:	4603      	mov	r3, r0
 800c26e:	75bb      	strb	r3, [r7, #22]
            break;
 800c270:	e002      	b.n	800c278 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c272:	2300      	movs	r3, #0
 800c274:	75bb      	strb	r3, [r7, #22]
            break;
 800c276:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c278:	7dbb      	ldrb	r3, [r7, #22]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d119      	bne.n	800c2b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b03      	cmp	r3, #3
 800c288:	d113      	bne.n	800c2b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c28a:	7dba      	ldrb	r2, [r7, #22]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	32ae      	adds	r2, #174	; 0xae
 800c290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00b      	beq.n	800c2b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c29a:	7dba      	ldrb	r2, [r7, #22]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c2a2:	7dba      	ldrb	r2, [r7, #22]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	32ae      	adds	r2, #174	; 0xae
 800c2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f001 f8d7 	bl	800d466 <USBD_CtlSendStatus>
 800c2b8:	e032      	b.n	800c320 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c2ba:	7afb      	ldrb	r3, [r7, #11]
 800c2bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f000 fa31 	bl	800c72c <USBD_CoreFindEP>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2ce:	7dbb      	ldrb	r3, [r7, #22]
 800c2d0:	2bff      	cmp	r3, #255	; 0xff
 800c2d2:	d025      	beq.n	800c320 <USBD_LL_DataOutStage+0x15c>
 800c2d4:	7dbb      	ldrb	r3, [r7, #22]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d122      	bne.n	800c320 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d117      	bne.n	800c316 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c2e6:	7dba      	ldrb	r2, [r7, #22]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	32ae      	adds	r2, #174	; 0xae
 800c2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00f      	beq.n	800c316 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c2f6:	7dba      	ldrb	r2, [r7, #22]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c2fe:	7dba      	ldrb	r2, [r7, #22]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	32ae      	adds	r2, #174	; 0xae
 800c304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	7afa      	ldrb	r2, [r7, #11]
 800c30c:	4611      	mov	r1, r2
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	4798      	blx	r3
 800c312:	4603      	mov	r3, r0
 800c314:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c316:	7dfb      	ldrb	r3, [r7, #23]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
 800c31e:	e000      	b.n	800c322 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b086      	sub	sp, #24
 800c32e:	af00      	add	r7, sp, #0
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	460b      	mov	r3, r1
 800c334:	607a      	str	r2, [r7, #4]
 800c336:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d16f      	bne.n	800c41e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3314      	adds	r3, #20
 800c342:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d15a      	bne.n	800c404 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	689a      	ldr	r2, [r3, #8]
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	429a      	cmp	r2, r3
 800c358:	d914      	bls.n	800c384 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	689a      	ldr	r2, [r3, #8]
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	1ad2      	subs	r2, r2, r3
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	461a      	mov	r2, r3
 800c36e:	6879      	ldr	r1, [r7, #4]
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f001 f856 	bl	800d422 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c376:	2300      	movs	r3, #0
 800c378:	2200      	movs	r2, #0
 800c37a:	2100      	movs	r1, #0
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f001 fc61 	bl	800dc44 <USBD_LL_PrepareReceive>
 800c382:	e03f      	b.n	800c404 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	68da      	ldr	r2, [r3, #12]
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d11c      	bne.n	800c3ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	685a      	ldr	r2, [r3, #4]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c398:	429a      	cmp	r2, r3
 800c39a:	d316      	bcc.n	800c3ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	685a      	ldr	r2, [r3, #4]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d20f      	bcs.n	800c3ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f001 f837 	bl	800d422 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3bc:	2300      	movs	r3, #0
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f001 fc3e 	bl	800dc44 <USBD_LL_PrepareReceive>
 800c3c8:	e01c      	b.n	800c404 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b03      	cmp	r3, #3
 800c3d4:	d10f      	bne.n	800c3f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d009      	beq.n	800c3f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3f6:	2180      	movs	r1, #128	; 0x80
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f001 fb79 	bl	800daf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f001 f844 	bl	800d48c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d03a      	beq.n	800c484 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f7ff fe42 	bl	800c098 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c41c:	e032      	b.n	800c484 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c41e:	7afb      	ldrb	r3, [r7, #11]
 800c420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c424:	b2db      	uxtb	r3, r3
 800c426:	4619      	mov	r1, r3
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f000 f97f 	bl	800c72c <USBD_CoreFindEP>
 800c42e:	4603      	mov	r3, r0
 800c430:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c432:	7dfb      	ldrb	r3, [r7, #23]
 800c434:	2bff      	cmp	r3, #255	; 0xff
 800c436:	d025      	beq.n	800c484 <USBD_LL_DataInStage+0x15a>
 800c438:	7dfb      	ldrb	r3, [r7, #23]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d122      	bne.n	800c484 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b03      	cmp	r3, #3
 800c448:	d11c      	bne.n	800c484 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c44a:	7dfa      	ldrb	r2, [r7, #23]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	32ae      	adds	r2, #174	; 0xae
 800c450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d014      	beq.n	800c484 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c45a:	7dfa      	ldrb	r2, [r7, #23]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c462:	7dfa      	ldrb	r2, [r7, #23]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	32ae      	adds	r2, #174	; 0xae
 800c468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	7afa      	ldrb	r2, [r7, #11]
 800c470:	4611      	mov	r1, r2
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	4798      	blx	r3
 800c476:	4603      	mov	r3, r0
 800c478:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c47a:	7dbb      	ldrb	r3, [r7, #22]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d001      	beq.n	800c484 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c480:	7dbb      	ldrb	r3, [r7, #22]
 800c482:	e000      	b.n	800c486 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2201      	movs	r2, #1
 800c49e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d014      	beq.n	800c4f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00e      	beq.n	800c4f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	6852      	ldr	r2, [r2, #4]
 800c4e2:	b2d2      	uxtb	r2, r2
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	4798      	blx	r3
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4f4:	2340      	movs	r3, #64	; 0x40
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f001 fab3 	bl	800da66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2240      	movs	r2, #64	; 0x40
 800c50c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c510:	2340      	movs	r3, #64	; 0x40
 800c512:	2200      	movs	r2, #0
 800c514:	2180      	movs	r1, #128	; 0x80
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f001 faa5 	bl	800da66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2240      	movs	r2, #64	; 0x40
 800c526:	621a      	str	r2, [r3, #32]

  return ret;
 800c528:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	460b      	mov	r3, r1
 800c53c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	78fa      	ldrb	r2, [r7, #3]
 800c542:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c552:	b480      	push	{r7}
 800c554:	b083      	sub	sp, #12
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c560:	b2da      	uxtb	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2204      	movs	r2, #4
 800c56c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c57e:	b480      	push	{r7}
 800c580:	b083      	sub	sp, #12
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d106      	bne.n	800c5a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	370c      	adds	r7, #12
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d110      	bne.n	800c5e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00b      	beq.n	800c5e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d2:	69db      	ldr	r3, [r3, #28]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d005      	beq.n	800c5e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5de:	69db      	ldr	r3, [r3, #28]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b082      	sub	sp, #8
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	32ae      	adds	r2, #174	; 0xae
 800c604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e01c      	b.n	800c64a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d115      	bne.n	800c648 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	32ae      	adds	r2, #174	; 0xae
 800c626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c62a:	6a1b      	ldr	r3, [r3, #32]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	32ae      	adds	r2, #174	; 0xae
 800c63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	78fa      	ldrb	r2, [r7, #3]
 800c642:	4611      	mov	r1, r2
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b082      	sub	sp, #8
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
 800c65a:	460b      	mov	r3, r1
 800c65c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	32ae      	adds	r2, #174	; 0xae
 800c668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c670:	2303      	movs	r3, #3
 800c672:	e01c      	b.n	800c6ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d115      	bne.n	800c6ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	32ae      	adds	r2, #174	; 0xae
 800c68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00b      	beq.n	800c6ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	32ae      	adds	r2, #174	; 0xae
 800c69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a4:	78fa      	ldrb	r2, [r7, #3]
 800c6a6:	4611      	mov	r1, r2
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00e      	beq.n	800c708 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	6852      	ldr	r2, [r2, #4]
 800c6f6:	b2d2      	uxtb	r2, r2
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	4798      	blx	r3
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c704:	2303      	movs	r3, #3
 800c706:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c708:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c712:	b480      	push	{r7}
 800c714:	b083      	sub	sp, #12
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	460b      	mov	r3, r1
 800c71c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c71e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c720:	4618      	mov	r0, r3
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	460b      	mov	r3, r1
 800c736:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c738:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c746:	b480      	push	{r7}
 800c748:	b087      	sub	sp, #28
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	3301      	adds	r3, #1
 800c75c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c764:	8a3b      	ldrh	r3, [r7, #16]
 800c766:	021b      	lsls	r3, r3, #8
 800c768:	b21a      	sxth	r2, r3
 800c76a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c76e:	4313      	orrs	r3, r2
 800c770:	b21b      	sxth	r3, r3
 800c772:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c774:	89fb      	ldrh	r3, [r7, #14]
}
 800c776:	4618      	mov	r0, r3
 800c778:	371c      	adds	r7, #28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
	...

0800c784 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c79a:	2b40      	cmp	r3, #64	; 0x40
 800c79c:	d005      	beq.n	800c7aa <USBD_StdDevReq+0x26>
 800c79e:	2b40      	cmp	r3, #64	; 0x40
 800c7a0:	d857      	bhi.n	800c852 <USBD_StdDevReq+0xce>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00f      	beq.n	800c7c6 <USBD_StdDevReq+0x42>
 800c7a6:	2b20      	cmp	r3, #32
 800c7a8:	d153      	bne.n	800c852 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	32ae      	adds	r2, #174	; 0xae
 800c7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	4798      	blx	r3
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c4:	e04a      	b.n	800c85c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	785b      	ldrb	r3, [r3, #1]
 800c7ca:	2b09      	cmp	r3, #9
 800c7cc:	d83b      	bhi.n	800c846 <USBD_StdDevReq+0xc2>
 800c7ce:	a201      	add	r2, pc, #4	; (adr r2, 800c7d4 <USBD_StdDevReq+0x50>)
 800c7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d4:	0800c829 	.word	0x0800c829
 800c7d8:	0800c83d 	.word	0x0800c83d
 800c7dc:	0800c847 	.word	0x0800c847
 800c7e0:	0800c833 	.word	0x0800c833
 800c7e4:	0800c847 	.word	0x0800c847
 800c7e8:	0800c807 	.word	0x0800c807
 800c7ec:	0800c7fd 	.word	0x0800c7fd
 800c7f0:	0800c847 	.word	0x0800c847
 800c7f4:	0800c81f 	.word	0x0800c81f
 800c7f8:	0800c811 	.word	0x0800c811
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fa3c 	bl	800cc7c <USBD_GetDescriptor>
          break;
 800c804:	e024      	b.n	800c850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fba1 	bl	800cf50 <USBD_SetAddress>
          break;
 800c80e:	e01f      	b.n	800c850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fbe0 	bl	800cfd8 <USBD_SetConfig>
 800c818:	4603      	mov	r3, r0
 800c81a:	73fb      	strb	r3, [r7, #15]
          break;
 800c81c:	e018      	b.n	800c850 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fc83 	bl	800d12c <USBD_GetConfig>
          break;
 800c826:	e013      	b.n	800c850 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fcb4 	bl	800d198 <USBD_GetStatus>
          break;
 800c830:	e00e      	b.n	800c850 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fce3 	bl	800d200 <USBD_SetFeature>
          break;
 800c83a:	e009      	b.n	800c850 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fd07 	bl	800d252 <USBD_ClrFeature>
          break;
 800c844:	e004      	b.n	800c850 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c846:	6839      	ldr	r1, [r7, #0]
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fd5e 	bl	800d30a <USBD_CtlError>
          break;
 800c84e:	bf00      	nop
      }
      break;
 800c850:	e004      	b.n	800c85c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fd58 	bl	800d30a <USBD_CtlError>
      break;
 800c85a:	bf00      	nop
  }

  return ret;
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop

0800c868 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c87e:	2b40      	cmp	r3, #64	; 0x40
 800c880:	d005      	beq.n	800c88e <USBD_StdItfReq+0x26>
 800c882:	2b40      	cmp	r3, #64	; 0x40
 800c884:	d852      	bhi.n	800c92c <USBD_StdItfReq+0xc4>
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <USBD_StdItfReq+0x26>
 800c88a:	2b20      	cmp	r3, #32
 800c88c:	d14e      	bne.n	800c92c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c894:	b2db      	uxtb	r3, r3
 800c896:	3b01      	subs	r3, #1
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d840      	bhi.n	800c91e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	889b      	ldrh	r3, [r3, #4]
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d836      	bhi.n	800c914 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	889b      	ldrh	r3, [r3, #4]
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7ff ff2f 	bl	800c712 <USBD_CoreFindIF>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8b8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ba:	2bff      	cmp	r3, #255	; 0xff
 800c8bc:	d01d      	beq.n	800c8fa <USBD_StdItfReq+0x92>
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d11a      	bne.n	800c8fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c8c4:	7bba      	ldrb	r2, [r7, #14]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	32ae      	adds	r2, #174	; 0xae
 800c8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00f      	beq.n	800c8f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c8d4:	7bba      	ldrb	r2, [r7, #14]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c8dc:	7bba      	ldrb	r2, [r7, #14]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	32ae      	adds	r2, #174	; 0xae
 800c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	4798      	blx	r3
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8f2:	e004      	b.n	800c8fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8f8:	e001      	b.n	800c8fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c8fa:	2303      	movs	r3, #3
 800c8fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	88db      	ldrh	r3, [r3, #6]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d110      	bne.n	800c928 <USBD_StdItfReq+0xc0>
 800c906:	7bfb      	ldrb	r3, [r7, #15]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10d      	bne.n	800c928 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fdaa 	bl	800d466 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c912:	e009      	b.n	800c928 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fcf7 	bl	800d30a <USBD_CtlError>
          break;
 800c91c:	e004      	b.n	800c928 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fcf2 	bl	800d30a <USBD_CtlError>
          break;
 800c926:	e000      	b.n	800c92a <USBD_StdItfReq+0xc2>
          break;
 800c928:	bf00      	nop
      }
      break;
 800c92a:	e004      	b.n	800c936 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c92c:	6839      	ldr	r1, [r7, #0]
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 fceb 	bl	800d30a <USBD_CtlError>
      break;
 800c934:	bf00      	nop
  }

  return ret;
 800c936:	7bfb      	ldrb	r3, [r7, #15]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	889b      	ldrh	r3, [r3, #4]
 800c952:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c95c:	2b40      	cmp	r3, #64	; 0x40
 800c95e:	d007      	beq.n	800c970 <USBD_StdEPReq+0x30>
 800c960:	2b40      	cmp	r3, #64	; 0x40
 800c962:	f200 817f 	bhi.w	800cc64 <USBD_StdEPReq+0x324>
 800c966:	2b00      	cmp	r3, #0
 800c968:	d02a      	beq.n	800c9c0 <USBD_StdEPReq+0x80>
 800c96a:	2b20      	cmp	r3, #32
 800c96c:	f040 817a 	bne.w	800cc64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c970:	7bbb      	ldrb	r3, [r7, #14]
 800c972:	4619      	mov	r1, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7ff fed9 	bl	800c72c <USBD_CoreFindEP>
 800c97a:	4603      	mov	r3, r0
 800c97c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c97e:	7b7b      	ldrb	r3, [r7, #13]
 800c980:	2bff      	cmp	r3, #255	; 0xff
 800c982:	f000 8174 	beq.w	800cc6e <USBD_StdEPReq+0x32e>
 800c986:	7b7b      	ldrb	r3, [r7, #13]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f040 8170 	bne.w	800cc6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c98e:	7b7a      	ldrb	r2, [r7, #13]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c996:	7b7a      	ldrb	r2, [r7, #13]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	32ae      	adds	r2, #174	; 0xae
 800c99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 8163 	beq.w	800cc6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c9a8:	7b7a      	ldrb	r2, [r7, #13]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	32ae      	adds	r2, #174	; 0xae
 800c9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	4798      	blx	r3
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c9be:	e156      	b.n	800cc6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	785b      	ldrb	r3, [r3, #1]
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d008      	beq.n	800c9da <USBD_StdEPReq+0x9a>
 800c9c8:	2b03      	cmp	r3, #3
 800c9ca:	f300 8145 	bgt.w	800cc58 <USBD_StdEPReq+0x318>
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 809b 	beq.w	800cb0a <USBD_StdEPReq+0x1ca>
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d03c      	beq.n	800ca52 <USBD_StdEPReq+0x112>
 800c9d8:	e13e      	b.n	800cc58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d002      	beq.n	800c9ec <USBD_StdEPReq+0xac>
 800c9e6:	2b03      	cmp	r3, #3
 800c9e8:	d016      	beq.n	800ca18 <USBD_StdEPReq+0xd8>
 800c9ea:	e02c      	b.n	800ca46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00d      	beq.n	800ca0e <USBD_StdEPReq+0xce>
 800c9f2:	7bbb      	ldrb	r3, [r7, #14]
 800c9f4:	2b80      	cmp	r3, #128	; 0x80
 800c9f6:	d00a      	beq.n	800ca0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9f8:	7bbb      	ldrb	r3, [r7, #14]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f001 f877 	bl	800daf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca02:	2180      	movs	r1, #128	; 0x80
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f001 f873 	bl	800daf0 <USBD_LL_StallEP>
 800ca0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca0c:	e020      	b.n	800ca50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fc7a 	bl	800d30a <USBD_CtlError>
              break;
 800ca16:	e01b      	b.n	800ca50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	885b      	ldrh	r3, [r3, #2]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10e      	bne.n	800ca3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <USBD_StdEPReq+0xfe>
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
 800ca28:	2b80      	cmp	r3, #128	; 0x80
 800ca2a:	d008      	beq.n	800ca3e <USBD_StdEPReq+0xfe>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	88db      	ldrh	r3, [r3, #6]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d104      	bne.n	800ca3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca34:	7bbb      	ldrb	r3, [r7, #14]
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f001 f859 	bl	800daf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fd11 	bl	800d466 <USBD_CtlSendStatus>

              break;
 800ca44:	e004      	b.n	800ca50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fc5e 	bl	800d30a <USBD_CtlError>
              break;
 800ca4e:	bf00      	nop
          }
          break;
 800ca50:	e107      	b.n	800cc62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	d002      	beq.n	800ca64 <USBD_StdEPReq+0x124>
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d016      	beq.n	800ca90 <USBD_StdEPReq+0x150>
 800ca62:	e04b      	b.n	800cafc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca64:	7bbb      	ldrb	r3, [r7, #14]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00d      	beq.n	800ca86 <USBD_StdEPReq+0x146>
 800ca6a:	7bbb      	ldrb	r3, [r7, #14]
 800ca6c:	2b80      	cmp	r3, #128	; 0x80
 800ca6e:	d00a      	beq.n	800ca86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca70:	7bbb      	ldrb	r3, [r7, #14]
 800ca72:	4619      	mov	r1, r3
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f001 f83b 	bl	800daf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca7a:	2180      	movs	r1, #128	; 0x80
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f001 f837 	bl	800daf0 <USBD_LL_StallEP>
 800ca82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca84:	e040      	b.n	800cb08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fc3e 	bl	800d30a <USBD_CtlError>
              break;
 800ca8e:	e03b      	b.n	800cb08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	885b      	ldrh	r3, [r3, #2]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d136      	bne.n	800cb06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ca98:	7bbb      	ldrb	r3, [r7, #14]
 800ca9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d004      	beq.n	800caac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 f841 	bl	800db2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fcda 	bl	800d466 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7ff fe38 	bl	800c72c <USBD_CoreFindEP>
 800cabc:	4603      	mov	r3, r0
 800cabe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cac0:	7b7b      	ldrb	r3, [r7, #13]
 800cac2:	2bff      	cmp	r3, #255	; 0xff
 800cac4:	d01f      	beq.n	800cb06 <USBD_StdEPReq+0x1c6>
 800cac6:	7b7b      	ldrb	r3, [r7, #13]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d11c      	bne.n	800cb06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cacc:	7b7a      	ldrb	r2, [r7, #13]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cad4:	7b7a      	ldrb	r2, [r7, #13]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	32ae      	adds	r2, #174	; 0xae
 800cada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d010      	beq.n	800cb06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cae4:	7b7a      	ldrb	r2, [r7, #13]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	32ae      	adds	r2, #174	; 0xae
 800caea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	6839      	ldr	r1, [r7, #0]
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	4798      	blx	r3
 800caf6:	4603      	mov	r3, r0
 800caf8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cafa:	e004      	b.n	800cb06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cafc:	6839      	ldr	r1, [r7, #0]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fc03 	bl	800d30a <USBD_CtlError>
              break;
 800cb04:	e000      	b.n	800cb08 <USBD_StdEPReq+0x1c8>
              break;
 800cb06:	bf00      	nop
          }
          break;
 800cb08:	e0ab      	b.n	800cc62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d002      	beq.n	800cb1c <USBD_StdEPReq+0x1dc>
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d032      	beq.n	800cb80 <USBD_StdEPReq+0x240>
 800cb1a:	e097      	b.n	800cc4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb1c:	7bbb      	ldrb	r3, [r7, #14]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d007      	beq.n	800cb32 <USBD_StdEPReq+0x1f2>
 800cb22:	7bbb      	ldrb	r3, [r7, #14]
 800cb24:	2b80      	cmp	r3, #128	; 0x80
 800cb26:	d004      	beq.n	800cb32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fbed 	bl	800d30a <USBD_CtlError>
                break;
 800cb30:	e091      	b.n	800cc56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	da0b      	bge.n	800cb52 <USBD_StdEPReq+0x212>
 800cb3a:	7bbb      	ldrb	r3, [r7, #14]
 800cb3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	3310      	adds	r3, #16
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	3304      	adds	r3, #4
 800cb50:	e00b      	b.n	800cb6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb52:	7bbb      	ldrb	r3, [r7, #14]
 800cb54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb58:	4613      	mov	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4413      	add	r3, r2
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	4413      	add	r3, r2
 800cb68:	3304      	adds	r3, #4
 800cb6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2202      	movs	r2, #2
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fc37 	bl	800d3ec <USBD_CtlSendData>
              break;
 800cb7e:	e06a      	b.n	800cc56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	da11      	bge.n	800cbac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb88:	7bbb      	ldrb	r3, [r7, #14]
 800cb8a:	f003 020f 	and.w	r2, r3, #15
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	4613      	mov	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	440b      	add	r3, r1
 800cb9a:	3324      	adds	r3, #36	; 0x24
 800cb9c:	881b      	ldrh	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d117      	bne.n	800cbd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 fbb0 	bl	800d30a <USBD_CtlError>
                  break;
 800cbaa:	e054      	b.n	800cc56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	f003 020f 	and.w	r2, r3, #15
 800cbb2:	6879      	ldr	r1, [r7, #4]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	440b      	add	r3, r1
 800cbbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbc2:	881b      	ldrh	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d104      	bne.n	800cbd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fb9d 	bl	800d30a <USBD_CtlError>
                  break;
 800cbd0:	e041      	b.n	800cc56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	da0b      	bge.n	800cbf2 <USBD_StdEPReq+0x2b2>
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	3310      	adds	r3, #16
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	4413      	add	r3, r2
 800cbee:	3304      	adds	r3, #4
 800cbf0:	e00b      	b.n	800cc0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbf2:	7bbb      	ldrb	r3, [r7, #14]
 800cbf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	4413      	add	r3, r2
 800cc08:	3304      	adds	r3, #4
 800cc0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc0c:	7bbb      	ldrb	r3, [r7, #14]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d002      	beq.n	800cc18 <USBD_StdEPReq+0x2d8>
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	2b80      	cmp	r3, #128	; 0x80
 800cc16:	d103      	bne.n	800cc20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	e00e      	b.n	800cc3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	4619      	mov	r1, r3
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 ffa1 	bl	800db6c <USBD_LL_IsStallEP>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d003      	beq.n	800cc38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2201      	movs	r2, #1
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	e002      	b.n	800cc3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2202      	movs	r2, #2
 800cc42:	4619      	mov	r1, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fbd1 	bl	800d3ec <USBD_CtlSendData>
              break;
 800cc4a:	e004      	b.n	800cc56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fb5b 	bl	800d30a <USBD_CtlError>
              break;
 800cc54:	bf00      	nop
          }
          break;
 800cc56:	e004      	b.n	800cc62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fb55 	bl	800d30a <USBD_CtlError>
          break;
 800cc60:	bf00      	nop
      }
      break;
 800cc62:	e005      	b.n	800cc70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 fb4f 	bl	800d30a <USBD_CtlError>
      break;
 800cc6c:	e000      	b.n	800cc70 <USBD_StdEPReq+0x330>
      break;
 800cc6e:	bf00      	nop
  }

  return ret;
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
	...

0800cc7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc86:	2300      	movs	r3, #0
 800cc88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	885b      	ldrh	r3, [r3, #2]
 800cc96:	0a1b      	lsrs	r3, r3, #8
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	2b06      	cmp	r3, #6
 800cc9e:	f200 8128 	bhi.w	800cef2 <USBD_GetDescriptor+0x276>
 800cca2:	a201      	add	r2, pc, #4	; (adr r2, 800cca8 <USBD_GetDescriptor+0x2c>)
 800cca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca8:	0800ccc5 	.word	0x0800ccc5
 800ccac:	0800ccdd 	.word	0x0800ccdd
 800ccb0:	0800cd1d 	.word	0x0800cd1d
 800ccb4:	0800cef3 	.word	0x0800cef3
 800ccb8:	0800cef3 	.word	0x0800cef3
 800ccbc:	0800ce93 	.word	0x0800ce93
 800ccc0:	0800cebf 	.word	0x0800cebf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	7c12      	ldrb	r2, [r2, #16]
 800ccd0:	f107 0108 	add.w	r1, r7, #8
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4798      	blx	r3
 800ccd8:	60f8      	str	r0, [r7, #12]
      break;
 800ccda:	e112      	b.n	800cf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	7c1b      	ldrb	r3, [r3, #16]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10d      	bne.n	800cd00 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccec:	f107 0208 	add.w	r2, r7, #8
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	4798      	blx	r3
 800ccf4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ccfe:	e100      	b.n	800cf02 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd08:	f107 0208 	add.w	r2, r7, #8
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4798      	blx	r3
 800cd10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3301      	adds	r3, #1
 800cd16:	2202      	movs	r2, #2
 800cd18:	701a      	strb	r2, [r3, #0]
      break;
 800cd1a:	e0f2      	b.n	800cf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	885b      	ldrh	r3, [r3, #2]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b05      	cmp	r3, #5
 800cd24:	f200 80ac 	bhi.w	800ce80 <USBD_GetDescriptor+0x204>
 800cd28:	a201      	add	r2, pc, #4	; (adr r2, 800cd30 <USBD_GetDescriptor+0xb4>)
 800cd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2e:	bf00      	nop
 800cd30:	0800cd49 	.word	0x0800cd49
 800cd34:	0800cd7d 	.word	0x0800cd7d
 800cd38:	0800cdb1 	.word	0x0800cdb1
 800cd3c:	0800cde5 	.word	0x0800cde5
 800cd40:	0800ce19 	.word	0x0800ce19
 800cd44:	0800ce4d 	.word	0x0800ce4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00b      	beq.n	800cd6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	7c12      	ldrb	r2, [r2, #16]
 800cd60:	f107 0108 	add.w	r1, r7, #8
 800cd64:	4610      	mov	r0, r2
 800cd66:	4798      	blx	r3
 800cd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd6a:	e091      	b.n	800ce90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd6c:	6839      	ldr	r1, [r7, #0]
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 facb 	bl	800d30a <USBD_CtlError>
            err++;
 800cd74:	7afb      	ldrb	r3, [r7, #11]
 800cd76:	3301      	adds	r3, #1
 800cd78:	72fb      	strb	r3, [r7, #11]
          break;
 800cd7a:	e089      	b.n	800ce90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00b      	beq.n	800cda0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	7c12      	ldrb	r2, [r2, #16]
 800cd94:	f107 0108 	add.w	r1, r7, #8
 800cd98:	4610      	mov	r0, r2
 800cd9a:	4798      	blx	r3
 800cd9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd9e:	e077      	b.n	800ce90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 fab1 	bl	800d30a <USBD_CtlError>
            err++;
 800cda8:	7afb      	ldrb	r3, [r7, #11]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	72fb      	strb	r3, [r7, #11]
          break;
 800cdae:	e06f      	b.n	800ce90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00b      	beq.n	800cdd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	7c12      	ldrb	r2, [r2, #16]
 800cdc8:	f107 0108 	add.w	r1, r7, #8
 800cdcc:	4610      	mov	r0, r2
 800cdce:	4798      	blx	r3
 800cdd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdd2:	e05d      	b.n	800ce90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdd4:	6839      	ldr	r1, [r7, #0]
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 fa97 	bl	800d30a <USBD_CtlError>
            err++;
 800cddc:	7afb      	ldrb	r3, [r7, #11]
 800cdde:	3301      	adds	r3, #1
 800cde0:	72fb      	strb	r3, [r7, #11]
          break;
 800cde2:	e055      	b.n	800ce90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00b      	beq.n	800ce08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	7c12      	ldrb	r2, [r2, #16]
 800cdfc:	f107 0108 	add.w	r1, r7, #8
 800ce00:	4610      	mov	r0, r2
 800ce02:	4798      	blx	r3
 800ce04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce06:	e043      	b.n	800ce90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fa7d 	bl	800d30a <USBD_CtlError>
            err++;
 800ce10:	7afb      	ldrb	r3, [r7, #11]
 800ce12:	3301      	adds	r3, #1
 800ce14:	72fb      	strb	r3, [r7, #11]
          break;
 800ce16:	e03b      	b.n	800ce90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00b      	beq.n	800ce3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	7c12      	ldrb	r2, [r2, #16]
 800ce30:	f107 0108 	add.w	r1, r7, #8
 800ce34:	4610      	mov	r0, r2
 800ce36:	4798      	blx	r3
 800ce38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce3a:	e029      	b.n	800ce90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fa63 	bl	800d30a <USBD_CtlError>
            err++;
 800ce44:	7afb      	ldrb	r3, [r7, #11]
 800ce46:	3301      	adds	r3, #1
 800ce48:	72fb      	strb	r3, [r7, #11]
          break;
 800ce4a:	e021      	b.n	800ce90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00b      	beq.n	800ce70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce5e:	699b      	ldr	r3, [r3, #24]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	7c12      	ldrb	r2, [r2, #16]
 800ce64:	f107 0108 	add.w	r1, r7, #8
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4798      	blx	r3
 800ce6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce6e:	e00f      	b.n	800ce90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce70:	6839      	ldr	r1, [r7, #0]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fa49 	bl	800d30a <USBD_CtlError>
            err++;
 800ce78:	7afb      	ldrb	r3, [r7, #11]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce7e:	e007      	b.n	800ce90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fa41 	bl	800d30a <USBD_CtlError>
          err++;
 800ce88:	7afb      	ldrb	r3, [r7, #11]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ce8e:	bf00      	nop
      }
      break;
 800ce90:	e037      	b.n	800cf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7c1b      	ldrb	r3, [r3, #16]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d109      	bne.n	800ceae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea2:	f107 0208 	add.w	r2, r7, #8
 800cea6:	4610      	mov	r0, r2
 800cea8:	4798      	blx	r3
 800ceaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ceac:	e029      	b.n	800cf02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 fa2a 	bl	800d30a <USBD_CtlError>
        err++;
 800ceb6:	7afb      	ldrb	r3, [r7, #11]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	72fb      	strb	r3, [r7, #11]
      break;
 800cebc:	e021      	b.n	800cf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	7c1b      	ldrb	r3, [r3, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d10d      	bne.n	800cee2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cece:	f107 0208 	add.w	r2, r7, #8
 800ced2:	4610      	mov	r0, r2
 800ced4:	4798      	blx	r3
 800ced6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	3301      	adds	r3, #1
 800cedc:	2207      	movs	r2, #7
 800cede:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cee0:	e00f      	b.n	800cf02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fa10 	bl	800d30a <USBD_CtlError>
        err++;
 800ceea:	7afb      	ldrb	r3, [r7, #11]
 800ceec:	3301      	adds	r3, #1
 800ceee:	72fb      	strb	r3, [r7, #11]
      break;
 800cef0:	e007      	b.n	800cf02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cef2:	6839      	ldr	r1, [r7, #0]
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 fa08 	bl	800d30a <USBD_CtlError>
      err++;
 800cefa:	7afb      	ldrb	r3, [r7, #11]
 800cefc:	3301      	adds	r3, #1
 800cefe:	72fb      	strb	r3, [r7, #11]
      break;
 800cf00:	bf00      	nop
  }

  if (err != 0U)
 800cf02:	7afb      	ldrb	r3, [r7, #11]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d11e      	bne.n	800cf46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	88db      	ldrh	r3, [r3, #6]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d016      	beq.n	800cf3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cf10:	893b      	ldrh	r3, [r7, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00e      	beq.n	800cf34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	88da      	ldrh	r2, [r3, #6]
 800cf1a:	893b      	ldrh	r3, [r7, #8]
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	bf28      	it	cs
 800cf20:	4613      	movcs	r3, r2
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf26:	893b      	ldrh	r3, [r7, #8]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	68f9      	ldr	r1, [r7, #12]
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fa5d 	bl	800d3ec <USBD_CtlSendData>
 800cf32:	e009      	b.n	800cf48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 f9e7 	bl	800d30a <USBD_CtlError>
 800cf3c:	e004      	b.n	800cf48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fa91 	bl	800d466 <USBD_CtlSendStatus>
 800cf44:	e000      	b.n	800cf48 <USBD_GetDescriptor+0x2cc>
    return;
 800cf46:	bf00      	nop
  }
}
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop

0800cf50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	889b      	ldrh	r3, [r3, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d131      	bne.n	800cfc6 <USBD_SetAddress+0x76>
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	88db      	ldrh	r3, [r3, #6]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d12d      	bne.n	800cfc6 <USBD_SetAddress+0x76>
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	885b      	ldrh	r3, [r3, #2]
 800cf6e:	2b7f      	cmp	r3, #127	; 0x7f
 800cf70:	d829      	bhi.n	800cfc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	885b      	ldrh	r3, [r3, #2]
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d104      	bne.n	800cf94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f9bc 	bl	800d30a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf92:	e01d      	b.n	800cfd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7bfa      	ldrb	r2, [r7, #15]
 800cf98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fe0f 	bl	800dbc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fa5d 	bl	800d466 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cfac:	7bfb      	ldrb	r3, [r7, #15]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d004      	beq.n	800cfbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2202      	movs	r2, #2
 800cfb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfba:	e009      	b.n	800cfd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfc4:	e004      	b.n	800cfd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f99e 	bl	800d30a <USBD_CtlError>
  }
}
 800cfce:	bf00      	nop
 800cfd0:	bf00      	nop
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	885b      	ldrh	r3, [r3, #2]
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	4b4e      	ldr	r3, [pc, #312]	; (800d128 <USBD_SetConfig+0x150>)
 800cfee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cff0:	4b4d      	ldr	r3, [pc, #308]	; (800d128 <USBD_SetConfig+0x150>)
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d905      	bls.n	800d004 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f985 	bl	800d30a <USBD_CtlError>
    return USBD_FAIL;
 800d000:	2303      	movs	r3, #3
 800d002:	e08c      	b.n	800d11e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d002      	beq.n	800d016 <USBD_SetConfig+0x3e>
 800d010:	2b03      	cmp	r3, #3
 800d012:	d029      	beq.n	800d068 <USBD_SetConfig+0x90>
 800d014:	e075      	b.n	800d102 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d016:	4b44      	ldr	r3, [pc, #272]	; (800d128 <USBD_SetConfig+0x150>)
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d020      	beq.n	800d060 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d01e:	4b42      	ldr	r3, [pc, #264]	; (800d128 <USBD_SetConfig+0x150>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	461a      	mov	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d028:	4b3f      	ldr	r3, [pc, #252]	; (800d128 <USBD_SetConfig+0x150>)
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7ff f83d 	bl	800c0ae <USBD_SetClassConfig>
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d008      	beq.n	800d050 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d03e:	6839      	ldr	r1, [r7, #0]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 f962 	bl	800d30a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2202      	movs	r2, #2
 800d04a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d04e:	e065      	b.n	800d11c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fa08 	bl	800d466 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2203      	movs	r2, #3
 800d05a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d05e:	e05d      	b.n	800d11c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 fa00 	bl	800d466 <USBD_CtlSendStatus>
      break;
 800d066:	e059      	b.n	800d11c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d068:	4b2f      	ldr	r3, [pc, #188]	; (800d128 <USBD_SetConfig+0x150>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d112      	bne.n	800d096 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2202      	movs	r2, #2
 800d074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d078:	4b2b      	ldr	r3, [pc, #172]	; (800d128 <USBD_SetConfig+0x150>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	461a      	mov	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d082:	4b29      	ldr	r3, [pc, #164]	; (800d128 <USBD_SetConfig+0x150>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	4619      	mov	r1, r3
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7ff f82c 	bl	800c0e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f9e9 	bl	800d466 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d094:	e042      	b.n	800d11c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d096:	4b24      	ldr	r3, [pc, #144]	; (800d128 <USBD_SetConfig+0x150>)
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	461a      	mov	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d02a      	beq.n	800d0fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7ff f81a 	bl	800c0e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d0b2:	4b1d      	ldr	r3, [pc, #116]	; (800d128 <USBD_SetConfig+0x150>)
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0bc:	4b1a      	ldr	r3, [pc, #104]	; (800d128 <USBD_SetConfig+0x150>)
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7fe fff3 	bl	800c0ae <USBD_SetClassConfig>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00f      	beq.n	800d0f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d0d2:	6839      	ldr	r1, [r7, #0]
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f918 	bl	800d30a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7fe ffff 	bl	800c0e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0f0:	e014      	b.n	800d11c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f9b7 	bl	800d466 <USBD_CtlSendStatus>
      break;
 800d0f8:	e010      	b.n	800d11c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 f9b3 	bl	800d466 <USBD_CtlSendStatus>
      break;
 800d100:	e00c      	b.n	800d11c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f900 	bl	800d30a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d10a:	4b07      	ldr	r3, [pc, #28]	; (800d128 <USBD_SetConfig+0x150>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7fe ffe8 	bl	800c0e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d116:	2303      	movs	r3, #3
 800d118:	73fb      	strb	r3, [r7, #15]
      break;
 800d11a:	bf00      	nop
  }

  return ret;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	200008a5 	.word	0x200008a5

0800d12c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	88db      	ldrh	r3, [r3, #6]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d004      	beq.n	800d148 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d13e:	6839      	ldr	r1, [r7, #0]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 f8e2 	bl	800d30a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d146:	e023      	b.n	800d190 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b02      	cmp	r3, #2
 800d152:	dc02      	bgt.n	800d15a <USBD_GetConfig+0x2e>
 800d154:	2b00      	cmp	r3, #0
 800d156:	dc03      	bgt.n	800d160 <USBD_GetConfig+0x34>
 800d158:	e015      	b.n	800d186 <USBD_GetConfig+0x5a>
 800d15a:	2b03      	cmp	r3, #3
 800d15c:	d00b      	beq.n	800d176 <USBD_GetConfig+0x4a>
 800d15e:	e012      	b.n	800d186 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	3308      	adds	r3, #8
 800d16a:	2201      	movs	r2, #1
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f93c 	bl	800d3ec <USBD_CtlSendData>
        break;
 800d174:	e00c      	b.n	800d190 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	3304      	adds	r3, #4
 800d17a:	2201      	movs	r2, #1
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f934 	bl	800d3ec <USBD_CtlSendData>
        break;
 800d184:	e004      	b.n	800d190 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f8be 	bl	800d30a <USBD_CtlError>
        break;
 800d18e:	bf00      	nop
}
 800d190:	bf00      	nop
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d81e      	bhi.n	800d1ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	88db      	ldrh	r3, [r3, #6]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d004      	beq.n	800d1c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d1b8:	6839      	ldr	r1, [r7, #0]
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f8a5 	bl	800d30a <USBD_CtlError>
        break;
 800d1c0:	e01a      	b.n	800d1f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d005      	beq.n	800d1de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	f043 0202 	orr.w	r2, r3, #2
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	330c      	adds	r3, #12
 800d1e2:	2202      	movs	r2, #2
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f900 	bl	800d3ec <USBD_CtlSendData>
      break;
 800d1ec:	e004      	b.n	800d1f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f88a 	bl	800d30a <USBD_CtlError>
      break;
 800d1f6:	bf00      	nop
  }
}
 800d1f8:	bf00      	nop
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	885b      	ldrh	r3, [r3, #2]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d107      	bne.n	800d222 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 f923 	bl	800d466 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d220:	e013      	b.n	800d24a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	885b      	ldrh	r3, [r3, #2]
 800d226:	2b02      	cmp	r3, #2
 800d228:	d10b      	bne.n	800d242 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	889b      	ldrh	r3, [r3, #4]
 800d22e:	0a1b      	lsrs	r3, r3, #8
 800d230:	b29b      	uxth	r3, r3
 800d232:	b2da      	uxtb	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f913 	bl	800d466 <USBD_CtlSendStatus>
}
 800d240:	e003      	b.n	800d24a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f860 	bl	800d30a <USBD_CtlError>
}
 800d24a:	bf00      	nop
 800d24c:	3708      	adds	r7, #8
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d262:	b2db      	uxtb	r3, r3
 800d264:	3b01      	subs	r3, #1
 800d266:	2b02      	cmp	r3, #2
 800d268:	d80b      	bhi.n	800d282 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	885b      	ldrh	r3, [r3, #2]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d10c      	bne.n	800d28c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f8f3 	bl	800d466 <USBD_CtlSendStatus>
      }
      break;
 800d280:	e004      	b.n	800d28c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f840 	bl	800d30a <USBD_CtlError>
      break;
 800d28a:	e000      	b.n	800d28e <USBD_ClrFeature+0x3c>
      break;
 800d28c:	bf00      	nop
  }
}
 800d28e:	bf00      	nop
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b084      	sub	sp, #16
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	781a      	ldrb	r2, [r3, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	781a      	ldrb	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f7ff fa40 	bl	800c746 <SWAPBYTE>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7ff fa33 	bl	800c746 <SWAPBYTE>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f7ff fa26 	bl	800c746 <SWAPBYTE>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	80da      	strh	r2, [r3, #6]
}
 800d302:	bf00      	nop
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b082      	sub	sp, #8
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d314:	2180      	movs	r1, #128	; 0x80
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fbea 	bl	800daf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d31c:	2100      	movs	r1, #0
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fbe6 	bl	800daf0 <USBD_LL_StallEP>
}
 800d324:	bf00      	nop
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d338:	2300      	movs	r3, #0
 800d33a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d036      	beq.n	800d3b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d346:	6938      	ldr	r0, [r7, #16]
 800d348:	f000 f836 	bl	800d3b8 <USBD_GetLen>
 800d34c:	4603      	mov	r3, r0
 800d34e:	3301      	adds	r3, #1
 800d350:	b29b      	uxth	r3, r3
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	b29a      	uxth	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d35a:	7dfb      	ldrb	r3, [r7, #23]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	4413      	add	r3, r2
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	7812      	ldrb	r2, [r2, #0]
 800d364:	701a      	strb	r2, [r3, #0]
  idx++;
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	3301      	adds	r3, #1
 800d36a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	4413      	add	r3, r2
 800d372:	2203      	movs	r2, #3
 800d374:	701a      	strb	r2, [r3, #0]
  idx++;
 800d376:	7dfb      	ldrb	r3, [r7, #23]
 800d378:	3301      	adds	r3, #1
 800d37a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d37c:	e013      	b.n	800d3a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	4413      	add	r3, r2
 800d384:	693a      	ldr	r2, [r7, #16]
 800d386:	7812      	ldrb	r2, [r2, #0]
 800d388:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	3301      	adds	r3, #1
 800d38e:	613b      	str	r3, [r7, #16]
    idx++;
 800d390:	7dfb      	ldrb	r3, [r7, #23]
 800d392:	3301      	adds	r3, #1
 800d394:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d396:	7dfb      	ldrb	r3, [r7, #23]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	4413      	add	r3, r2
 800d39c:	2200      	movs	r2, #0
 800d39e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d3a0:	7dfb      	ldrb	r3, [r7, #23]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1e7      	bne.n	800d37e <USBD_GetString+0x52>
 800d3ae:	e000      	b.n	800d3b2 <USBD_GetString+0x86>
    return;
 800d3b0:	bf00      	nop
  }
}
 800d3b2:	3718      	adds	r7, #24
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d3c8:	e005      	b.n	800d3d6 <USBD_GetLen+0x1e>
  {
    len++;
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1f5      	bne.n	800d3ca <USBD_GetLen+0x12>
  }

  return len;
 800d3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2202      	movs	r2, #2
 800d3fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	2100      	movs	r1, #0
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f000 fbf5 	bl	800dc02 <USBD_LL_Transmit>

  return USBD_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	2100      	movs	r1, #0
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f000 fbe4 	bl	800dc02 <USBD_LL_Transmit>

  return USBD_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	2100      	movs	r1, #0
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f000 fbf4 	bl	800dc44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b082      	sub	sp, #8
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2204      	movs	r2, #4
 800d472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d476:	2300      	movs	r3, #0
 800d478:	2200      	movs	r2, #0
 800d47a:	2100      	movs	r1, #0
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fbc0 	bl	800dc02 <USBD_LL_Transmit>

  return USBD_OK;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2205      	movs	r2, #5
 800d498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d49c:	2300      	movs	r3, #0
 800d49e:	2200      	movs	r2, #0
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fbce 	bl	800dc44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
	...

0800d4b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	490e      	ldr	r1, [pc, #56]	; (800d4f4 <MX_USB_DEVICE_Init+0x40>)
 800d4bc:	480e      	ldr	r0, [pc, #56]	; (800d4f8 <MX_USB_DEVICE_Init+0x44>)
 800d4be:	f7fe fd79 	bl	800bfb4 <USBD_Init>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d4c8:	f7f5 fb7a 	bl	8002bc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800d4cc:	490b      	ldr	r1, [pc, #44]	; (800d4fc <MX_USB_DEVICE_Init+0x48>)
 800d4ce:	480a      	ldr	r0, [pc, #40]	; (800d4f8 <MX_USB_DEVICE_Init+0x44>)
 800d4d0:	f7fe fda0 	bl	800c014 <USBD_RegisterClass>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d4da:	f7f5 fb71 	bl	8002bc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d4de:	4806      	ldr	r0, [pc, #24]	; (800d4f8 <MX_USB_DEVICE_Init+0x44>)
 800d4e0:	f7fe fdce 	bl	800c080 <USBD_Start>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800d4ea:	f7f5 fb69 	bl	8002bc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d4ee:	bf00      	nop
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	2000014c 	.word	0x2000014c
 800d4f8:	200008a8 	.word	0x200008a8
 800d4fc:	20000018 	.word	0x20000018

0800d500 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	6039      	str	r1, [r7, #0]
 800d50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2212      	movs	r2, #18
 800d510:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d512:	4b03      	ldr	r3, [pc, #12]	; (800d520 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d514:	4618      	mov	r0, r3
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	20000168 	.word	0x20000168

0800d524 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	6039      	str	r1, [r7, #0]
 800d52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2204      	movs	r2, #4
 800d534:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d536:	4b03      	ldr	r3, [pc, #12]	; (800d544 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d538:	4618      	mov	r0, r3
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	2000017c 	.word	0x2000017c

0800d548 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	6039      	str	r1, [r7, #0]
 800d552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d105      	bne.n	800d566 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d55a:	683a      	ldr	r2, [r7, #0]
 800d55c:	4907      	ldr	r1, [pc, #28]	; (800d57c <USBD_FS_ProductStrDescriptor+0x34>)
 800d55e:	4808      	ldr	r0, [pc, #32]	; (800d580 <USBD_FS_ProductStrDescriptor+0x38>)
 800d560:	f7ff fee4 	bl	800d32c <USBD_GetString>
 800d564:	e004      	b.n	800d570 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	4904      	ldr	r1, [pc, #16]	; (800d57c <USBD_FS_ProductStrDescriptor+0x34>)
 800d56a:	4805      	ldr	r0, [pc, #20]	; (800d580 <USBD_FS_ProductStrDescriptor+0x38>)
 800d56c:	f7ff fede 	bl	800d32c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d570:	4b02      	ldr	r3, [pc, #8]	; (800d57c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20000b84 	.word	0x20000b84
 800d580:	0800e6f4 	.word	0x0800e6f4

0800d584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	6039      	str	r1, [r7, #0]
 800d58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	4904      	ldr	r1, [pc, #16]	; (800d5a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d594:	4804      	ldr	r0, [pc, #16]	; (800d5a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d596:	f7ff fec9 	bl	800d32c <USBD_GetString>
  return USBD_StrDesc;
 800d59a:	4b02      	ldr	r3, [pc, #8]	; (800d5a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	20000b84 	.word	0x20000b84
 800d5a8:	0800e708 	.word	0x0800e708

0800d5ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	6039      	str	r1, [r7, #0]
 800d5b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	221a      	movs	r2, #26
 800d5bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d5be:	f000 f843 	bl	800d648 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d5c2:	4b02      	ldr	r3, [pc, #8]	; (800d5cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	20000180 	.word	0x20000180

0800d5d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d105      	bne.n	800d5ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	4907      	ldr	r1, [pc, #28]	; (800d604 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5e6:	4808      	ldr	r0, [pc, #32]	; (800d608 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5e8:	f7ff fea0 	bl	800d32c <USBD_GetString>
 800d5ec:	e004      	b.n	800d5f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	4904      	ldr	r1, [pc, #16]	; (800d604 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5f2:	4805      	ldr	r0, [pc, #20]	; (800d608 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5f4:	f7ff fe9a 	bl	800d32c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5f8:	4b02      	ldr	r3, [pc, #8]	; (800d604 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20000b84 	.word	0x20000b84
 800d608:	0800e714 	.word	0x0800e714

0800d60c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	6039      	str	r1, [r7, #0]
 800d616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d618:	79fb      	ldrb	r3, [r7, #7]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d105      	bne.n	800d62a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	4907      	ldr	r1, [pc, #28]	; (800d640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d622:	4808      	ldr	r0, [pc, #32]	; (800d644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d624:	f7ff fe82 	bl	800d32c <USBD_GetString>
 800d628:	e004      	b.n	800d634 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d62a:	683a      	ldr	r2, [r7, #0]
 800d62c:	4904      	ldr	r1, [pc, #16]	; (800d640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d62e:	4805      	ldr	r0, [pc, #20]	; (800d644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d630:	f7ff fe7c 	bl	800d32c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d634:	4b02      	ldr	r3, [pc, #8]	; (800d640 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	20000b84 	.word	0x20000b84
 800d644:	0800e720 	.word	0x0800e720

0800d648 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d64e:	4b0f      	ldr	r3, [pc, #60]	; (800d68c <Get_SerialNum+0x44>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d654:	4b0e      	ldr	r3, [pc, #56]	; (800d690 <Get_SerialNum+0x48>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d65a:	4b0e      	ldr	r3, [pc, #56]	; (800d694 <Get_SerialNum+0x4c>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4413      	add	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d009      	beq.n	800d682 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d66e:	2208      	movs	r2, #8
 800d670:	4909      	ldr	r1, [pc, #36]	; (800d698 <Get_SerialNum+0x50>)
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 f814 	bl	800d6a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d678:	2204      	movs	r2, #4
 800d67a:	4908      	ldr	r1, [pc, #32]	; (800d69c <Get_SerialNum+0x54>)
 800d67c:	68b8      	ldr	r0, [r7, #8]
 800d67e:	f000 f80f 	bl	800d6a0 <IntToUnicode>
  }
}
 800d682:	bf00      	nop
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	1fff7a10 	.word	0x1fff7a10
 800d690:	1fff7a14 	.word	0x1fff7a14
 800d694:	1fff7a18 	.word	0x1fff7a18
 800d698:	20000182 	.word	0x20000182
 800d69c:	20000192 	.word	0x20000192

0800d6a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b087      	sub	sp, #28
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	75fb      	strb	r3, [r7, #23]
 800d6b6:	e027      	b.n	800d708 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	0f1b      	lsrs	r3, r3, #28
 800d6bc:	2b09      	cmp	r3, #9
 800d6be:	d80b      	bhi.n	800d6d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	0f1b      	lsrs	r3, r3, #28
 800d6c4:	b2da      	uxtb	r2, r3
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3230      	adds	r2, #48	; 0x30
 800d6d2:	b2d2      	uxtb	r2, r2
 800d6d4:	701a      	strb	r2, [r3, #0]
 800d6d6:	e00a      	b.n	800d6ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	0f1b      	lsrs	r3, r3, #28
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	005b      	lsls	r3, r3, #1
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	440b      	add	r3, r1
 800d6e8:	3237      	adds	r2, #55	; 0x37
 800d6ea:	b2d2      	uxtb	r2, r2
 800d6ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	011b      	lsls	r3, r3, #4
 800d6f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	2200      	movs	r2, #0
 800d700:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	3301      	adds	r3, #1
 800d706:	75fb      	strb	r3, [r7, #23]
 800d708:	7dfa      	ldrb	r2, [r7, #23]
 800d70a:	79fb      	ldrb	r3, [r7, #7]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d3d3      	bcc.n	800d6b8 <IntToUnicode+0x18>
  }
}
 800d710:	bf00      	nop
 800d712:	bf00      	nop
 800d714:	371c      	adds	r7, #28
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
	...

0800d720 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08a      	sub	sp, #40	; 0x28
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d728:	f107 0314 	add.w	r3, r7, #20
 800d72c:	2200      	movs	r2, #0
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	605a      	str	r2, [r3, #4]
 800d732:	609a      	str	r2, [r3, #8]
 800d734:	60da      	str	r2, [r3, #12]
 800d736:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d740:	d13a      	bne.n	800d7b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d742:	2300      	movs	r3, #0
 800d744:	613b      	str	r3, [r7, #16]
 800d746:	4b1e      	ldr	r3, [pc, #120]	; (800d7c0 <HAL_PCD_MspInit+0xa0>)
 800d748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d74a:	4a1d      	ldr	r2, [pc, #116]	; (800d7c0 <HAL_PCD_MspInit+0xa0>)
 800d74c:	f043 0301 	orr.w	r3, r3, #1
 800d750:	6313      	str	r3, [r2, #48]	; 0x30
 800d752:	4b1b      	ldr	r3, [pc, #108]	; (800d7c0 <HAL_PCD_MspInit+0xa0>)
 800d754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d756:	f003 0301 	and.w	r3, r3, #1
 800d75a:	613b      	str	r3, [r7, #16]
 800d75c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d75e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d764:	2302      	movs	r3, #2
 800d766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d768:	2300      	movs	r3, #0
 800d76a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d76c:	2303      	movs	r3, #3
 800d76e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d770:	230a      	movs	r3, #10
 800d772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d774:	f107 0314 	add.w	r3, r7, #20
 800d778:	4619      	mov	r1, r3
 800d77a:	4812      	ldr	r0, [pc, #72]	; (800d7c4 <HAL_PCD_MspInit+0xa4>)
 800d77c:	f7f7 fd06 	bl	800518c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d780:	4b0f      	ldr	r3, [pc, #60]	; (800d7c0 <HAL_PCD_MspInit+0xa0>)
 800d782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d784:	4a0e      	ldr	r2, [pc, #56]	; (800d7c0 <HAL_PCD_MspInit+0xa0>)
 800d786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d78a:	6353      	str	r3, [r2, #52]	; 0x34
 800d78c:	2300      	movs	r3, #0
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	4b0b      	ldr	r3, [pc, #44]	; (800d7c0 <HAL_PCD_MspInit+0xa0>)
 800d792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d794:	4a0a      	ldr	r2, [pc, #40]	; (800d7c0 <HAL_PCD_MspInit+0xa0>)
 800d796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d79a:	6453      	str	r3, [r2, #68]	; 0x44
 800d79c:	4b08      	ldr	r3, [pc, #32]	; (800d7c0 <HAL_PCD_MspInit+0xa0>)
 800d79e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7a4:	60fb      	str	r3, [r7, #12]
 800d7a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	2043      	movs	r0, #67	; 0x43
 800d7ae:	f7f6 fe2e 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7b2:	2043      	movs	r0, #67	; 0x43
 800d7b4:	f7f6 fe47 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7b8:	bf00      	nop
 800d7ba:	3728      	adds	r7, #40	; 0x28
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	40023800 	.word	0x40023800
 800d7c4:	40020000 	.word	0x40020000

0800d7c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d7dc:	4619      	mov	r1, r3
 800d7de:	4610      	mov	r0, r2
 800d7e0:	f7fe fc9b 	bl	800c11a <USBD_LL_SetupStage>
}
 800d7e4:	bf00      	nop
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d7fe:	78fa      	ldrb	r2, [r7, #3]
 800d800:	6879      	ldr	r1, [r7, #4]
 800d802:	4613      	mov	r3, r2
 800d804:	00db      	lsls	r3, r3, #3
 800d806:	4413      	add	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	440b      	add	r3, r1
 800d80c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	78fb      	ldrb	r3, [r7, #3]
 800d814:	4619      	mov	r1, r3
 800d816:	f7fe fcd5 	bl	800c1c4 <USBD_LL_DataOutStage>
}
 800d81a:	bf00      	nop
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b082      	sub	sp, #8
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	460b      	mov	r3, r1
 800d82c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d834:	78fa      	ldrb	r2, [r7, #3]
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	4613      	mov	r3, r2
 800d83a:	00db      	lsls	r3, r3, #3
 800d83c:	4413      	add	r3, r2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	440b      	add	r3, r1
 800d842:	334c      	adds	r3, #76	; 0x4c
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	78fb      	ldrb	r3, [r7, #3]
 800d848:	4619      	mov	r1, r3
 800d84a:	f7fe fd6e 	bl	800c32a <USBD_LL_DataInStage>
}
 800d84e:	bf00      	nop
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b082      	sub	sp, #8
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe fea2 	bl	800c5ae <USBD_LL_SOF>
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b084      	sub	sp, #16
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d87a:	2301      	movs	r3, #1
 800d87c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	2b02      	cmp	r3, #2
 800d884:	d001      	beq.n	800d88a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d886:	f7f5 f99b 	bl	8002bc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d890:	7bfa      	ldrb	r2, [r7, #15]
 800d892:	4611      	mov	r1, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f7fe fe4c 	bl	800c532 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fe fdf4 	bl	800c48e <USBD_LL_Reset>
}
 800d8a6:	bf00      	nop
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
	...

0800d8b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fe fe47 	bl	800c552 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	6812      	ldr	r2, [r2, #0]
 800d8d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d8d6:	f043 0301 	orr.w	r3, r3, #1
 800d8da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a1b      	ldr	r3, [r3, #32]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d005      	beq.n	800d8f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8e4:	4b04      	ldr	r3, [pc, #16]	; (800d8f8 <HAL_PCD_SuspendCallback+0x48>)
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	4a03      	ldr	r2, [pc, #12]	; (800d8f8 <HAL_PCD_SuspendCallback+0x48>)
 800d8ea:	f043 0306 	orr.w	r3, r3, #6
 800d8ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	e000ed00 	.word	0xe000ed00

0800d8fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe fe37 	bl	800c57e <USBD_LL_Resume>
}
 800d910:	bf00      	nop
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d92a:	78fa      	ldrb	r2, [r7, #3]
 800d92c:	4611      	mov	r1, r2
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fe fe8f 	bl	800c652 <USBD_LL_IsoOUTIncomplete>
}
 800d934:	bf00      	nop
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	460b      	mov	r3, r1
 800d946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d94e:	78fa      	ldrb	r2, [r7, #3]
 800d950:	4611      	mov	r1, r2
 800d952:	4618      	mov	r0, r3
 800d954:	f7fe fe4b 	bl	800c5ee <USBD_LL_IsoINIncomplete>
}
 800d958:	bf00      	nop
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe fea1 	bl	800c6b6 <USBD_LL_DevConnected>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fe9e 	bl	800c6cc <USBD_LL_DevDisconnected>
}
 800d990:	bf00      	nop
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d13c      	bne.n	800da22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d9a8:	4a20      	ldr	r2, [pc, #128]	; (800da2c <USBD_LL_Init+0x94>)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a1e      	ldr	r2, [pc, #120]	; (800da2c <USBD_LL_Init+0x94>)
 800d9b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d9b8:	4b1c      	ldr	r3, [pc, #112]	; (800da2c <USBD_LL_Init+0x94>)
 800d9ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d9be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d9c0:	4b1a      	ldr	r3, [pc, #104]	; (800da2c <USBD_LL_Init+0x94>)
 800d9c2:	2204      	movs	r2, #4
 800d9c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d9c6:	4b19      	ldr	r3, [pc, #100]	; (800da2c <USBD_LL_Init+0x94>)
 800d9c8:	2202      	movs	r2, #2
 800d9ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9cc:	4b17      	ldr	r3, [pc, #92]	; (800da2c <USBD_LL_Init+0x94>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9d2:	4b16      	ldr	r3, [pc, #88]	; (800da2c <USBD_LL_Init+0x94>)
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d9d8:	4b14      	ldr	r3, [pc, #80]	; (800da2c <USBD_LL_Init+0x94>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d9de:	4b13      	ldr	r3, [pc, #76]	; (800da2c <USBD_LL_Init+0x94>)
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d9e4:	4b11      	ldr	r3, [pc, #68]	; (800da2c <USBD_LL_Init+0x94>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d9ea:	4b10      	ldr	r3, [pc, #64]	; (800da2c <USBD_LL_Init+0x94>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d9f0:	4b0e      	ldr	r3, [pc, #56]	; (800da2c <USBD_LL_Init+0x94>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d9f6:	480d      	ldr	r0, [pc, #52]	; (800da2c <USBD_LL_Init+0x94>)
 800d9f8:	f7f9 fe9c 	bl	8007734 <HAL_PCD_Init>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800da02:	f7f5 f8dd 	bl	8002bc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da06:	2180      	movs	r1, #128	; 0x80
 800da08:	4808      	ldr	r0, [pc, #32]	; (800da2c <USBD_LL_Init+0x94>)
 800da0a:	f7fb f8dc 	bl	8008bc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da0e:	2240      	movs	r2, #64	; 0x40
 800da10:	2100      	movs	r1, #0
 800da12:	4806      	ldr	r0, [pc, #24]	; (800da2c <USBD_LL_Init+0x94>)
 800da14:	f7fb f890 	bl	8008b38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da18:	2280      	movs	r2, #128	; 0x80
 800da1a:	2101      	movs	r1, #1
 800da1c:	4803      	ldr	r0, [pc, #12]	; (800da2c <USBD_LL_Init+0x94>)
 800da1e:	f7fb f88b 	bl	8008b38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	20000d84 	.word	0x20000d84

0800da30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da38:	2300      	movs	r3, #0
 800da3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da46:	4618      	mov	r0, r3
 800da48:	f7f9 ff91 	bl	800796e <HAL_PCD_Start>
 800da4c:	4603      	mov	r3, r0
 800da4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da50:	7bfb      	ldrb	r3, [r7, #15]
 800da52:	4618      	mov	r0, r3
 800da54:	f000 f930 	bl	800dcb8 <USBD_Get_USB_Status>
 800da58:	4603      	mov	r3, r0
 800da5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b084      	sub	sp, #16
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
 800da6e:	4608      	mov	r0, r1
 800da70:	4611      	mov	r1, r2
 800da72:	461a      	mov	r2, r3
 800da74:	4603      	mov	r3, r0
 800da76:	70fb      	strb	r3, [r7, #3]
 800da78:	460b      	mov	r3, r1
 800da7a:	70bb      	strb	r3, [r7, #2]
 800da7c:	4613      	mov	r3, r2
 800da7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da8e:	78bb      	ldrb	r3, [r7, #2]
 800da90:	883a      	ldrh	r2, [r7, #0]
 800da92:	78f9      	ldrb	r1, [r7, #3]
 800da94:	f7fa fc62 	bl	800835c <HAL_PCD_EP_Open>
 800da98:	4603      	mov	r3, r0
 800da9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f90a 	bl	800dcb8 <USBD_Get_USB_Status>
 800daa4:	4603      	mov	r3, r0
 800daa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	460b      	mov	r3, r1
 800dabc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dacc:	78fa      	ldrb	r2, [r7, #3]
 800dace:	4611      	mov	r1, r2
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fa fcab 	bl	800842c <HAL_PCD_EP_Close>
 800dad6:	4603      	mov	r3, r0
 800dad8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dada:	7bfb      	ldrb	r3, [r7, #15]
 800dadc:	4618      	mov	r0, r3
 800dade:	f000 f8eb 	bl	800dcb8 <USBD_Get_USB_Status>
 800dae2:	4603      	mov	r3, r0
 800dae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dae6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	460b      	mov	r3, r1
 800dafa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db0a:	78fa      	ldrb	r2, [r7, #3]
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fa fd6b 	bl	80085ea <HAL_PCD_EP_SetStall>
 800db14:	4603      	mov	r3, r0
 800db16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db18:	7bfb      	ldrb	r3, [r7, #15]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f000 f8cc 	bl	800dcb8 <USBD_Get_USB_Status>
 800db20:	4603      	mov	r3, r0
 800db22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db24:	7bbb      	ldrb	r3, [r7, #14]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
 800db36:	460b      	mov	r3, r1
 800db38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db48:	78fa      	ldrb	r2, [r7, #3]
 800db4a:	4611      	mov	r1, r2
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fa fdb0 	bl	80086b2 <HAL_PCD_EP_ClrStall>
 800db52:	4603      	mov	r3, r0
 800db54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db56:	7bfb      	ldrb	r3, [r7, #15]
 800db58:	4618      	mov	r0, r3
 800db5a:	f000 f8ad 	bl	800dcb8 <USBD_Get_USB_Status>
 800db5e:	4603      	mov	r3, r0
 800db60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db62:	7bbb      	ldrb	r3, [r7, #14]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	460b      	mov	r3, r1
 800db76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db84:	2b00      	cmp	r3, #0
 800db86:	da0b      	bge.n	800dba0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db88:	78fb      	ldrb	r3, [r7, #3]
 800db8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db8e:	68f9      	ldr	r1, [r7, #12]
 800db90:	4613      	mov	r3, r2
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	4413      	add	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	440b      	add	r3, r1
 800db9a:	333e      	adds	r3, #62	; 0x3e
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	e00b      	b.n	800dbb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dba0:	78fb      	ldrb	r3, [r7, #3]
 800dba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dba6:	68f9      	ldr	r1, [r7, #12]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	00db      	lsls	r3, r3, #3
 800dbac:	4413      	add	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	440b      	add	r3, r1
 800dbb2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800dbb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbde:	78fa      	ldrb	r2, [r7, #3]
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fa fb95 	bl	8008312 <HAL_PCD_SetAddress>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbec:	7bfb      	ldrb	r3, [r7, #15]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 f862 	bl	800dcb8 <USBD_Get_USB_Status>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b086      	sub	sp, #24
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	607a      	str	r2, [r7, #4]
 800dc0c:	603b      	str	r3, [r7, #0]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dc20:	7af9      	ldrb	r1, [r7, #11]
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	f7fa fc96 	bl	8008556 <HAL_PCD_EP_Transmit>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 f841 	bl	800dcb8 <USBD_Get_USB_Status>
 800dc36:	4603      	mov	r3, r0
 800dc38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3718      	adds	r7, #24
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	607a      	str	r2, [r7, #4]
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	460b      	mov	r3, r1
 800dc52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc54:	2300      	movs	r3, #0
 800dc56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dc62:	7af9      	ldrb	r1, [r7, #11]
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	f7fa fc2a 	bl	80084c0 <HAL_PCD_EP_Receive>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc70:	7dfb      	ldrb	r3, [r7, #23]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 f820 	bl	800dcb8 <USBD_Get_USB_Status>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc7c:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
	...

0800dc88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc90:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <USBD_static_malloc+0x18>)
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	20001290 	.word	0x20001290

0800dca4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]

}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcc6:	79fb      	ldrb	r3, [r7, #7]
 800dcc8:	2b03      	cmp	r3, #3
 800dcca:	d817      	bhi.n	800dcfc <USBD_Get_USB_Status+0x44>
 800dccc:	a201      	add	r2, pc, #4	; (adr r2, 800dcd4 <USBD_Get_USB_Status+0x1c>)
 800dcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd2:	bf00      	nop
 800dcd4:	0800dce5 	.word	0x0800dce5
 800dcd8:	0800dceb 	.word	0x0800dceb
 800dcdc:	0800dcf1 	.word	0x0800dcf1
 800dce0:	0800dcf7 	.word	0x0800dcf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	73fb      	strb	r3, [r7, #15]
    break;
 800dce8:	e00b      	b.n	800dd02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcea:	2303      	movs	r3, #3
 800dcec:	73fb      	strb	r3, [r7, #15]
    break;
 800dcee:	e008      	b.n	800dd02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf4:	e005      	b.n	800dd02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcfa:	e002      	b.n	800dd02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dcfc:	2303      	movs	r3, #3
 800dcfe:	73fb      	strb	r3, [r7, #15]
    break;
 800dd00:	bf00      	nop
  }
  return usb_status;
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <siprintf>:
 800dd10:	b40e      	push	{r1, r2, r3}
 800dd12:	b500      	push	{lr}
 800dd14:	b09c      	sub	sp, #112	; 0x70
 800dd16:	ab1d      	add	r3, sp, #116	; 0x74
 800dd18:	9002      	str	r0, [sp, #8]
 800dd1a:	9006      	str	r0, [sp, #24]
 800dd1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd20:	4809      	ldr	r0, [pc, #36]	; (800dd48 <siprintf+0x38>)
 800dd22:	9107      	str	r1, [sp, #28]
 800dd24:	9104      	str	r1, [sp, #16]
 800dd26:	4909      	ldr	r1, [pc, #36]	; (800dd4c <siprintf+0x3c>)
 800dd28:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd2c:	9105      	str	r1, [sp, #20]
 800dd2e:	6800      	ldr	r0, [r0, #0]
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	a902      	add	r1, sp, #8
 800dd34:	f000 f992 	bl	800e05c <_svfiprintf_r>
 800dd38:	9b02      	ldr	r3, [sp, #8]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	701a      	strb	r2, [r3, #0]
 800dd3e:	b01c      	add	sp, #112	; 0x70
 800dd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd44:	b003      	add	sp, #12
 800dd46:	4770      	bx	lr
 800dd48:	200001e8 	.word	0x200001e8
 800dd4c:	ffff0208 	.word	0xffff0208

0800dd50 <memset>:
 800dd50:	4402      	add	r2, r0
 800dd52:	4603      	mov	r3, r0
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d100      	bne.n	800dd5a <memset+0xa>
 800dd58:	4770      	bx	lr
 800dd5a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd5e:	e7f9      	b.n	800dd54 <memset+0x4>

0800dd60 <__errno>:
 800dd60:	4b01      	ldr	r3, [pc, #4]	; (800dd68 <__errno+0x8>)
 800dd62:	6818      	ldr	r0, [r3, #0]
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	200001e8 	.word	0x200001e8

0800dd6c <__libc_init_array>:
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	4d0d      	ldr	r5, [pc, #52]	; (800dda4 <__libc_init_array+0x38>)
 800dd70:	4c0d      	ldr	r4, [pc, #52]	; (800dda8 <__libc_init_array+0x3c>)
 800dd72:	1b64      	subs	r4, r4, r5
 800dd74:	10a4      	asrs	r4, r4, #2
 800dd76:	2600      	movs	r6, #0
 800dd78:	42a6      	cmp	r6, r4
 800dd7a:	d109      	bne.n	800dd90 <__libc_init_array+0x24>
 800dd7c:	4d0b      	ldr	r5, [pc, #44]	; (800ddac <__libc_init_array+0x40>)
 800dd7e:	4c0c      	ldr	r4, [pc, #48]	; (800ddb0 <__libc_init_array+0x44>)
 800dd80:	f000 fc6a 	bl	800e658 <_init>
 800dd84:	1b64      	subs	r4, r4, r5
 800dd86:	10a4      	asrs	r4, r4, #2
 800dd88:	2600      	movs	r6, #0
 800dd8a:	42a6      	cmp	r6, r4
 800dd8c:	d105      	bne.n	800dd9a <__libc_init_array+0x2e>
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd94:	4798      	blx	r3
 800dd96:	3601      	adds	r6, #1
 800dd98:	e7ee      	b.n	800dd78 <__libc_init_array+0xc>
 800dd9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd9e:	4798      	blx	r3
 800dda0:	3601      	adds	r6, #1
 800dda2:	e7f2      	b.n	800dd8a <__libc_init_array+0x1e>
 800dda4:	0800f15c 	.word	0x0800f15c
 800dda8:	0800f15c 	.word	0x0800f15c
 800ddac:	0800f15c 	.word	0x0800f15c
 800ddb0:	0800f160 	.word	0x0800f160

0800ddb4 <__retarget_lock_acquire_recursive>:
 800ddb4:	4770      	bx	lr

0800ddb6 <__retarget_lock_release_recursive>:
 800ddb6:	4770      	bx	lr

0800ddb8 <_free_r>:
 800ddb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddba:	2900      	cmp	r1, #0
 800ddbc:	d044      	beq.n	800de48 <_free_r+0x90>
 800ddbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddc2:	9001      	str	r0, [sp, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f1a1 0404 	sub.w	r4, r1, #4
 800ddca:	bfb8      	it	lt
 800ddcc:	18e4      	addlt	r4, r4, r3
 800ddce:	f000 f8df 	bl	800df90 <__malloc_lock>
 800ddd2:	4a1e      	ldr	r2, [pc, #120]	; (800de4c <_free_r+0x94>)
 800ddd4:	9801      	ldr	r0, [sp, #4]
 800ddd6:	6813      	ldr	r3, [r2, #0]
 800ddd8:	b933      	cbnz	r3, 800dde8 <_free_r+0x30>
 800ddda:	6063      	str	r3, [r4, #4]
 800dddc:	6014      	str	r4, [r2, #0]
 800ddde:	b003      	add	sp, #12
 800dde0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dde4:	f000 b8da 	b.w	800df9c <__malloc_unlock>
 800dde8:	42a3      	cmp	r3, r4
 800ddea:	d908      	bls.n	800ddfe <_free_r+0x46>
 800ddec:	6825      	ldr	r5, [r4, #0]
 800ddee:	1961      	adds	r1, r4, r5
 800ddf0:	428b      	cmp	r3, r1
 800ddf2:	bf01      	itttt	eq
 800ddf4:	6819      	ldreq	r1, [r3, #0]
 800ddf6:	685b      	ldreq	r3, [r3, #4]
 800ddf8:	1949      	addeq	r1, r1, r5
 800ddfa:	6021      	streq	r1, [r4, #0]
 800ddfc:	e7ed      	b.n	800ddda <_free_r+0x22>
 800ddfe:	461a      	mov	r2, r3
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	b10b      	cbz	r3, 800de08 <_free_r+0x50>
 800de04:	42a3      	cmp	r3, r4
 800de06:	d9fa      	bls.n	800ddfe <_free_r+0x46>
 800de08:	6811      	ldr	r1, [r2, #0]
 800de0a:	1855      	adds	r5, r2, r1
 800de0c:	42a5      	cmp	r5, r4
 800de0e:	d10b      	bne.n	800de28 <_free_r+0x70>
 800de10:	6824      	ldr	r4, [r4, #0]
 800de12:	4421      	add	r1, r4
 800de14:	1854      	adds	r4, r2, r1
 800de16:	42a3      	cmp	r3, r4
 800de18:	6011      	str	r1, [r2, #0]
 800de1a:	d1e0      	bne.n	800ddde <_free_r+0x26>
 800de1c:	681c      	ldr	r4, [r3, #0]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	6053      	str	r3, [r2, #4]
 800de22:	440c      	add	r4, r1
 800de24:	6014      	str	r4, [r2, #0]
 800de26:	e7da      	b.n	800ddde <_free_r+0x26>
 800de28:	d902      	bls.n	800de30 <_free_r+0x78>
 800de2a:	230c      	movs	r3, #12
 800de2c:	6003      	str	r3, [r0, #0]
 800de2e:	e7d6      	b.n	800ddde <_free_r+0x26>
 800de30:	6825      	ldr	r5, [r4, #0]
 800de32:	1961      	adds	r1, r4, r5
 800de34:	428b      	cmp	r3, r1
 800de36:	bf04      	itt	eq
 800de38:	6819      	ldreq	r1, [r3, #0]
 800de3a:	685b      	ldreq	r3, [r3, #4]
 800de3c:	6063      	str	r3, [r4, #4]
 800de3e:	bf04      	itt	eq
 800de40:	1949      	addeq	r1, r1, r5
 800de42:	6021      	streq	r1, [r4, #0]
 800de44:	6054      	str	r4, [r2, #4]
 800de46:	e7ca      	b.n	800ddde <_free_r+0x26>
 800de48:	b003      	add	sp, #12
 800de4a:	bd30      	pop	{r4, r5, pc}
 800de4c:	200013e4 	.word	0x200013e4

0800de50 <sbrk_aligned>:
 800de50:	b570      	push	{r4, r5, r6, lr}
 800de52:	4e0e      	ldr	r6, [pc, #56]	; (800de8c <sbrk_aligned+0x3c>)
 800de54:	460c      	mov	r4, r1
 800de56:	6831      	ldr	r1, [r6, #0]
 800de58:	4605      	mov	r5, r0
 800de5a:	b911      	cbnz	r1, 800de62 <sbrk_aligned+0x12>
 800de5c:	f000 fba6 	bl	800e5ac <_sbrk_r>
 800de60:	6030      	str	r0, [r6, #0]
 800de62:	4621      	mov	r1, r4
 800de64:	4628      	mov	r0, r5
 800de66:	f000 fba1 	bl	800e5ac <_sbrk_r>
 800de6a:	1c43      	adds	r3, r0, #1
 800de6c:	d00a      	beq.n	800de84 <sbrk_aligned+0x34>
 800de6e:	1cc4      	adds	r4, r0, #3
 800de70:	f024 0403 	bic.w	r4, r4, #3
 800de74:	42a0      	cmp	r0, r4
 800de76:	d007      	beq.n	800de88 <sbrk_aligned+0x38>
 800de78:	1a21      	subs	r1, r4, r0
 800de7a:	4628      	mov	r0, r5
 800de7c:	f000 fb96 	bl	800e5ac <_sbrk_r>
 800de80:	3001      	adds	r0, #1
 800de82:	d101      	bne.n	800de88 <sbrk_aligned+0x38>
 800de84:	f04f 34ff 	mov.w	r4, #4294967295
 800de88:	4620      	mov	r0, r4
 800de8a:	bd70      	pop	{r4, r5, r6, pc}
 800de8c:	200013e8 	.word	0x200013e8

0800de90 <_malloc_r>:
 800de90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de94:	1ccd      	adds	r5, r1, #3
 800de96:	f025 0503 	bic.w	r5, r5, #3
 800de9a:	3508      	adds	r5, #8
 800de9c:	2d0c      	cmp	r5, #12
 800de9e:	bf38      	it	cc
 800dea0:	250c      	movcc	r5, #12
 800dea2:	2d00      	cmp	r5, #0
 800dea4:	4607      	mov	r7, r0
 800dea6:	db01      	blt.n	800deac <_malloc_r+0x1c>
 800dea8:	42a9      	cmp	r1, r5
 800deaa:	d905      	bls.n	800deb8 <_malloc_r+0x28>
 800deac:	230c      	movs	r3, #12
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	2600      	movs	r6, #0
 800deb2:	4630      	mov	r0, r6
 800deb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800df8c <_malloc_r+0xfc>
 800debc:	f000 f868 	bl	800df90 <__malloc_lock>
 800dec0:	f8d8 3000 	ldr.w	r3, [r8]
 800dec4:	461c      	mov	r4, r3
 800dec6:	bb5c      	cbnz	r4, 800df20 <_malloc_r+0x90>
 800dec8:	4629      	mov	r1, r5
 800deca:	4638      	mov	r0, r7
 800decc:	f7ff ffc0 	bl	800de50 <sbrk_aligned>
 800ded0:	1c43      	adds	r3, r0, #1
 800ded2:	4604      	mov	r4, r0
 800ded4:	d155      	bne.n	800df82 <_malloc_r+0xf2>
 800ded6:	f8d8 4000 	ldr.w	r4, [r8]
 800deda:	4626      	mov	r6, r4
 800dedc:	2e00      	cmp	r6, #0
 800dede:	d145      	bne.n	800df6c <_malloc_r+0xdc>
 800dee0:	2c00      	cmp	r4, #0
 800dee2:	d048      	beq.n	800df76 <_malloc_r+0xe6>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	4631      	mov	r1, r6
 800dee8:	4638      	mov	r0, r7
 800deea:	eb04 0903 	add.w	r9, r4, r3
 800deee:	f000 fb5d 	bl	800e5ac <_sbrk_r>
 800def2:	4581      	cmp	r9, r0
 800def4:	d13f      	bne.n	800df76 <_malloc_r+0xe6>
 800def6:	6821      	ldr	r1, [r4, #0]
 800def8:	1a6d      	subs	r5, r5, r1
 800defa:	4629      	mov	r1, r5
 800defc:	4638      	mov	r0, r7
 800defe:	f7ff ffa7 	bl	800de50 <sbrk_aligned>
 800df02:	3001      	adds	r0, #1
 800df04:	d037      	beq.n	800df76 <_malloc_r+0xe6>
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	442b      	add	r3, r5
 800df0a:	6023      	str	r3, [r4, #0]
 800df0c:	f8d8 3000 	ldr.w	r3, [r8]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d038      	beq.n	800df86 <_malloc_r+0xf6>
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	42a2      	cmp	r2, r4
 800df18:	d12b      	bne.n	800df72 <_malloc_r+0xe2>
 800df1a:	2200      	movs	r2, #0
 800df1c:	605a      	str	r2, [r3, #4]
 800df1e:	e00f      	b.n	800df40 <_malloc_r+0xb0>
 800df20:	6822      	ldr	r2, [r4, #0]
 800df22:	1b52      	subs	r2, r2, r5
 800df24:	d41f      	bmi.n	800df66 <_malloc_r+0xd6>
 800df26:	2a0b      	cmp	r2, #11
 800df28:	d917      	bls.n	800df5a <_malloc_r+0xca>
 800df2a:	1961      	adds	r1, r4, r5
 800df2c:	42a3      	cmp	r3, r4
 800df2e:	6025      	str	r5, [r4, #0]
 800df30:	bf18      	it	ne
 800df32:	6059      	strne	r1, [r3, #4]
 800df34:	6863      	ldr	r3, [r4, #4]
 800df36:	bf08      	it	eq
 800df38:	f8c8 1000 	streq.w	r1, [r8]
 800df3c:	5162      	str	r2, [r4, r5]
 800df3e:	604b      	str	r3, [r1, #4]
 800df40:	4638      	mov	r0, r7
 800df42:	f104 060b 	add.w	r6, r4, #11
 800df46:	f000 f829 	bl	800df9c <__malloc_unlock>
 800df4a:	f026 0607 	bic.w	r6, r6, #7
 800df4e:	1d23      	adds	r3, r4, #4
 800df50:	1af2      	subs	r2, r6, r3
 800df52:	d0ae      	beq.n	800deb2 <_malloc_r+0x22>
 800df54:	1b9b      	subs	r3, r3, r6
 800df56:	50a3      	str	r3, [r4, r2]
 800df58:	e7ab      	b.n	800deb2 <_malloc_r+0x22>
 800df5a:	42a3      	cmp	r3, r4
 800df5c:	6862      	ldr	r2, [r4, #4]
 800df5e:	d1dd      	bne.n	800df1c <_malloc_r+0x8c>
 800df60:	f8c8 2000 	str.w	r2, [r8]
 800df64:	e7ec      	b.n	800df40 <_malloc_r+0xb0>
 800df66:	4623      	mov	r3, r4
 800df68:	6864      	ldr	r4, [r4, #4]
 800df6a:	e7ac      	b.n	800dec6 <_malloc_r+0x36>
 800df6c:	4634      	mov	r4, r6
 800df6e:	6876      	ldr	r6, [r6, #4]
 800df70:	e7b4      	b.n	800dedc <_malloc_r+0x4c>
 800df72:	4613      	mov	r3, r2
 800df74:	e7cc      	b.n	800df10 <_malloc_r+0x80>
 800df76:	230c      	movs	r3, #12
 800df78:	603b      	str	r3, [r7, #0]
 800df7a:	4638      	mov	r0, r7
 800df7c:	f000 f80e 	bl	800df9c <__malloc_unlock>
 800df80:	e797      	b.n	800deb2 <_malloc_r+0x22>
 800df82:	6025      	str	r5, [r4, #0]
 800df84:	e7dc      	b.n	800df40 <_malloc_r+0xb0>
 800df86:	605b      	str	r3, [r3, #4]
 800df88:	deff      	udf	#255	; 0xff
 800df8a:	bf00      	nop
 800df8c:	200013e4 	.word	0x200013e4

0800df90 <__malloc_lock>:
 800df90:	4801      	ldr	r0, [pc, #4]	; (800df98 <__malloc_lock+0x8>)
 800df92:	f7ff bf0f 	b.w	800ddb4 <__retarget_lock_acquire_recursive>
 800df96:	bf00      	nop
 800df98:	200013e0 	.word	0x200013e0

0800df9c <__malloc_unlock>:
 800df9c:	4801      	ldr	r0, [pc, #4]	; (800dfa4 <__malloc_unlock+0x8>)
 800df9e:	f7ff bf0a 	b.w	800ddb6 <__retarget_lock_release_recursive>
 800dfa2:	bf00      	nop
 800dfa4:	200013e0 	.word	0x200013e0

0800dfa8 <__ssputs_r>:
 800dfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfac:	688e      	ldr	r6, [r1, #8]
 800dfae:	461f      	mov	r7, r3
 800dfb0:	42be      	cmp	r6, r7
 800dfb2:	680b      	ldr	r3, [r1, #0]
 800dfb4:	4682      	mov	sl, r0
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	4690      	mov	r8, r2
 800dfba:	d82c      	bhi.n	800e016 <__ssputs_r+0x6e>
 800dfbc:	898a      	ldrh	r2, [r1, #12]
 800dfbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfc2:	d026      	beq.n	800e012 <__ssputs_r+0x6a>
 800dfc4:	6965      	ldr	r5, [r4, #20]
 800dfc6:	6909      	ldr	r1, [r1, #16]
 800dfc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfcc:	eba3 0901 	sub.w	r9, r3, r1
 800dfd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfd4:	1c7b      	adds	r3, r7, #1
 800dfd6:	444b      	add	r3, r9
 800dfd8:	106d      	asrs	r5, r5, #1
 800dfda:	429d      	cmp	r5, r3
 800dfdc:	bf38      	it	cc
 800dfde:	461d      	movcc	r5, r3
 800dfe0:	0553      	lsls	r3, r2, #21
 800dfe2:	d527      	bpl.n	800e034 <__ssputs_r+0x8c>
 800dfe4:	4629      	mov	r1, r5
 800dfe6:	f7ff ff53 	bl	800de90 <_malloc_r>
 800dfea:	4606      	mov	r6, r0
 800dfec:	b360      	cbz	r0, 800e048 <__ssputs_r+0xa0>
 800dfee:	6921      	ldr	r1, [r4, #16]
 800dff0:	464a      	mov	r2, r9
 800dff2:	f000 faeb 	bl	800e5cc <memcpy>
 800dff6:	89a3      	ldrh	r3, [r4, #12]
 800dff8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	6126      	str	r6, [r4, #16]
 800e004:	6165      	str	r5, [r4, #20]
 800e006:	444e      	add	r6, r9
 800e008:	eba5 0509 	sub.w	r5, r5, r9
 800e00c:	6026      	str	r6, [r4, #0]
 800e00e:	60a5      	str	r5, [r4, #8]
 800e010:	463e      	mov	r6, r7
 800e012:	42be      	cmp	r6, r7
 800e014:	d900      	bls.n	800e018 <__ssputs_r+0x70>
 800e016:	463e      	mov	r6, r7
 800e018:	6820      	ldr	r0, [r4, #0]
 800e01a:	4632      	mov	r2, r6
 800e01c:	4641      	mov	r1, r8
 800e01e:	f000 faab 	bl	800e578 <memmove>
 800e022:	68a3      	ldr	r3, [r4, #8]
 800e024:	1b9b      	subs	r3, r3, r6
 800e026:	60a3      	str	r3, [r4, #8]
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	4433      	add	r3, r6
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	2000      	movs	r0, #0
 800e030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e034:	462a      	mov	r2, r5
 800e036:	f000 fad7 	bl	800e5e8 <_realloc_r>
 800e03a:	4606      	mov	r6, r0
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d1e0      	bne.n	800e002 <__ssputs_r+0x5a>
 800e040:	6921      	ldr	r1, [r4, #16]
 800e042:	4650      	mov	r0, sl
 800e044:	f7ff feb8 	bl	800ddb8 <_free_r>
 800e048:	230c      	movs	r3, #12
 800e04a:	f8ca 3000 	str.w	r3, [sl]
 800e04e:	89a3      	ldrh	r3, [r4, #12]
 800e050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e054:	81a3      	strh	r3, [r4, #12]
 800e056:	f04f 30ff 	mov.w	r0, #4294967295
 800e05a:	e7e9      	b.n	800e030 <__ssputs_r+0x88>

0800e05c <_svfiprintf_r>:
 800e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e060:	4698      	mov	r8, r3
 800e062:	898b      	ldrh	r3, [r1, #12]
 800e064:	061b      	lsls	r3, r3, #24
 800e066:	b09d      	sub	sp, #116	; 0x74
 800e068:	4607      	mov	r7, r0
 800e06a:	460d      	mov	r5, r1
 800e06c:	4614      	mov	r4, r2
 800e06e:	d50e      	bpl.n	800e08e <_svfiprintf_r+0x32>
 800e070:	690b      	ldr	r3, [r1, #16]
 800e072:	b963      	cbnz	r3, 800e08e <_svfiprintf_r+0x32>
 800e074:	2140      	movs	r1, #64	; 0x40
 800e076:	f7ff ff0b 	bl	800de90 <_malloc_r>
 800e07a:	6028      	str	r0, [r5, #0]
 800e07c:	6128      	str	r0, [r5, #16]
 800e07e:	b920      	cbnz	r0, 800e08a <_svfiprintf_r+0x2e>
 800e080:	230c      	movs	r3, #12
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	f04f 30ff 	mov.w	r0, #4294967295
 800e088:	e0d0      	b.n	800e22c <_svfiprintf_r+0x1d0>
 800e08a:	2340      	movs	r3, #64	; 0x40
 800e08c:	616b      	str	r3, [r5, #20]
 800e08e:	2300      	movs	r3, #0
 800e090:	9309      	str	r3, [sp, #36]	; 0x24
 800e092:	2320      	movs	r3, #32
 800e094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e098:	f8cd 800c 	str.w	r8, [sp, #12]
 800e09c:	2330      	movs	r3, #48	; 0x30
 800e09e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e244 <_svfiprintf_r+0x1e8>
 800e0a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0a6:	f04f 0901 	mov.w	r9, #1
 800e0aa:	4623      	mov	r3, r4
 800e0ac:	469a      	mov	sl, r3
 800e0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0b2:	b10a      	cbz	r2, 800e0b8 <_svfiprintf_r+0x5c>
 800e0b4:	2a25      	cmp	r2, #37	; 0x25
 800e0b6:	d1f9      	bne.n	800e0ac <_svfiprintf_r+0x50>
 800e0b8:	ebba 0b04 	subs.w	fp, sl, r4
 800e0bc:	d00b      	beq.n	800e0d6 <_svfiprintf_r+0x7a>
 800e0be:	465b      	mov	r3, fp
 800e0c0:	4622      	mov	r2, r4
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	f7ff ff6f 	bl	800dfa8 <__ssputs_r>
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	f000 80a9 	beq.w	800e222 <_svfiprintf_r+0x1c6>
 800e0d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0d2:	445a      	add	r2, fp
 800e0d4:	9209      	str	r2, [sp, #36]	; 0x24
 800e0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f000 80a1 	beq.w	800e222 <_svfiprintf_r+0x1c6>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0ea:	f10a 0a01 	add.w	sl, sl, #1
 800e0ee:	9304      	str	r3, [sp, #16]
 800e0f0:	9307      	str	r3, [sp, #28]
 800e0f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0f6:	931a      	str	r3, [sp, #104]	; 0x68
 800e0f8:	4654      	mov	r4, sl
 800e0fa:	2205      	movs	r2, #5
 800e0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e100:	4850      	ldr	r0, [pc, #320]	; (800e244 <_svfiprintf_r+0x1e8>)
 800e102:	f7f2 f86d 	bl	80001e0 <memchr>
 800e106:	9a04      	ldr	r2, [sp, #16]
 800e108:	b9d8      	cbnz	r0, 800e142 <_svfiprintf_r+0xe6>
 800e10a:	06d0      	lsls	r0, r2, #27
 800e10c:	bf44      	itt	mi
 800e10e:	2320      	movmi	r3, #32
 800e110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e114:	0711      	lsls	r1, r2, #28
 800e116:	bf44      	itt	mi
 800e118:	232b      	movmi	r3, #43	; 0x2b
 800e11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e11e:	f89a 3000 	ldrb.w	r3, [sl]
 800e122:	2b2a      	cmp	r3, #42	; 0x2a
 800e124:	d015      	beq.n	800e152 <_svfiprintf_r+0xf6>
 800e126:	9a07      	ldr	r2, [sp, #28]
 800e128:	4654      	mov	r4, sl
 800e12a:	2000      	movs	r0, #0
 800e12c:	f04f 0c0a 	mov.w	ip, #10
 800e130:	4621      	mov	r1, r4
 800e132:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e136:	3b30      	subs	r3, #48	; 0x30
 800e138:	2b09      	cmp	r3, #9
 800e13a:	d94d      	bls.n	800e1d8 <_svfiprintf_r+0x17c>
 800e13c:	b1b0      	cbz	r0, 800e16c <_svfiprintf_r+0x110>
 800e13e:	9207      	str	r2, [sp, #28]
 800e140:	e014      	b.n	800e16c <_svfiprintf_r+0x110>
 800e142:	eba0 0308 	sub.w	r3, r0, r8
 800e146:	fa09 f303 	lsl.w	r3, r9, r3
 800e14a:	4313      	orrs	r3, r2
 800e14c:	9304      	str	r3, [sp, #16]
 800e14e:	46a2      	mov	sl, r4
 800e150:	e7d2      	b.n	800e0f8 <_svfiprintf_r+0x9c>
 800e152:	9b03      	ldr	r3, [sp, #12]
 800e154:	1d19      	adds	r1, r3, #4
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	9103      	str	r1, [sp, #12]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	bfbb      	ittet	lt
 800e15e:	425b      	neglt	r3, r3
 800e160:	f042 0202 	orrlt.w	r2, r2, #2
 800e164:	9307      	strge	r3, [sp, #28]
 800e166:	9307      	strlt	r3, [sp, #28]
 800e168:	bfb8      	it	lt
 800e16a:	9204      	strlt	r2, [sp, #16]
 800e16c:	7823      	ldrb	r3, [r4, #0]
 800e16e:	2b2e      	cmp	r3, #46	; 0x2e
 800e170:	d10c      	bne.n	800e18c <_svfiprintf_r+0x130>
 800e172:	7863      	ldrb	r3, [r4, #1]
 800e174:	2b2a      	cmp	r3, #42	; 0x2a
 800e176:	d134      	bne.n	800e1e2 <_svfiprintf_r+0x186>
 800e178:	9b03      	ldr	r3, [sp, #12]
 800e17a:	1d1a      	adds	r2, r3, #4
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	9203      	str	r2, [sp, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	bfb8      	it	lt
 800e184:	f04f 33ff 	movlt.w	r3, #4294967295
 800e188:	3402      	adds	r4, #2
 800e18a:	9305      	str	r3, [sp, #20]
 800e18c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e254 <_svfiprintf_r+0x1f8>
 800e190:	7821      	ldrb	r1, [r4, #0]
 800e192:	2203      	movs	r2, #3
 800e194:	4650      	mov	r0, sl
 800e196:	f7f2 f823 	bl	80001e0 <memchr>
 800e19a:	b138      	cbz	r0, 800e1ac <_svfiprintf_r+0x150>
 800e19c:	9b04      	ldr	r3, [sp, #16]
 800e19e:	eba0 000a 	sub.w	r0, r0, sl
 800e1a2:	2240      	movs	r2, #64	; 0x40
 800e1a4:	4082      	lsls	r2, r0
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	3401      	adds	r4, #1
 800e1aa:	9304      	str	r3, [sp, #16]
 800e1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1b0:	4825      	ldr	r0, [pc, #148]	; (800e248 <_svfiprintf_r+0x1ec>)
 800e1b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1b6:	2206      	movs	r2, #6
 800e1b8:	f7f2 f812 	bl	80001e0 <memchr>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d038      	beq.n	800e232 <_svfiprintf_r+0x1d6>
 800e1c0:	4b22      	ldr	r3, [pc, #136]	; (800e24c <_svfiprintf_r+0x1f0>)
 800e1c2:	bb1b      	cbnz	r3, 800e20c <_svfiprintf_r+0x1b0>
 800e1c4:	9b03      	ldr	r3, [sp, #12]
 800e1c6:	3307      	adds	r3, #7
 800e1c8:	f023 0307 	bic.w	r3, r3, #7
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	9303      	str	r3, [sp, #12]
 800e1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d2:	4433      	add	r3, r6
 800e1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e1d6:	e768      	b.n	800e0aa <_svfiprintf_r+0x4e>
 800e1d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1dc:	460c      	mov	r4, r1
 800e1de:	2001      	movs	r0, #1
 800e1e0:	e7a6      	b.n	800e130 <_svfiprintf_r+0xd4>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	3401      	adds	r4, #1
 800e1e6:	9305      	str	r3, [sp, #20]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	f04f 0c0a 	mov.w	ip, #10
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1f4:	3a30      	subs	r2, #48	; 0x30
 800e1f6:	2a09      	cmp	r2, #9
 800e1f8:	d903      	bls.n	800e202 <_svfiprintf_r+0x1a6>
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d0c6      	beq.n	800e18c <_svfiprintf_r+0x130>
 800e1fe:	9105      	str	r1, [sp, #20]
 800e200:	e7c4      	b.n	800e18c <_svfiprintf_r+0x130>
 800e202:	fb0c 2101 	mla	r1, ip, r1, r2
 800e206:	4604      	mov	r4, r0
 800e208:	2301      	movs	r3, #1
 800e20a:	e7f0      	b.n	800e1ee <_svfiprintf_r+0x192>
 800e20c:	ab03      	add	r3, sp, #12
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	462a      	mov	r2, r5
 800e212:	4b0f      	ldr	r3, [pc, #60]	; (800e250 <_svfiprintf_r+0x1f4>)
 800e214:	a904      	add	r1, sp, #16
 800e216:	4638      	mov	r0, r7
 800e218:	f3af 8000 	nop.w
 800e21c:	1c42      	adds	r2, r0, #1
 800e21e:	4606      	mov	r6, r0
 800e220:	d1d6      	bne.n	800e1d0 <_svfiprintf_r+0x174>
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	065b      	lsls	r3, r3, #25
 800e226:	f53f af2d 	bmi.w	800e084 <_svfiprintf_r+0x28>
 800e22a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e22c:	b01d      	add	sp, #116	; 0x74
 800e22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e232:	ab03      	add	r3, sp, #12
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	462a      	mov	r2, r5
 800e238:	4b05      	ldr	r3, [pc, #20]	; (800e250 <_svfiprintf_r+0x1f4>)
 800e23a:	a904      	add	r1, sp, #16
 800e23c:	4638      	mov	r0, r7
 800e23e:	f000 f879 	bl	800e334 <_printf_i>
 800e242:	e7eb      	b.n	800e21c <_svfiprintf_r+0x1c0>
 800e244:	0800f120 	.word	0x0800f120
 800e248:	0800f12a 	.word	0x0800f12a
 800e24c:	00000000 	.word	0x00000000
 800e250:	0800dfa9 	.word	0x0800dfa9
 800e254:	0800f126 	.word	0x0800f126

0800e258 <_printf_common>:
 800e258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e25c:	4616      	mov	r6, r2
 800e25e:	4699      	mov	r9, r3
 800e260:	688a      	ldr	r2, [r1, #8]
 800e262:	690b      	ldr	r3, [r1, #16]
 800e264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e268:	4293      	cmp	r3, r2
 800e26a:	bfb8      	it	lt
 800e26c:	4613      	movlt	r3, r2
 800e26e:	6033      	str	r3, [r6, #0]
 800e270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e274:	4607      	mov	r7, r0
 800e276:	460c      	mov	r4, r1
 800e278:	b10a      	cbz	r2, 800e27e <_printf_common+0x26>
 800e27a:	3301      	adds	r3, #1
 800e27c:	6033      	str	r3, [r6, #0]
 800e27e:	6823      	ldr	r3, [r4, #0]
 800e280:	0699      	lsls	r1, r3, #26
 800e282:	bf42      	ittt	mi
 800e284:	6833      	ldrmi	r3, [r6, #0]
 800e286:	3302      	addmi	r3, #2
 800e288:	6033      	strmi	r3, [r6, #0]
 800e28a:	6825      	ldr	r5, [r4, #0]
 800e28c:	f015 0506 	ands.w	r5, r5, #6
 800e290:	d106      	bne.n	800e2a0 <_printf_common+0x48>
 800e292:	f104 0a19 	add.w	sl, r4, #25
 800e296:	68e3      	ldr	r3, [r4, #12]
 800e298:	6832      	ldr	r2, [r6, #0]
 800e29a:	1a9b      	subs	r3, r3, r2
 800e29c:	42ab      	cmp	r3, r5
 800e29e:	dc26      	bgt.n	800e2ee <_printf_common+0x96>
 800e2a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2a4:	1e13      	subs	r3, r2, #0
 800e2a6:	6822      	ldr	r2, [r4, #0]
 800e2a8:	bf18      	it	ne
 800e2aa:	2301      	movne	r3, #1
 800e2ac:	0692      	lsls	r2, r2, #26
 800e2ae:	d42b      	bmi.n	800e308 <_printf_common+0xb0>
 800e2b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2b4:	4649      	mov	r1, r9
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	47c0      	blx	r8
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	d01e      	beq.n	800e2fc <_printf_common+0xa4>
 800e2be:	6823      	ldr	r3, [r4, #0]
 800e2c0:	6922      	ldr	r2, [r4, #16]
 800e2c2:	f003 0306 	and.w	r3, r3, #6
 800e2c6:	2b04      	cmp	r3, #4
 800e2c8:	bf02      	ittt	eq
 800e2ca:	68e5      	ldreq	r5, [r4, #12]
 800e2cc:	6833      	ldreq	r3, [r6, #0]
 800e2ce:	1aed      	subeq	r5, r5, r3
 800e2d0:	68a3      	ldr	r3, [r4, #8]
 800e2d2:	bf0c      	ite	eq
 800e2d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2d8:	2500      	movne	r5, #0
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	bfc4      	itt	gt
 800e2de:	1a9b      	subgt	r3, r3, r2
 800e2e0:	18ed      	addgt	r5, r5, r3
 800e2e2:	2600      	movs	r6, #0
 800e2e4:	341a      	adds	r4, #26
 800e2e6:	42b5      	cmp	r5, r6
 800e2e8:	d11a      	bne.n	800e320 <_printf_common+0xc8>
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	e008      	b.n	800e300 <_printf_common+0xa8>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	4652      	mov	r2, sl
 800e2f2:	4649      	mov	r1, r9
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	47c0      	blx	r8
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	d103      	bne.n	800e304 <_printf_common+0xac>
 800e2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e304:	3501      	adds	r5, #1
 800e306:	e7c6      	b.n	800e296 <_printf_common+0x3e>
 800e308:	18e1      	adds	r1, r4, r3
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	2030      	movs	r0, #48	; 0x30
 800e30e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e312:	4422      	add	r2, r4
 800e314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e31c:	3302      	adds	r3, #2
 800e31e:	e7c7      	b.n	800e2b0 <_printf_common+0x58>
 800e320:	2301      	movs	r3, #1
 800e322:	4622      	mov	r2, r4
 800e324:	4649      	mov	r1, r9
 800e326:	4638      	mov	r0, r7
 800e328:	47c0      	blx	r8
 800e32a:	3001      	adds	r0, #1
 800e32c:	d0e6      	beq.n	800e2fc <_printf_common+0xa4>
 800e32e:	3601      	adds	r6, #1
 800e330:	e7d9      	b.n	800e2e6 <_printf_common+0x8e>
	...

0800e334 <_printf_i>:
 800e334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e338:	7e0f      	ldrb	r7, [r1, #24]
 800e33a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e33c:	2f78      	cmp	r7, #120	; 0x78
 800e33e:	4691      	mov	r9, r2
 800e340:	4680      	mov	r8, r0
 800e342:	460c      	mov	r4, r1
 800e344:	469a      	mov	sl, r3
 800e346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e34a:	d807      	bhi.n	800e35c <_printf_i+0x28>
 800e34c:	2f62      	cmp	r7, #98	; 0x62
 800e34e:	d80a      	bhi.n	800e366 <_printf_i+0x32>
 800e350:	2f00      	cmp	r7, #0
 800e352:	f000 80d4 	beq.w	800e4fe <_printf_i+0x1ca>
 800e356:	2f58      	cmp	r7, #88	; 0x58
 800e358:	f000 80c0 	beq.w	800e4dc <_printf_i+0x1a8>
 800e35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e364:	e03a      	b.n	800e3dc <_printf_i+0xa8>
 800e366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e36a:	2b15      	cmp	r3, #21
 800e36c:	d8f6      	bhi.n	800e35c <_printf_i+0x28>
 800e36e:	a101      	add	r1, pc, #4	; (adr r1, 800e374 <_printf_i+0x40>)
 800e370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e374:	0800e3cd 	.word	0x0800e3cd
 800e378:	0800e3e1 	.word	0x0800e3e1
 800e37c:	0800e35d 	.word	0x0800e35d
 800e380:	0800e35d 	.word	0x0800e35d
 800e384:	0800e35d 	.word	0x0800e35d
 800e388:	0800e35d 	.word	0x0800e35d
 800e38c:	0800e3e1 	.word	0x0800e3e1
 800e390:	0800e35d 	.word	0x0800e35d
 800e394:	0800e35d 	.word	0x0800e35d
 800e398:	0800e35d 	.word	0x0800e35d
 800e39c:	0800e35d 	.word	0x0800e35d
 800e3a0:	0800e4e5 	.word	0x0800e4e5
 800e3a4:	0800e40d 	.word	0x0800e40d
 800e3a8:	0800e49f 	.word	0x0800e49f
 800e3ac:	0800e35d 	.word	0x0800e35d
 800e3b0:	0800e35d 	.word	0x0800e35d
 800e3b4:	0800e507 	.word	0x0800e507
 800e3b8:	0800e35d 	.word	0x0800e35d
 800e3bc:	0800e40d 	.word	0x0800e40d
 800e3c0:	0800e35d 	.word	0x0800e35d
 800e3c4:	0800e35d 	.word	0x0800e35d
 800e3c8:	0800e4a7 	.word	0x0800e4a7
 800e3cc:	682b      	ldr	r3, [r5, #0]
 800e3ce:	1d1a      	adds	r2, r3, #4
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	602a      	str	r2, [r5, #0]
 800e3d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e09f      	b.n	800e520 <_printf_i+0x1ec>
 800e3e0:	6820      	ldr	r0, [r4, #0]
 800e3e2:	682b      	ldr	r3, [r5, #0]
 800e3e4:	0607      	lsls	r7, r0, #24
 800e3e6:	f103 0104 	add.w	r1, r3, #4
 800e3ea:	6029      	str	r1, [r5, #0]
 800e3ec:	d501      	bpl.n	800e3f2 <_printf_i+0xbe>
 800e3ee:	681e      	ldr	r6, [r3, #0]
 800e3f0:	e003      	b.n	800e3fa <_printf_i+0xc6>
 800e3f2:	0646      	lsls	r6, r0, #25
 800e3f4:	d5fb      	bpl.n	800e3ee <_printf_i+0xba>
 800e3f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e3fa:	2e00      	cmp	r6, #0
 800e3fc:	da03      	bge.n	800e406 <_printf_i+0xd2>
 800e3fe:	232d      	movs	r3, #45	; 0x2d
 800e400:	4276      	negs	r6, r6
 800e402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e406:	485a      	ldr	r0, [pc, #360]	; (800e570 <_printf_i+0x23c>)
 800e408:	230a      	movs	r3, #10
 800e40a:	e012      	b.n	800e432 <_printf_i+0xfe>
 800e40c:	682b      	ldr	r3, [r5, #0]
 800e40e:	6820      	ldr	r0, [r4, #0]
 800e410:	1d19      	adds	r1, r3, #4
 800e412:	6029      	str	r1, [r5, #0]
 800e414:	0605      	lsls	r5, r0, #24
 800e416:	d501      	bpl.n	800e41c <_printf_i+0xe8>
 800e418:	681e      	ldr	r6, [r3, #0]
 800e41a:	e002      	b.n	800e422 <_printf_i+0xee>
 800e41c:	0641      	lsls	r1, r0, #25
 800e41e:	d5fb      	bpl.n	800e418 <_printf_i+0xe4>
 800e420:	881e      	ldrh	r6, [r3, #0]
 800e422:	4853      	ldr	r0, [pc, #332]	; (800e570 <_printf_i+0x23c>)
 800e424:	2f6f      	cmp	r7, #111	; 0x6f
 800e426:	bf0c      	ite	eq
 800e428:	2308      	moveq	r3, #8
 800e42a:	230a      	movne	r3, #10
 800e42c:	2100      	movs	r1, #0
 800e42e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e432:	6865      	ldr	r5, [r4, #4]
 800e434:	60a5      	str	r5, [r4, #8]
 800e436:	2d00      	cmp	r5, #0
 800e438:	bfa2      	ittt	ge
 800e43a:	6821      	ldrge	r1, [r4, #0]
 800e43c:	f021 0104 	bicge.w	r1, r1, #4
 800e440:	6021      	strge	r1, [r4, #0]
 800e442:	b90e      	cbnz	r6, 800e448 <_printf_i+0x114>
 800e444:	2d00      	cmp	r5, #0
 800e446:	d04b      	beq.n	800e4e0 <_printf_i+0x1ac>
 800e448:	4615      	mov	r5, r2
 800e44a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e44e:	fb03 6711 	mls	r7, r3, r1, r6
 800e452:	5dc7      	ldrb	r7, [r0, r7]
 800e454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e458:	4637      	mov	r7, r6
 800e45a:	42bb      	cmp	r3, r7
 800e45c:	460e      	mov	r6, r1
 800e45e:	d9f4      	bls.n	800e44a <_printf_i+0x116>
 800e460:	2b08      	cmp	r3, #8
 800e462:	d10b      	bne.n	800e47c <_printf_i+0x148>
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	07de      	lsls	r6, r3, #31
 800e468:	d508      	bpl.n	800e47c <_printf_i+0x148>
 800e46a:	6923      	ldr	r3, [r4, #16]
 800e46c:	6861      	ldr	r1, [r4, #4]
 800e46e:	4299      	cmp	r1, r3
 800e470:	bfde      	ittt	le
 800e472:	2330      	movle	r3, #48	; 0x30
 800e474:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e478:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e47c:	1b52      	subs	r2, r2, r5
 800e47e:	6122      	str	r2, [r4, #16]
 800e480:	f8cd a000 	str.w	sl, [sp]
 800e484:	464b      	mov	r3, r9
 800e486:	aa03      	add	r2, sp, #12
 800e488:	4621      	mov	r1, r4
 800e48a:	4640      	mov	r0, r8
 800e48c:	f7ff fee4 	bl	800e258 <_printf_common>
 800e490:	3001      	adds	r0, #1
 800e492:	d14a      	bne.n	800e52a <_printf_i+0x1f6>
 800e494:	f04f 30ff 	mov.w	r0, #4294967295
 800e498:	b004      	add	sp, #16
 800e49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	f043 0320 	orr.w	r3, r3, #32
 800e4a4:	6023      	str	r3, [r4, #0]
 800e4a6:	4833      	ldr	r0, [pc, #204]	; (800e574 <_printf_i+0x240>)
 800e4a8:	2778      	movs	r7, #120	; 0x78
 800e4aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	6829      	ldr	r1, [r5, #0]
 800e4b2:	061f      	lsls	r7, r3, #24
 800e4b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e4b8:	d402      	bmi.n	800e4c0 <_printf_i+0x18c>
 800e4ba:	065f      	lsls	r7, r3, #25
 800e4bc:	bf48      	it	mi
 800e4be:	b2b6      	uxthmi	r6, r6
 800e4c0:	07df      	lsls	r7, r3, #31
 800e4c2:	bf48      	it	mi
 800e4c4:	f043 0320 	orrmi.w	r3, r3, #32
 800e4c8:	6029      	str	r1, [r5, #0]
 800e4ca:	bf48      	it	mi
 800e4cc:	6023      	strmi	r3, [r4, #0]
 800e4ce:	b91e      	cbnz	r6, 800e4d8 <_printf_i+0x1a4>
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	f023 0320 	bic.w	r3, r3, #32
 800e4d6:	6023      	str	r3, [r4, #0]
 800e4d8:	2310      	movs	r3, #16
 800e4da:	e7a7      	b.n	800e42c <_printf_i+0xf8>
 800e4dc:	4824      	ldr	r0, [pc, #144]	; (800e570 <_printf_i+0x23c>)
 800e4de:	e7e4      	b.n	800e4aa <_printf_i+0x176>
 800e4e0:	4615      	mov	r5, r2
 800e4e2:	e7bd      	b.n	800e460 <_printf_i+0x12c>
 800e4e4:	682b      	ldr	r3, [r5, #0]
 800e4e6:	6826      	ldr	r6, [r4, #0]
 800e4e8:	6961      	ldr	r1, [r4, #20]
 800e4ea:	1d18      	adds	r0, r3, #4
 800e4ec:	6028      	str	r0, [r5, #0]
 800e4ee:	0635      	lsls	r5, r6, #24
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	d501      	bpl.n	800e4f8 <_printf_i+0x1c4>
 800e4f4:	6019      	str	r1, [r3, #0]
 800e4f6:	e002      	b.n	800e4fe <_printf_i+0x1ca>
 800e4f8:	0670      	lsls	r0, r6, #25
 800e4fa:	d5fb      	bpl.n	800e4f4 <_printf_i+0x1c0>
 800e4fc:	8019      	strh	r1, [r3, #0]
 800e4fe:	2300      	movs	r3, #0
 800e500:	6123      	str	r3, [r4, #16]
 800e502:	4615      	mov	r5, r2
 800e504:	e7bc      	b.n	800e480 <_printf_i+0x14c>
 800e506:	682b      	ldr	r3, [r5, #0]
 800e508:	1d1a      	adds	r2, r3, #4
 800e50a:	602a      	str	r2, [r5, #0]
 800e50c:	681d      	ldr	r5, [r3, #0]
 800e50e:	6862      	ldr	r2, [r4, #4]
 800e510:	2100      	movs	r1, #0
 800e512:	4628      	mov	r0, r5
 800e514:	f7f1 fe64 	bl	80001e0 <memchr>
 800e518:	b108      	cbz	r0, 800e51e <_printf_i+0x1ea>
 800e51a:	1b40      	subs	r0, r0, r5
 800e51c:	6060      	str	r0, [r4, #4]
 800e51e:	6863      	ldr	r3, [r4, #4]
 800e520:	6123      	str	r3, [r4, #16]
 800e522:	2300      	movs	r3, #0
 800e524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e528:	e7aa      	b.n	800e480 <_printf_i+0x14c>
 800e52a:	6923      	ldr	r3, [r4, #16]
 800e52c:	462a      	mov	r2, r5
 800e52e:	4649      	mov	r1, r9
 800e530:	4640      	mov	r0, r8
 800e532:	47d0      	blx	sl
 800e534:	3001      	adds	r0, #1
 800e536:	d0ad      	beq.n	800e494 <_printf_i+0x160>
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	079b      	lsls	r3, r3, #30
 800e53c:	d413      	bmi.n	800e566 <_printf_i+0x232>
 800e53e:	68e0      	ldr	r0, [r4, #12]
 800e540:	9b03      	ldr	r3, [sp, #12]
 800e542:	4298      	cmp	r0, r3
 800e544:	bfb8      	it	lt
 800e546:	4618      	movlt	r0, r3
 800e548:	e7a6      	b.n	800e498 <_printf_i+0x164>
 800e54a:	2301      	movs	r3, #1
 800e54c:	4632      	mov	r2, r6
 800e54e:	4649      	mov	r1, r9
 800e550:	4640      	mov	r0, r8
 800e552:	47d0      	blx	sl
 800e554:	3001      	adds	r0, #1
 800e556:	d09d      	beq.n	800e494 <_printf_i+0x160>
 800e558:	3501      	adds	r5, #1
 800e55a:	68e3      	ldr	r3, [r4, #12]
 800e55c:	9903      	ldr	r1, [sp, #12]
 800e55e:	1a5b      	subs	r3, r3, r1
 800e560:	42ab      	cmp	r3, r5
 800e562:	dcf2      	bgt.n	800e54a <_printf_i+0x216>
 800e564:	e7eb      	b.n	800e53e <_printf_i+0x20a>
 800e566:	2500      	movs	r5, #0
 800e568:	f104 0619 	add.w	r6, r4, #25
 800e56c:	e7f5      	b.n	800e55a <_printf_i+0x226>
 800e56e:	bf00      	nop
 800e570:	0800f131 	.word	0x0800f131
 800e574:	0800f142 	.word	0x0800f142

0800e578 <memmove>:
 800e578:	4288      	cmp	r0, r1
 800e57a:	b510      	push	{r4, lr}
 800e57c:	eb01 0402 	add.w	r4, r1, r2
 800e580:	d902      	bls.n	800e588 <memmove+0x10>
 800e582:	4284      	cmp	r4, r0
 800e584:	4623      	mov	r3, r4
 800e586:	d807      	bhi.n	800e598 <memmove+0x20>
 800e588:	1e43      	subs	r3, r0, #1
 800e58a:	42a1      	cmp	r1, r4
 800e58c:	d008      	beq.n	800e5a0 <memmove+0x28>
 800e58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e592:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e596:	e7f8      	b.n	800e58a <memmove+0x12>
 800e598:	4402      	add	r2, r0
 800e59a:	4601      	mov	r1, r0
 800e59c:	428a      	cmp	r2, r1
 800e59e:	d100      	bne.n	800e5a2 <memmove+0x2a>
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5aa:	e7f7      	b.n	800e59c <memmove+0x24>

0800e5ac <_sbrk_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4d06      	ldr	r5, [pc, #24]	; (800e5c8 <_sbrk_r+0x1c>)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4608      	mov	r0, r1
 800e5b6:	602b      	str	r3, [r5, #0]
 800e5b8:	f7f5 f988 	bl	80038cc <_sbrk>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_sbrk_r+0x1a>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_sbrk_r+0x1a>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	200013dc 	.word	0x200013dc

0800e5cc <memcpy>:
 800e5cc:	440a      	add	r2, r1
 800e5ce:	4291      	cmp	r1, r2
 800e5d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5d4:	d100      	bne.n	800e5d8 <memcpy+0xc>
 800e5d6:	4770      	bx	lr
 800e5d8:	b510      	push	{r4, lr}
 800e5da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5e2:	4291      	cmp	r1, r2
 800e5e4:	d1f9      	bne.n	800e5da <memcpy+0xe>
 800e5e6:	bd10      	pop	{r4, pc}

0800e5e8 <_realloc_r>:
 800e5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ec:	4680      	mov	r8, r0
 800e5ee:	4614      	mov	r4, r2
 800e5f0:	460e      	mov	r6, r1
 800e5f2:	b921      	cbnz	r1, 800e5fe <_realloc_r+0x16>
 800e5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f8:	4611      	mov	r1, r2
 800e5fa:	f7ff bc49 	b.w	800de90 <_malloc_r>
 800e5fe:	b92a      	cbnz	r2, 800e60c <_realloc_r+0x24>
 800e600:	f7ff fbda 	bl	800ddb8 <_free_r>
 800e604:	4625      	mov	r5, r4
 800e606:	4628      	mov	r0, r5
 800e608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e60c:	f000 f81b 	bl	800e646 <_malloc_usable_size_r>
 800e610:	4284      	cmp	r4, r0
 800e612:	4607      	mov	r7, r0
 800e614:	d802      	bhi.n	800e61c <_realloc_r+0x34>
 800e616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e61a:	d812      	bhi.n	800e642 <_realloc_r+0x5a>
 800e61c:	4621      	mov	r1, r4
 800e61e:	4640      	mov	r0, r8
 800e620:	f7ff fc36 	bl	800de90 <_malloc_r>
 800e624:	4605      	mov	r5, r0
 800e626:	2800      	cmp	r0, #0
 800e628:	d0ed      	beq.n	800e606 <_realloc_r+0x1e>
 800e62a:	42bc      	cmp	r4, r7
 800e62c:	4622      	mov	r2, r4
 800e62e:	4631      	mov	r1, r6
 800e630:	bf28      	it	cs
 800e632:	463a      	movcs	r2, r7
 800e634:	f7ff ffca 	bl	800e5cc <memcpy>
 800e638:	4631      	mov	r1, r6
 800e63a:	4640      	mov	r0, r8
 800e63c:	f7ff fbbc 	bl	800ddb8 <_free_r>
 800e640:	e7e1      	b.n	800e606 <_realloc_r+0x1e>
 800e642:	4635      	mov	r5, r6
 800e644:	e7df      	b.n	800e606 <_realloc_r+0x1e>

0800e646 <_malloc_usable_size_r>:
 800e646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e64a:	1f18      	subs	r0, r3, #4
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	bfbc      	itt	lt
 800e650:	580b      	ldrlt	r3, [r1, r0]
 800e652:	18c0      	addlt	r0, r0, r3
 800e654:	4770      	bx	lr
	...

0800e658 <_init>:
 800e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65a:	bf00      	nop
 800e65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e65e:	bc08      	pop	{r3}
 800e660:	469e      	mov	lr, r3
 800e662:	4770      	bx	lr

0800e664 <_fini>:
 800e664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e666:	bf00      	nop
 800e668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e66a:	bc08      	pop	{r3}
 800e66c:	469e      	mov	lr, r3
 800e66e:	4770      	bx	lr
